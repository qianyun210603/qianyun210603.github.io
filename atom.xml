<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>书剑阁</title>
  
  <subtitle>技术の记录本</subtitle>
  <link href="https://booksword.tk/atom.xml" rel="self"/>
  
  <link href="https://booksword.tk/"/>
  <updated>2023-04-06T08:43:33.745Z</updated>
  <id>https://booksword.tk/</id>
  
  <author>
    <name>BookSword</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>TigerVNC：使用X.509加密连接</title>
    <link href="https://booksword.tk/2023/04/06/509%E5%8A%A0%E5%AF%86%E8%BF%9E%E6%8E%A5/"/>
    <id>https://booksword.tk/2023/04/06/509%E5%8A%A0%E5%AF%86%E8%BF%9E%E6%8E%A5/</id>
    <published>2023-04-06T00:06:00.000Z</published>
    <updated>2023-04-06T08:43:33.745Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>根据Ubuntu 20.04安装VNC服务（Xfce4）配置好VNC后，连接时会提示数据未加密所以不安全。</p><p><img src="/2023/04/06/509%E5%8A%A0%E5%AF%86%E8%BF%9E%E6%8E%A5/image.png.png" alt="image.png"></p><p>查阅文档后得知TigerVNC支持X.509认证的TLS加密。</p><h3 id="设置方法"><a class="header-anchor" href="#设置方法">¶</a>设置方法</h3><h4 id="服务端"><a class="header-anchor" href="#服务端">¶</a>服务端</h4><p>首先生成认证文件。可以使用商业的认证（如有）。如果没有，则需要使用OpenSSL生成自己的认证。</p><ol><li>安装OpenSSL</li></ol><ul><li>RedHat/CentOS/Fedora：<code>sudo yum install openssl</code></li><li>Debian/Ubuntu/Mint: <code>sudo apt-get install openssl</code></li></ul><ol start="2"><li>使用OpenSSL生成认证密钥对</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">openssl req -x509 -newkey rsa -days 365 -nodes -keyout vnc-server-private.pem -out vnc-server.pem -subj <span class="string">&#x27;/CN=&lt;your server ip&gt;&#x27;</span> -addext <span class="string">&quot;subjectAltName=IP:&lt;your server ip&gt;&quot;</span></span><br></pre></td></tr></table></figure><p>（将<code>&lt;your server ip&gt;</code>替换成服务器真实IP）</p><p>会在运行命令的文件夹下面生成<code>vnc-server-private.pem</code>和<code>vnc-server.pem</code>两个文件。将<code>vnc-server.pem</code>下载到客户机上备用。<br>3. （可选）为了便于管理，将密钥对拷贝到<code>~/.vnc</code>下面。<br>4. 附带以下参数运行<code>vncserver</code>:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vncserver -localhost no -SecurityTypes X509Vnc -X509Key vnc-server-private.pem -X509Cert vnc-server.pem</span><br></pre></td></tr></table></figure><h4 id="客户端（使用TigerVNCviewer）"><a class="header-anchor" href="#客户端（使用TigerVNCviewer）">¶</a>客户端（使用TigerVNCviewer）</h4><p>点击<code>Options...</code>按钮，将<code>Security</code>选项卡下的<code>Path to X509 CA certificate</code>指向从OpenSSL生成的公钥pem文件<code>vnc-server.pem</code>（之前从服务端下载的）。</p><p><img src="/2023/04/06/509%E5%8A%A0%E5%AF%86%E8%BF%9E%E6%8E%A5/2023-04-06T164308.png" alt="2023-04-06T164308"></p><p>然后照常连接。可以看到连接已经变成安全的了。</p><p><img src="/2023/04/06/509%E5%8A%A0%E5%AF%86%E8%BF%9E%E6%8E%A5/2023-04-06T164124.png" alt="2023-04-06T164124"></p><h4 id="服务端配置文件"><a class="header-anchor" href="#服务端配置文件">¶</a>服务端配置文件</h4><p>如果不想每次都运行服务都需要打那么长一串命令，可以把选项写入服务器上的配置文件，并放在<code>~/.vnc</code>文件夹下：</p><ul><li>版本1.10：<code>~/.vnc.conf</code></li><li>版本1.12+: <code>~/.vnc/tigervnc.conf</code></li></ul><p>配置文件内容如下：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$localhost=&quot;no&quot;;</span><br><span class="line">$SecurityTypes=&quot;X509Vnc&quot;;</span><br><span class="line">$X509Key=&quot;$ENV&#123;HOME&#125;/.vnc/vnc-server-private.pem&quot;;</span><br><span class="line">$X509Cert=&quot;$ENV&#123;HOME&#125;/.vnc/vnc-server.pem&quot;;</span><br></pre></td></tr></table></figure><h2 id="参考资料"><a class="header-anchor" href="#参考资料">¶</a>参考资料</h2><blockquote><ul><li><a href="https://github.com/TigerVNC/tigervnc/wiki/Secure-your-connection">Secure your connection</a></li></ul></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css&quot;&gt;&lt;p&gt;根据Ubuntu 20.04安装VNC服务（Xfce4）配置好VNC后，连接</summary>
      
    
    
    
    <category term="其他" scheme="https://booksword.tk/categories/%E5%85%B6%E4%BB%96/"/>
    
    
  </entry>
  
  <entry>
    <title>Hexo部署到GitHub Pages后设置的自定义域名丢失</title>
    <link href="https://booksword.tk/2023/03/23/Hexo_missing_custom_domain/"/>
    <id>https://booksword.tk/2023/03/23/Hexo_missing_custom_domain/</id>
    <published>2023-03-23T13:02:14.000Z</published>
    <updated>2023-03-23T09:18:08.414Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h3 id="问题"><a class="header-anchor" href="#问题">¶</a>问题</h3><p>基于Hexo的静态博客托管在GitHub Pages上，并且在<code>Settings-&gt;Pages</code>里面绑定了自定义域名。<br><img src="/2023/03/23/Hexo_missing_custom_domain/Hexo_missing_custom_domain%5C1.png" alt=""></p><p>但每次部署（运行<code>hexo deploy</code>后设置的自定义域名都会被自动清空。</p><h3 id="解决"><a class="header-anchor" href="#解决">¶</a>解决</h3><p>在<code>source</code>文件夹下建立文本文件<code>CNAME</code>（无后缀名），内容为自定义域名。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css&quot;&gt;&lt;h3 id=&quot;问题&quot;&gt;&lt;a class=&quot;header-anchor&quot; href</summary>
      
    
    
    
    <category term="Hexo" scheme="https://booksword.tk/categories/Hexo/"/>
    
    
  </entry>
  
  <entry>
    <title>ffmpeg合并文件报错“Unsafe file name”</title>
    <link href="https://booksword.tk/2023/02/21/ffmpeg_unsafe_file_name/"/>
    <id>https://booksword.tk/2023/02/21/ffmpeg_unsafe_file_name/</id>
    <published>2023-02-21T13:37:49.000Z</published>
    <updated>2023-03-21T12:17:21.542Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>解决：加上参数<code>-safe 0</code>。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css&quot;&gt;&lt;p&gt;解决：加上参数&lt;code&gt;-safe 0&lt;/code&gt;。&lt;/p&gt;
</summary>
      
    
    
    
    <category term="应用软件" scheme="https://booksword.tk/categories/%E5%BA%94%E7%94%A8%E8%BD%AF%E4%BB%B6/"/>
    
    <category term="ffmpeg" scheme="https://booksword.tk/categories/%E5%BA%94%E7%94%A8%E8%BD%AF%E4%BB%B6/ffmpeg/"/>
    
    
  </entry>
  
  <entry>
    <title>Ubuntu 20.04安装VNC服务（Xfce4）</title>
    <link href="https://booksword.tk/2023/02/04/Ubuntu%2020.04%E5%AE%89%E8%A3%85VNC%E6%9C%8D%E5%8A%A1%EF%BC%88Xfce4%EF%BC%89/"/>
    <id>https://booksword.tk/2023/02/04/Ubuntu%2020.04%E5%AE%89%E8%A3%85VNC%E6%9C%8D%E5%8A%A1%EF%BC%88Xfce4%EF%BC%89/</id>
    <published>2023-02-04T09:35:00.000Z</published>
    <updated>2023-02-04T10:57:19.578Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h4 id="目标"><a class="header-anchor" href="#目标">¶</a>目标</h4><p>给VPS安装VNC服务以能使用图形化界面软件。</p><h4 id="步骤"><a class="header-anchor" href="#步骤">¶</a>步骤</h4><ol><li>安装Xfce桌面环境<br><code> sudo apt install xfce4</code></li></ol><p><font size="1">a. 中途会让选择是用<code>gdm3</code>还是<code>lightdm</code>。根据网上描述[^fn1]，<code>lightdm</code>占用资源更少，支持的桌面系统更多，同时可定制性更好；而<code>gdm3</code>是专门为<code>GNOME</code>开发的。所以这里选<code>lightdm</code>。</font></p><ol start="2"><li><p>安装VNC Server<br><code> sudo apt install tigervnc-standalone-server</code></p></li><li><p>初始化</p></li><li><p>运行命令<code>vncserver</code>，会提示输入密码，这个密码是后期连接vnc的密码，一定要记住。</p></li><li><p>运行<code>vncserver -kill :1</code>杀掉刚刚的服务进程。</p></li><li><p><code>vi ~/.vnc/xstartup</code>建立<code>xstartup</code>文件，并将以下内容复制进去：</p></li></ol><pre><code><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/sh</span></span><br><span class="line"><span class="comment"># Uncomment the following two lines for normal desktop:</span></span><br><span class="line"><span class="comment"># unset SESSION_MANAGER</span></span><br><span class="line"><span class="comment"># exec /etc/X11/xinit/xinitrc</span></span><br><span class="line"></span><br><span class="line">[ -x /etc/vnc/xstartup ] &amp;&amp; <span class="built_in">exec</span> /etc/vnc/xstartup</span><br><span class="line">[ -r <span class="variable">$HOME</span>/.Xresources ] &amp;&amp; xrdb <span class="variable">$HOME</span>/.Xresources</span><br><span class="line">xsetroot -solid grey</span><br><span class="line">vncconfig -iconic &amp;</span><br><span class="line">x-terminal-emulator -geometry 80x24+10+10 -<span class="built_in">ls</span> -title <span class="string">&quot;<span class="variable">$VNCDESKTOP</span> Desktop&quot;</span> &amp;</span><br><span class="line">x-window-manager &amp;</span><br><span class="line"></span><br><span class="line"><span class="comment">#gnome-terminal &amp;</span></span><br><span class="line"></span><br><span class="line">sesion-manager &amp; xfdesktop &amp; xfce4-panel &amp;</span><br><span class="line">xfce4-menu-plugin &amp;</span><br><span class="line">xfsettingsd &amp;</span><br><span class="line">xfconfd &amp;</span><br><span class="line">xfwm4 &amp;</span><br></pre></td></tr></table></figure></code></pre><ol start="4"><li>再次开启<code>vncserver</code>: <code>vncserver -localhost no</code><br><code>tigervncserver</code>默认只能本机访问，<code>-localhost no</code>参数关闭此限制。</li></ol><h4 id="其他："><a class="header-anchor" href="#其他：">¶</a>其他：</h4><ul><li>VNC服务默认使用从5901开始的端口，一台VPS上可以开启多个VNC服务，连接时<code>ip:1</code>对应5901端口的服务，连接时<code>ip:2</code>对应5902端口的服务，以此类推。</li><li>如VPS有防火墙需要打开对应的端口。</li></ul><p>^fn1: <a href="https://www.linuxfordevices.com/tutorials/linux/gdm3-vs-lightdm">https://www.linuxfordevices.com/tutorials/linux/gdm3-vs-lightdm</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css&quot;&gt;&lt;h4 id=&quot;目标&quot;&gt;&lt;a class=&quot;header-anchor&quot; href</summary>
      
    
    
    
    <category term="Linux" scheme="https://booksword.tk/categories/Linux/"/>
    
    
  </entry>
  
  <entry>
    <title>Linux Swap交换分区</title>
    <link href="https://booksword.tk/2023/01/11/linux-swap%E4%BA%A4%E6%8D%A2%E5%88%86%E5%8C%BA/"/>
    <id>https://booksword.tk/2023/01/11/linux-swap%E4%BA%A4%E6%8D%A2%E5%88%86%E5%8C%BA/</id>
    <published>2023-01-11T12:02:00.000Z</published>
    <updated>2023-01-11T12:02:07.462Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>在我们自己的购买的服务器环境中，一般是买的1g的内存，但是当服务器里面的东西装的比较多的时候就会导致内存不够用了,这个时候可以通过增加虚拟内存来夸大内存容量。</p><h4 id="设置"><a class="header-anchor" href="#设置">¶</a>设置</h4><p>0、查看内存使用情况</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ free -m</span><br><span class="line">              total        used        free      shared  buff/cache   available</span><br><span class="line">Mem:           3914         161        1110           0        2643        3479</span><br><span class="line">Swap:          8703          64        8639</span><br></pre></td></tr></table></figure><p>1、检查 Swap 空间，先检查一下系统里有没有既存的 Swap 文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ swapon -s</span><br></pre></td></tr></table></figure><p>如果返回的信息概要是空的，则表示 Swap 文件不存在。</p><p>2、创建文件并全部写入0.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">dd</span> <span class="keyword">if</span>=/dev/zero of=/swapfile bs=1G count=4</span><br></pre></td></tr></table></figure><p>以上命令创建4G的全零文件。</p><p>【参数说明】</p><ul><li>if=文件名：输入文件名，缺省为标准输入。即指定源文件。&lt; if=input file &gt;</li><li>of=文件名：输出文件名，缺省为标准输出。即指定目的文件。&lt; of=output file &gt;</li><li>bs=bytes：同时设置读入/输出的块大小为bytes个字节</li><li>count=blocks：仅拷贝blocks个块，块大小等于bs指定的字节数。</li></ul><p>3、将创建的文件转为swap</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ mkswap /swapfile</span><br></pre></td></tr></table></figure><p>4、激活</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ swapon /swapfile</span><br></pre></td></tr></table></figure><p>之后可使用0，1步骤中的命令检测是否开启成功。</p><p>5、(可选)如果要机器重启的时候自动挂载 Swap ，那么还需要修改<code>/etc/fstab</code>，添加如下行：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/swapfile   swap   swap    defaults 0 0</span><br></pre></td></tr></table></figure><p>6、删除文件Swap</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ swapoff  /swapfile  <span class="comment">#卸载swap文件</span></span><br><span class="line">$ <span class="built_in">rm</span> -rf /swapfile  <span class="comment">#删除文件</span></span><br></pre></td></tr></table></figure><p>如果进行了步骤5，须相应删除该行。</p><h4 id="相关知识"><a class="header-anchor" href="#相关知识">¶</a>相关知识</h4><p>交换技术<br>交换（Swapping）技术它的主要特点是：打破了一个程序一旦进入内存，就一直驻留在内存直到运行结束的限制。</p><p>在多道程序环境下，内存中可以同时存在多个进程（程序），其中的一部分进程由于等待某些事件而处于阻塞状态，但这些处于阻塞状态的进程仍然驻留内存，并占据着内存空间；另一方面，外存上可能有许多等待装入内存运行的程序，却因内存不足而未能装入。显然，这是一种严重的系统资源浪费，它会使系统的吞吐量下降。为了解决这个问题，可以在操作系统中增加交换（对换）功能，即由操作系统根据需要，将内存中暂时不具备运行条件的部分程序或数据移到外存（换出），以便腾出足够的内存空间，将外存中需要运行的程序或数据调入内存（换入）投入运行。在操作系统中引入交换（对换）技术，可以显著提高内存资源的利用率并改善系统的性能。</p><p>以交换的单位不同来划分，则有以下两种交换方式。</p><p>以进程为单位的交换。每次换入/换出的是整个进程，我们称这种交换为进程交换（进程对换）或整体交换（整体对换）。进程交换广泛应用于分时系统，主要解决内存紧张问题。</p><p>以页（此处不多做介绍）或段（此处不多做介绍）为单位的交换。这种交换分别称为页置换（页交换或页对换）或段置换（段交换或段对换），页置换和段置换是以进程中的某一部分为交换单位，因此又称为部分交换（部分对换）。部分交换广泛应用于现代操作系统中，是实现虚拟存储器的基础。</p><p>我们这里所说的交换是指进程交换，为了实现进程交换，操作系统需要解决以下两个问题。</p><p>对换空间的管理。在具有交换功能的操作系统中，一般将外存空间分为文件区和交换区（对换区）。文件区用来存放文件，而交换区则用来存放从内存中换出的进程，或等待换入内存的进程。尽管文件区一般采用离散分配方式来分配外存存储空间，但交换区的存储空间分配则宜采用连续分配方式，这是因为交换区中存放的是换入/换出的进程，为了提高交换速度，有必要采用连续分配方式，并且交换区可以采用与可变分区存储管理类似的方法进行管理。例如，使用空闲分区表或空闲分区链来记录外存交换区的使用情况，利用首次适应算法、最佳适应算法或最差适应算法来进行外存交换区的分配。</p><p>交换的时机以及选择哪些进程交换。交换时机一般选择在进程的时间片用完，以及进程等待输入/输出时，或者在进程要求扩充其内存空间而得不到满足时。换出到外存的进程一般选择处于阻塞状态，或优先级低且短时间内不会再次投入运行的进程；换入到内存的进程则应选择换出时间最久且已处于就绪状态的进程。</p><h5 id="参考"><a class="header-anchor" href="#参考">¶</a>参考</h5><p>1、<a href="https://cloud.tencent.com/developer/article/1704157">https://cloud.tencent.com/developer/article/1704157</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css&quot;&gt;&lt;p&gt;在我们自己的购买的服务器环境中，一般是买的1g的内存，但是当服务器里面的东西</summary>
      
    
    
    
    <category term="Linux" scheme="https://booksword.tk/categories/Linux/"/>
    
    
  </entry>
  
  <entry>
    <title>Ubuntu系统挂载Windows共享文件夹通过credential文件认证</title>
    <link href="https://booksword.tk/2022/11/29/ubuntu-mount-windows-share-drive-with-credential-file/"/>
    <id>https://booksword.tk/2022/11/29/ubuntu-mount-windows-share-drive-with-credential-file/</id>
    <published>2022-11-29T07:55:00.000Z</published>
    <updated>2023-04-06T08:07:18.796Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h3 id="问题"><a class="header-anchor" href="#问题">¶</a>问题</h3><p>要把Windows的共享文件夹挂载到Ubuntu系统的电脑里面，使用命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo mount -t cifs //&lt;ip or host&gt;/&lt;source folder&gt; &lt;destiny folder&gt; -o username=&#x27;xxx&#x27;&#x27;,password=&#x27;xxx&#x27;,vers=2.0</span><br></pre></td></tr></table></figure><p>可以，但是使用密码文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo mount -t cifs //&lt;ip or host&gt;/&lt;source folder&gt; &lt;destiny folder&gt; -o credentials=/xxx/.smbcredentials,vers=2.0</span><br></pre></td></tr></table></figure><p>报如下错误</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mount: &lt;destiny folder&gt;: bad option; for several filesystems (e.g. nfs, cifs) you might need a /sbin/mount.&lt;type&gt; helper program.</span><br></pre></td></tr></table></figure><h3 id="解决"><a class="header-anchor" href="#解决">¶</a>解决</h3><p>安装<code>cifs-util</code>包。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install cifs-util</span><br></pre></td></tr></table></figure><p>安装后重新挂载，成功~</p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css&quot;&gt;&lt;h3 id=&quot;问题&quot;&gt;&lt;a class=&quot;header-anchor&quot; href</summary>
      
    
    
    
    <category term="Linux" scheme="https://booksword.tk/categories/Linux/"/>
    
    
  </entry>
  
  <entry>
    <title>gitignore文件的顺序</title>
    <link href="https://booksword.tk/2022/11/22/gitignore%E6%96%87%E4%BB%B6%E7%9A%84%E9%A1%BA%E5%BA%8F/"/>
    <id>https://booksword.tk/2022/11/22/gitignore%E6%96%87%E4%BB%B6%E7%9A%84%E9%A1%BA%E5%BA%8F/</id>
    <published>2022-11-22T09:26:00.000Z</published>
    <updated>2022-11-22T09:32:01.854Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>发现<code>.gitignore</code>里面条目顺序是有意义的。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">*.c</span><br><span class="line">*.cpp</span><br><span class="line">!skts.c</span><br><span class="line">!np_datetime.c</span><br><span class="line">!np_datetime_strings.c</span><br></pre></td></tr></table></figure><p>则<code>!</code>的几项生效</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">$ git status</span><br><span class="line">On branch main</span><br><span class="line">Your branch is up to date with &#x27;origin/main&#x27;.</span><br><span class="line"></span><br><span class="line">Changes not staged for commit:</span><br><span class="line">  (use &quot;git add &lt;file&gt;...&quot; to update what will be committed)</span><br><span class="line">  (use &quot;git restore &lt;file&gt;...&quot; to discard changes in working directory)</span><br><span class="line">        modified:   .gitignore</span><br><span class="line"></span><br><span class="line">Untracked files:</span><br><span class="line">  (use &quot;git add &lt;file&gt;...&quot; to include in what will be committed)</span><br><span class="line">        __init__.pxd</span><br><span class="line">        pandas_helper/_libs/tslibs/src/datetime/np_datetime.c</span><br><span class="line">        pandas_helper/_libs/tslibs/src/datetime/np_datetime_strings.c</span><br><span class="line"></span><br><span class="line">no changes added to commit (use &quot;git add&quot; and/or &quot;git commit -a&quot;)</span><br></pre></td></tr></table></figure><p>如果反过来</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">!skts.c</span><br><span class="line">!np_datetime.c</span><br><span class="line">!np_datetime_strings.c</span><br><span class="line">*.c</span><br><span class="line">*.cpp</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css&quot;&gt;&lt;p&gt;发现&lt;code&gt;.gitignore&lt;/code&gt;里面条目顺序是有意义的。&lt;</summary>
      
    
    
    
    <category term="Programming" scheme="https://booksword.tk/categories/Programming/"/>
    
    <category term="Git" scheme="https://booksword.tk/categories/Programming/Git/"/>
    
    
  </entry>
  
  <entry>
    <title>设置局域网和广域网远程开机（Wake on Lan）</title>
    <link href="https://booksword.tk/2022/11/22/wakeonlan/"/>
    <id>https://booksword.tk/2022/11/22/wakeonlan/</id>
    <published>2022-11-22T09:25:00.000Z</published>
    <updated>2022-11-29T08:38:51.621Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h2 id="需求"><a class="header-anchor" href="#需求">¶</a>需求</h2><p>因为需要随时远程访问家里计算机，因此希望出远门后即便出现家里停电等情况，家里计算机意外关机，也能够通过远程唤醒。</p><h2 id="网上的资料"><a class="header-anchor" href="#网上的资料">¶</a>网上的资料</h2><p>网上的解决方案：</p><ol><li>Wake on LAN (WOL)<sup class="footnote-ref"><a href="#fn1" id="fnref1">[1]</a></sup>: 本文的方案。通过向目标机发送一个魔幻数据包（Magic Packet）进行远程唤醒，需要主板和网卡支持。本意设计是在局域网内，通过端口映射等方法也可以在广域网生效（需要公网静态IP或者公网动态IP+DDNS）。</li><li>各种开机棒等： 同样需要主板和网卡的支持，同时需要购买格外硬件，还要在硬件厂商的网站注册以让硬件厂商能直接访问对应硬件，安全性也是个顾虑。</li><li>智能插座，一些DIY的能在线控制的继电器之类的设备。</li></ol><p>考虑需要远程的连接的PC都支持WOL，研究采用WOL的方案。</p><h2 id="实现"><a class="header-anchor" href="#实现">¶</a>实现</h2><h3 id="局域网唤醒"><a class="header-anchor" href="#局域网唤醒">¶</a>局域网唤醒</h3><h4 id="主板BIOS设置"><a class="header-anchor" href="#主板BIOS设置">¶</a>主板BIOS设置</h4><ul><li>开机按<code>Del</code>（根据主板品牌可能是其他功能键，建议查阅主板说明书）进入BIOS设置，打开设备唤醒中的PCIE设备唤醒选项。根据品牌可能被称为<ul><li>Boot on LAN</li><li>Wake on LAN</li><li>PME Event WakeUp,</li><li>Resume by MAC LAN</li><li>Wake-Up by PCI card</li><li>Wake Up On PCI PME</li><li>Power On by PCI Card</li><li>WakeUp by PME of PCI</li><li>Power On By PCI Devices</li><li>WakeUp by Onborad LAN</li><li>Resume By PCI or PCI-E Ddevice<br>等等。</li></ul></li><li>如果有的话，关闭Fast Boot或类似选项。</li><li>如果有的话，关闭EMP。</li></ul><h4 id="目标机系统设置"><a class="header-anchor" href="#目标机系统设置">¶</a>目标机系统设置</h4><h6 id="Windows-10"><a class="header-anchor" href="#Windows-10">¶</a>Windows 10</h6><ul><li>首先，更新网卡驱动到最新版本。<ul><li>建议去主板/网卡的官网下载。Windows集成的更新并不及时。</li></ul></li><li>搜索框搜“设备管理器（Device Manager）”并打开。</li><li>在“网络适配器（Network adapters）”下面找到有线网卡，右键菜单“属性（Properties）”。<ul><li>进入“高级（Advanced）”选项卡，开启“Wait for Link”, “Wake on Link Settings”, “Wake on Magic Packet”, “Wake on Pattern Match”。</li><li>进入“电源管理（Power Management）”选项卡，把三个复选框全部选上。</li></ul></li></ul><h6 id="Ubuntu-22-04"><a class="header-anchor" href="#Ubuntu-22-04">¶</a>Ubuntu 22.04</h6><ul><li>首先查看本机的各网卡名称和MAC地址<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">$ ifconfig</span><br><span class="line">enp5s0: flags=4099&lt;UP,BROADCAST,MULTICAST&gt;  mtu xxxx</span><br><span class="line">        ether xx:xx:xx:xx:xx:xx  txqueuelen 1000  (Ethernet)</span><br><span class="line">        RX packets 0  bytes 0 (0.0 B)</span><br><span class="line">        RX errors 0  dropped 0  overruns 0  frame 0</span><br><span class="line">        TX packets 0  bytes 0 (0.0 B)</span><br><span class="line">        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0</span><br><span class="line">        device memory 0xfc000000-fc01ffff</span><br><span class="line"></span><br><span class="line">enpxxx: flags=4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;  mtu 1500</span><br><span class="line">        inet 192.168.x.xxx  netmask 255.255.255.0  broadcast 192.168.x.255</span><br><span class="line">        inet6 xxxx:1b43  prefixlen 64  scopeid 0x0&lt;global&gt;</span><br><span class="line">        inet6 fe80::271e:d40:2e18:9c6  prefixlen 64  scopeid 0x20&lt;<span class="built_in">link</span>&gt;</span><br><span class="line">        inet6 xxxx:7bb2  prefixlen 64  scopeid 0x0&lt;global&gt;</span><br><span class="line">        inet6 xxxx:9b94  prefixlen 64  scopeid 0x0&lt;global&gt;</span><br><span class="line">        inet6 xxxx:99f1  prefixlen 64  scopeid 0x0&lt;global&gt;</span><br><span class="line">        ether xx:xx:xx:xx:xx:xx  txqueuelen 1000  (Ethernet)</span><br><span class="line">        RX packets 53552819  bytes 30767884934 (30.7 GB)</span><br><span class="line">        RX errors 0  dropped 671  overruns 0  frame 0</span><br><span class="line">        TX packets 72797481  bytes 71048847776 (71.0 GB)</span><br><span class="line">        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0</span><br><span class="line"></span><br><span class="line">...</span><br></pre></td></tr></table></figure>从上面信息查出本机有线网网卡名称为<code>enpxxx</code>。</li><li>然后使用<code>ethtool</code>查看是否开启了WOL。<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"> $ sudo ethtool enpxxx | grep Wake</span><br><span class="line">Supports Wake-on: pumbg</span><br><span class="line">Wake-on: g</span><br></pre></td></tr></table></figure>这样表示支持WOL且已经开启。<ul><li>如果显示<code>Wake-on: d</code>则表示WOL被禁用，需使用命令<code>sudo ethtool -s enpxxx wol g</code>开启。</li><li>如未安装<code>ethtool</code>可以<code>sudo apt install ethtool</code>安装。</li></ul></li></ul><h4 id="控制软件"><a class="header-anchor" href="#控制软件">¶</a>控制软件</h4><h6 id="Android平台"><a class="header-anchor" href="#Android平台">¶</a>Android平台</h6><p>笔者使用的是Wake on LAN v1.35，官网已不可考，吾爱破解有个<a href="https://www.52pojie.cn/thread-1609028-1-1.html">帖子</a>提供了apk文件的下载。<br>点&quot;+&quot;按钮新建，选择“ENTER MANUALLY”，起个名字填入MAC地址即可。填写完成后<code>ADD DEVICE</code>，就会显示在列表里。<br><img src="/images/2022/11/wol_lan_control_android.jpg" alt=""><img src="/images/2022/11/wol_mainlist_control_android.jpg" alt=""></p><p>将手机连接到目标机同一局域网内的WiFi上，点击条目即可唤醒。</p><h3 id="广域网唤醒"><a class="header-anchor" href="#广域网唤醒">¶</a>广域网唤醒</h3><h4 id="公网网址"><a class="header-anchor" href="#公网网址">¶</a>公网网址</h4><p>国内运营商对家用网络一般给的都是内网IP，具体可以到运营商给的光猫里查看。如果申请了桥接，那么需要到连接光猫的路由器里查看。</p><ul><li>如果网址以10.或者172.开头，则多半是内网IP。</li><li>完全确认可以去<a href="https://www.ip138.com/">ip138</a>等网站上查看本机对外的IP，如果和光猫、路由的IP一致则是公网IP，否则是内网IP。</li></ul><h4 id="动态域名"><a class="header-anchor" href="#动态域名">¶</a>动态域名</h4><p>获取公网IP之后，需要到路由器所支持的动态域名商那里申请一个动态域名。如对联通的光猫，看他支持ORAY（其实是向日葵、花生壳等几家的合体）就去ORAY注册个账户，然后申请个花生壳的动态域名，申请后在路由里面按要求填写申请到的域名，ORAY的用户名，密码。</p><h4 id="路由器设置"><a class="header-anchor" href="#路由器设置">¶</a>路由器设置</h4><ul><li>设备的MAC地址与路由器分配的IP绑定。<br><img src="/images/2022/11/ipmac.png" alt=""></li><li>路由器需要设置端口转发，将外部发送过来的Magic Packet转发到目标机的端口9。</li></ul><hr class="footnotes-sep"><section class="footnotes"><ol class="footnotes-list"><li id="fn1" class="footnote-item"><p><a href="https://wiki.wireshark.org/WakeOnLAN">wiki.wireshak: WakeOnLAN</a> <a href="#fnref1" class="footnote-backref">↩︎</a></p></li></ol></section>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css&quot;&gt;&lt;h2 id=&quot;需求&quot;&gt;&lt;a class=&quot;header-anchor&quot; href</summary>
      
    
    
    
    <category term="其他" scheme="https://booksword.tk/categories/%E5%85%B6%E4%BB%96/"/>
    
    
  </entry>
  
  <entry>
    <title>Git Forked Repository强制与Fork源同步</title>
    <link href="https://booksword.tk/2022/11/14/git-forked-repository%E5%BC%BA%E5%88%B6%E4%B8%8E%E4%B8%8A%E6%B8%B8%E5%90%8C%E6%AD%A5/"/>
    <id>https://booksword.tk/2022/11/14/git-forked-repository%E5%BC%BA%E5%88%B6%E4%B8%8E%E4%B8%8A%E6%B8%B8%E5%90%8C%E6%AD%A5/</id>
    <published>2022-11-14T08:04:00.000Z</published>
    <updated>2022-11-14T08:25:47.838Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>首先将Fork源增加到分支的remote url里面，</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote add upstream git@github.com:microsoft/qlib.git</span><br></pre></td></tr></table></figure><p>然后<code>pull --rebase</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git pull --rebase upstream main</span><br></pre></td></tr></table></figure><p>再<code>reset hard</code>。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git reset --hard upstream/main</span><br></pre></td></tr></table></figure><p>最后<code>force push</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push --force origin main</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css&quot;&gt;&lt;p&gt;首先将Fork源增加到分支的remote url里面，&lt;/p&gt;
&lt;figur</summary>
      
    
    
    
    <category term="Programming" scheme="https://booksword.tk/categories/Programming/"/>
    
    <category term="Git" scheme="https://booksword.tk/categories/Programming/Git/"/>
    
    
  </entry>
  
  <entry>
    <title>Ubuntu 22.04安装Cuda Toolkit</title>
    <link href="https://booksword.tk/2022/11/03/ubuntucuda/"/>
    <id>https://booksword.tk/2022/11/03/ubuntucuda/</id>
    <published>2022-11-03T03:54:00.000Z</published>
    <updated>2022-11-03T04:41:42.421Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>Nvidia现在要求安装CuDNN和NICC都得登录Nvidia Developer网站，国内巨慢。药丸。</p><h4 id="CUDA"><a class="header-anchor" href="#CUDA">¶</a>CUDA</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sudo -i <span class="comment"># 切换root权限</span></span><br><span class="line">wget https://developer.download.nvidia.com/compute/cuda/repos/ubuntu2204/x86_64/cuda-keyring_1.0-1_all.deb</span><br><span class="line">dpkg -i cuda-keyring_1.0-1_all.deb</span><br><span class="line">apt update &amp;&amp; apt install cuda -y</span><br></pre></td></tr></table></figure><h4 id="NICC"><a class="header-anchor" href="#NICC">¶</a>NICC</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt install libnccl2=2.15.5-1+cuda11.8 libnccl-dev=2.15.5-1+cuda11.8</span><br></pre></td></tr></table></figure><h4 id="cuDNN"><a class="header-anchor" href="#cuDNN">¶</a>cuDNN</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">dpkg -i cudnn-local-repo-ubuntu2204-8.6.0.163_1.0-1_amd64.deb</span><br><span class="line"><span class="built_in">cp</span> /var/cudnn-local-repo-ubuntu2204-8.6.0.163/cudnn-local-FAED14DD-keyring.gpg /usr/share/keyrings/</span><br><span class="line">apt install libcudnn8 libcudnn8-dev libcudnn8-samples</span><br></pre></td></tr></table></figure><h6 id="测试cuDNN"><a class="header-anchor" href="#测试cuDNN">¶</a>测试cuDNN</h6><p>mnistCUDNN测试需要FreeImage。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt install libfreeimage3 libfreeimage-dev</span><br></pre></td></tr></table></figure><p>将sample拷贝到有写权限的目录，并正确设置权限。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cp</span> /usr/src/cudnn_samples_v8/ . -R</span><br></pre></td></tr></table></figure><p>进入每个目录<code>make</code>生成可执行文件，运行。如都可以运行，显示<code>Test passed!</code>，则安装成功。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css&quot;&gt;&lt;p&gt;Nvidia现在要求安装CuDNN和NICC都得登录Nvidia Devel</summary>
      
    
    
    
    <category term="Linux" scheme="https://booksword.tk/categories/Linux/"/>
    
    <category term="Cuda" scheme="https://booksword.tk/categories/Linux/Cuda/"/>
    
    
  </entry>
  
  <entry>
    <title>修复MongoDB设置导致mongod无法启动</title>
    <link href="https://booksword.tk/2022/10/15/%E4%BF%AE%E5%A4%8Dmongodb%E8%AE%BE%E7%BD%AE%E5%AF%BC%E8%87%B4mongod%E6%97%A0%E6%B3%95%E5%90%AF%E5%8A%A8/"/>
    <id>https://booksword.tk/2022/10/15/%E4%BF%AE%E5%A4%8Dmongodb%E8%AE%BE%E7%BD%AE%E5%AF%BC%E8%87%B4mongod%E6%97%A0%E6%B3%95%E5%90%AF%E5%8A%A8/</id>
    <published>2022-10-15T08:04:00.000Z</published>
    <updated>2022-10-15T10:38:45.536Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h2 id="缘起"><a class="header-anchor" href="#缘起">¶</a>缘起</h2><p>为了解决使用Arctic<sup class="footnote-ref"><a href="#fn1" id="fnref1">[1]</a></sup> MongoDB的日志里出现</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SASL SCRAM-SHA-1 authentication failed for myAdminUser on admin from client 192.168.3.100:9560 ; UserNotFound: Could not find user &quot;myAdminUser&quot; for db &quot;admin&quot;</span><br></pre></td></tr></table></figure><p>错误的问题，参考了数个连接（包括StackOverflow<sup class="footnote-ref"><a href="#fn2" id="fnref2">[2]</a></sup>），都提示要将<code>authSchema.currentVersion</code>从<code>5</code>改成<code>3</code>。照做以后就杯具了，<code>mongod</code>服务完全打不开了，提示错误</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">This server is using MONGODB-CR, an authentication mechanism which has been removed from MongoDB 4.0. In order to upgrade the auth schema, first downgrade MongoDB binaries to version 3.6 and then run the authSchemaUpgrade command. See http://dochub.mongodb.org/core/3.0-upgrade-to-scram-sha-1</span><br></pre></td></tr></table></figure><p>原因是我的MongoDB server是4.2版本，<code>authSchema.currentVersion=3</code>代表MONGODB-CR的认证方式，4.0以上的Mongo Server已经不再支持了。</p><font color="red">*感觉MongoDB这种设计简直愚蠢反人类到家了，这种能导致启动崩溃的设置居然是写在数据库里而不是独立的配置文件里，直接导致万一设错了服务就完全起不来，服务器起不来又无法更正配置，直接死循环了。*<p><em>所以，尽量不要更改数据库里的配置，一定需要改的话，改之前一定要备份。</em><br></p></font><p></p><h2 id="解决"><a class="header-anchor" href="#解决">¶</a>解决</h2><h4 id="失败尝试一"><a class="header-anchor" href="#失败尝试一">¶</a>失败尝试一</h4><p>按照日志里的提示，将MongoDB服务的版本降低到3.6，同样无法启动，提示WeirdTiger格式不兼容。顿时感觉天昏地暗，前一个备份已经两周多了，完全不想重新恢复这两周的所有数据。</p><h4 id="灵机一动的尝试二"><a class="header-anchor" href="#灵机一动的尝试二">¶</a>灵机一动的尝试二</h4><p>想到我按照的修改既然是存在数据库里的，那么必然改了某个数据库的磁盘文件。那么这个文件的修改日期一定是所有数据库数据文件中最新的。于是赶紧<code>cd</code>去数据库文件在磁盘里的目录，<code>ls -lnt</code>找到最后修改的文件是这个<code>collection-0-5610079802494816593.wt</code>。</p><p>用vim打卡，<code>:%!xxd</code>切换到二进制模式，搜索<code>authSchema</code>，果然找到了</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">00005070: 6400 0b00 0000 6175 7468 5363 6865 6d61  d.....authSchema</span><br><span class="line">00005080: 0010 6375 7272 656e 7456 6572 7369 6f6e  ..currentVersion</span><br><span class="line">00005090: 0003 0000 0000 0000 0000 0000 0000 0000  ................</span><br></pre></td></tr></table></figure><p>赶紧把<code>currentVersion</code>后边的0003改成0005。再次重启<code>mongod</code>。发现日志还是报错</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wiredTiger Error: collection-*.wt does not appear to be a WiredTiger file</span><br></pre></td></tr></table></figure><p>并提示可以加<code>--repair</code>参数尝试修复，于是执行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mongod --noauth --dbpath /mongodb/data/ --repair</span><br></pre></td></tr></table></figure><p>成功结束后再次启动mongod服务</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl start mongod</span><br></pre></td></tr></table></figure><p>成功~~</p><hr class="footnotes-sep"><section class="footnotes"><ol class="footnotes-list"><li id="fn1" class="footnote-item"><p><a href="https://github.com/man-group/arctic">https://github.com/man-group/arctic</a> <a href="#fnref1" class="footnote-backref">↩︎</a></p></li><li id="fn2" class="footnote-item"><p><a href="https://stackoverflow.com/questions/29006887/mongodb-cr-authentication-failed">https://stackoverflow.com/questions/29006887/mongodb-cr-authentication-failed</a> <a href="#fnref2" class="footnote-backref">↩︎</a></p></li></ol></section>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css&quot;&gt;&lt;h2 id=&quot;缘起&quot;&gt;&lt;a class=&quot;header-anchor&quot; href</summary>
      
    
    
    
    <category term="Programming" scheme="https://booksword.tk/categories/Programming/"/>
    
    <category term="MongoDB" scheme="https://booksword.tk/categories/Programming/MongoDB/"/>
    
    
  </entry>
  
  <entry>
    <title>消除&amp;lt;frozen importlib._bootstrap&amp;gt;:228: RuntimeWarning: scipy._lib.messagestream.MessageStream size changed, may indicate binary incompatibility.</title>
    <link href="https://booksword.tk/2022/10/01/2022-10-01-%E6%B6%88%E9%99%A4-frozen-importlib-bootstrap-228-runtimewarning-scipy-lib-messagestream-messagestream-size-changed-may-indicate-binary-incompatibility/"/>
    <id>https://booksword.tk/2022/10/01/2022-10-01-%E6%B6%88%E9%99%A4-frozen-importlib-bootstrap-228-runtimewarning-scipy-lib-messagestream-messagestream-size-changed-may-indicate-binary-incompatibility/</id>
    <published>2022-10-01T06:08:00.000Z</published>
    <updated>2022-10-01T08:54:07.852Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h3 id="问题"><a class="header-anchor" href="#问题">¶</a>问题</h3><p>在<code>import scipy.stats</code>的时候报警告：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Python <span class="number">3.9</span><span class="number">.12</span> (main, Apr  <span class="number">5</span> <span class="number">2022</span>, 06:<span class="number">56</span>:<span class="number">58</span>)</span><br><span class="line">[GCC <span class="number">7.5</span><span class="number">.0</span>] :: Anaconda, Inc. on linux</span><br><span class="line"><span class="type">Type</span> <span class="string">&quot;help&quot;</span>, <span class="string">&quot;copyright&quot;</span>, <span class="string">&quot;credits&quot;</span> <span class="keyword">or</span> <span class="string">&quot;license&quot;</span> <span class="keyword">for</span> more information.</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> scipy.stats <span class="keyword">import</span> percentileofscore</span><br><span class="line">&lt;frozen importlib._bootstrap&gt;:<span class="number">228</span>: RuntimeWarning: scipy._lib.messagestream.MessageStream size changed, may indicate binary incompatibility. Expected <span class="number">56</span> <span class="keyword">from</span> C header, got <span class="number">64</span> <span class="keyword">from</span> PyObject</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>exit()</span><br></pre></td></tr></table></figure><h3 id="解决"><a class="header-anchor" href="#解决">¶</a>解决</h3><p>这个的原因之一是pip在升级numpy，scipy的时候(<code>pip install -U numpy scipy</code>)，对旧的package的删除可能不干净的问题。需要多次用<code>uninstall</code>直至无残留：</p><p>以numpy为例</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">(base) $ pip uninstall numpy</span><br><span class="line">Found existing installation: numpy 1.23.3</span><br><span class="line">Uninstalling numpy-1.23.3:</span><br><span class="line">  Would remove:</span><br><span class="line">    /anaconda3/bin/f2py</span><br><span class="line">    /anaconda3/bin/f2py3</span><br><span class="line">    /anaconda3/bin/f2py3.9</span><br><span class="line">    /anaconda3/lib/python3.9/site-packages/numpy-1.23.3.dist-info/*</span><br><span class="line">    /anaconda3/lib/python3.9/site-packages/numpy.libs/libgfortran-040039e1.so.5.0.0</span><br><span class="line">    /anaconda3/lib/python3.9/site-packages/numpy.libs/libopenblas64_p-r0-742d56dc.3.20.so</span><br><span class="line">    /anaconda3/lib/python3.9/site-packages/numpy.libs/libquadmath-96973f99.so.0.0.0</span><br><span class="line">    /anaconda3/lib/python3.9/site-packages/numpy/*</span><br><span class="line">  Would not remove (might be manually added):</span><br><span class="line">    /anaconda3/lib/python3.9/site-packages/numpy/distutils/site.cfg</span><br><span class="line">Proceed (Y/n)? y</span><br><span class="line">  Successfully uninstalled numpy-1.23.3</span><br><span class="line">(base) $ pip install numpy</span><br><span class="line">Requirement already satisfied: numpy <span class="keyword">in</span> /anaconda3/lib/python3.9/site-packages (1.21.5)</span><br><span class="line">(base) $ pip uninstall numpy</span><br><span class="line">Found existing installation: numpy 1.21.5</span><br><span class="line">Uninstalling numpy-1.21.5:</span><br><span class="line">  Would remove:</span><br><span class="line">    /anaconda3/lib/python3.9/site-packages/numpy-1.21.5.dist-info/*</span><br><span class="line">    /anaconda3/lib/python3.9/site-packages/numpy/distutils/site.cfg</span><br><span class="line">Proceed (Y/n)? y</span><br><span class="line">  Successfully uninstalled numpy-1.21.5</span><br></pre></td></tr></table></figure><p>可见在重新安装的时候，发现卸载掉1.23.3后，残余的1.21.5暴露出来了。所以需要再次卸载，直至完全卸载干净。</p><p>对scipy也是同样操作。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css&quot;&gt;&lt;h3 id=&quot;问题&quot;&gt;&lt;a class=&quot;header-anchor&quot; href</summary>
      
    
    
    
    <category term="Programming" scheme="https://booksword.tk/categories/Programming/"/>
    
    <category term="Python" scheme="https://booksword.tk/categories/Programming/Python/"/>
    
    
  </entry>
  
  <entry>
    <title>Ubuntu 22.04安装MongoDB 4.2</title>
    <link href="https://booksword.tk/2022/09/26/2022-09-26-ubuntu-22-04_install_mongodb-4-2/"/>
    <id>https://booksword.tk/2022/09/26/2022-09-26-ubuntu-22-04_install_mongodb-4-2/</id>
    <published>2022-09-26T01:52:00.000Z</published>
    <updated>2022-11-06T03:02:38.901Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>问题在于Ubuntu 22.04开始移除了libssl1.1的支持。所以需要先安装libssl1.1</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">wget http://archive.ubuntu.com/ubuntu/pool/main/o/openssl/libssl1.1_1.1.0g-2ubuntu4_amd64.deb</span><br><span class="line">sudo dpkg -i libssl1.1_1.1.</span><br></pre></td></tr></table></figure><p>然后将18.04 boinic的source加入source list</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">wget -qO - https://www.mongodb.org/static/pgp/server-4.2.asc | sudo apt-key add -</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;deb [ arch=amd64,arm64 ] https://repo.mongodb.org/apt/ubuntu bionic/mongodb-org/4.2 multiverse&quot;</span> | sudo <span class="built_in">tee</span> /etc/apt/sources.list.d/mongodb-org-4.2.list</span><br></pre></td></tr></table></figure><p>更新apt并安装</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">apt update</span><br><span class="line">apt install -y mongodb-org</span><br></pre></td></tr></table></figure><h5 id="参考"><a class="header-anchor" href="#参考">¶</a>参考</h5><ol><li><a href="https://askubuntu.com/questions/1403619/mongodb-install-fails-on-ubuntu-22-04-depends-on-libssl1-1-but-it-is-not-insta">https://askubuntu.com/questions/1403619/mongodb-install-fails-on-ubuntu-22-04-depends-on-libssl1-1-but-it-is-not-insta</a></li><li><a href="https://www.mongodb.com/community/forums/t/installing-mongodb-over-ubuntu-22-04/159931/39">https://www.mongodb.com/community/forums/t/installing-mongodb-over-ubuntu-22-04/159931/39</a></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css&quot;&gt;&lt;p&gt;问题在于Ubuntu 22.04开始移除了libssl1.1的支持。所以需要</summary>
      
    
    
    
    <category term="Programming" scheme="https://booksword.tk/categories/Programming/"/>
    
    <category term="MongoDB" scheme="https://booksword.tk/categories/Programming/MongoDB/"/>
    
    
    <category term="Linux" scheme="https://booksword.tk/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>AVS合并视频文件</title>
    <link href="https://booksword.tk/2018/10/02/avs-merge-wmv/"/>
    <id>https://booksword.tk/2018/10/02/avs-merge-wmv/</id>
    <published>2018-10-02T06:55:46.000Z</published>
    <updated>2018-10-02T07:11:27.565Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>常用的视频压制软件，如MeGUI、小丸工具箱等都不支持直接合并视频。所以只能通过AVS脚本实现。但直接用工具生成的脚本压制后会有音画不同步问题。这里分享一种网上找到的办法，可以基本保证合并并压制出没有明显瑕疵的视频。<br>　　基本思路就是音画分别压制，视频部分用MeGUI自带的Avs Script Creator，生成后合并到一个文件里：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">LoadPlugin(&quot;E:\MediaTools\MeGUI-2715-32\tools\lsmash\LSMASHSource.dll&quot;)</span><br><span class="line">LoadPlugin(&quot;E:\MediaTools\MeGUI-2715-32\tools\ffms\ffms2.dll&quot;)</span><br><span class="line">A=FFVideoSource(&quot;F:\JDownloader\Downloads\A.wmv&quot;, fpsnum=30, fpsden=1, threads=1)</span><br><span class="line">B=FFVideoSource(&quot;F:\JDownloader\Downloads\B.wmv&quot;, fpsnum=30, fpsden=1, threads=1)</span><br><span class="line">C=FFVideoSource(&quot;F:\JDownloader\Downloads\C.wmv&quot;, fpsnum=30, fpsden=1, threads=1)</span><br><span class="line">D=FFVideoSource(&quot;F:\JDownloader\Downloads\D.wmv&quot;, fpsnum=30, fpsden=1, threads=1)</span><br><span class="line">A+B+C+D</span><br><span class="line">#deinterlace</span><br><span class="line">#crop</span><br><span class="line"></span><br><span class="line">LanczosResize(848,480) # Lanczos (Sharp)</span><br><span class="line">#denoise</span><br></pre></td></tr></table></figure><p>音频部分直接用DirectShowSource，并强制帧率，</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">A = DirectShowSource(&quot;F:\JDownloader\Downloads\A.wmv&quot;, fps=30.000, audio=true, convertfps=true)</span><br><span class="line">B = DirectShowSource(&quot;F:\JDownloader\Downloads\B.wmv&quot;, fps=30.000, audio=true, convertfps=true)</span><br><span class="line">C = DirectShowSource(&quot;F:\JDownloader\Downloads\C.wmv&quot;, fps=30.000, audio=true, convertfps=true)</span><br><span class="line">D = DirectShowSource(&quot;F:\JDownloader\Downloads\D.wmv&quot;, fps=30.000, audio=true, convertfps=true)</span><br><span class="line">A+B+C+D</span><br></pre></td></tr></table></figure><p>有个问题是MeGUI的x264似乎有些问题，所以这里视频要用小丸压，音频用MeGUI。最后用MeGUI的MP4Box做混流。<br>　　不是很完美的解决方案，有些麻烦，不过可以达到目的。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css&quot;&gt;&lt;p&gt;常用的视频压制软件，如MeGUI、小丸工具箱等都不支持直接合并视频。所以只能</summary>
      
    
    
    
    <category term="视频压制" scheme="https://booksword.tk/categories/%E8%A7%86%E9%A2%91%E5%8E%8B%E5%88%B6/"/>
    
    
  </entry>
  
  <entry>
    <title>Linux Mint某些程序无法使用fcitx的输入法</title>
    <link href="https://booksword.tk/2018/07/29/Linux-fcitx-input-method-cannot-use/"/>
    <id>https://booksword.tk/2018/07/29/Linux-fcitx-input-method-cannot-use/</id>
    <published>2018-07-29T04:59:32.000Z</published>
    <updated>2018-07-29T05:10:24.853Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h4 id="问题"><a class="header-anchor" href="#问题">¶</a>问题</h4><p>安装了GoldenDict结果发现无法在搜索框里输入中文和日文。</p><h4 id="解决"><a class="header-anchor" href="#解决">¶</a>解决</h4><p>安装Qt5版本的fcitx前端：</p>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install fcitx-frontend-qt5</span><br></pre></td></tr></table></figure><h4 id="原因"><a class="header-anchor" href="#原因">¶</a>原因</h4><p>Linux下这点比较麻烦，输入法的UI框架有时需要和应用程序的UI框架一致才能启动。一般输入法都会有gtk+ 2/3，Qt 4/5等不同的前端。如果对于某个桌面应用输入法无法使用，需要先确定该应用是基于哪个UI框架的，再检查输入法该UI框架的前端有没有安装。如果没有安装，一般安装后即可解决问题。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css&quot;&gt;&lt;h4 id=&quot;问题&quot;&gt;&lt;a class=&quot;header-anchor&quot; href</summary>
      
    
    
    
    <category term="Linux" scheme="https://booksword.tk/categories/Linux/"/>
    
    
  </entry>
  
  <entry>
    <title>Linux Mint 19安装Cuda 9.2以及cuDNN、NCCL</title>
    <link href="https://booksword.tk/2018/07/14/cuda-9-2-installation-on-Linux-mint-19/"/>
    <id>https://booksword.tk/2018/07/14/cuda-9-2-installation-on-Linux-mint-19/</id>
    <published>2018-07-14T09:49:25.000Z</published>
    <updated>2022-11-06T03:02:40.861Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h3 id="CUDA"><a class="header-anchor" href="#CUDA">¶</a>CUDA</h3><p>系统升级到了Mint 19需要重新安装配置Cuda，同时升级到Cuda 9.2。Cuda 9.2需要Nvidia的驱动版本至少是396.37，但不幸的是apt仓库里的396版本驱动有问题，安装后无法被内核加载从而导致系统运行在软解状态。因此只好用bin文件安装。步骤如下：</p><ol><li><p>去官网下载Cuda 9.2的bin安装文件，注意里面自带驱动所以不需要单独安装驱动。<br><img src="/2018/07/14/cuda-9-2-installation-on-Linux-mint-19/downloadconfig.png" alt=""></p></li><li><p>按<code>Ctrl+Alt+F2</code>进入命令行模式，登录并<code>sudo -i</code>切换到root用户。</p></li><li><p>将之前安装的Nvidia驱动卸载掉以避免冲突。</p></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">apt purge nvidia-396 nvidia-modprobe nvidia-settings</span><br><span class="line">apt autoremove</span><br></pre></td></tr></table></figure><ol start="4"><li>停止X桌面服务。</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/etc/init.d/lightdm stop</span><br></pre></td></tr></table></figure><ol start="5"><li>给下载的run文件加执行权限，并运行</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">chmod</span> a+x cuda_9.2.148_396.37_linux.run</span><br><span class="line">./cuda_9.2.148_396.37_linux.run</span><br></pre></td></tr></table></figure><p>按提示操作。问yes/no的问题都选yes。</p><ol start="6"><li><p>安装完成后重启。</p></li><li><p>将cuda加入系统路径中：<br>在<code>/etc/profile</code>文件中加入如下内容</p></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">export PATH=/usr/local/cuda/bin:$PAT</span><br></pre></td></tr></table></figure><ol start="8"><li>安装cuda示例所需依赖。</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install libgl-dev libglu-dev libx11-dev libegl1-mesa-dev libgles2-mesa-dev libmpich-dev</span><br></pre></td></tr></table></figure><ol start="9"><li>将cuda示例的所有者从root改为当前用户(默认情况示例会被自动安装在sudo用户的<code>$HOME</code>下)。</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">chown</span> -R booksword:booksword NVIDIA_CUDA-9.2_Samples/</span><br></pre></td></tr></table></figure><ol start="10"><li>编译示例。</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># force input macro value as linux mint is not officially supported</span></span><br><span class="line">GLPATH=<span class="string">&quot;/usr/lib/x86_64-linux-gnu&quot;</span> GLLINK=<span class="string">&quot;-L/usr/lib/x86_64-linux-gnu&quot;</span> DFLT_PATH=<span class="string">&quot;/usr/lib&quot;</span> EGLLIB=<span class="string">&quot;/usr/lib/x86_64-linux-gnu&quot;</span> GLESLIB=<span class="string">&quot;/usr/lib/x86_64-linux-gnu&quot;</span> make -j6</span><br></pre></td></tr></table></figure><h3 id="cuDNN"><a class="header-anchor" href="#cuDNN">¶</a>cuDNN</h3><p>首先从<a href="https://developer.nvidia.com/rdp/cudnn-download">官网</a>下载cudnn的deb文件:</p><ul><li>cuDNN v7.1.4 Runtime Library for Ubuntu16.04 (Deb)</li><li>cuDNN v7.1.4 Developer Library for Ubuntu16.04 (Deb)</li><li>cuDNN v7.1.4 Code Samples and User Guide for Ubuntu16.04 (Deb)</li></ul><p>然后安装</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">dpkg -i libcudnn7_7.1.4.18-1+cuda9.2_amd64.deb</span><br><span class="line">dpkg -i libcudnn7-dev_7.1.4.18-1+cuda9.2_amd64.deb</span><br><span class="line">dpkg -i libcudnn7-doc_7.1.4.18-1+cuda9.2_amd64.deb</span><br></pre></td></tr></table></figure><p>安装完成后编译运行官方测试用例以验证安装：<br>将<code>/usr/src/cudnn_samples_v7/</code>复制到有写权限的目录下，并编译</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> cudnn_samples_v7/mnistCUDNN/</span><br><span class="line">make</span><br></pre></td></tr></table></figure><h3 id="NCCL"><a class="header-anchor" href="#NCCL">¶</a>NCCL</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dpkg -i nccl-repo-ubuntu1604-2.2.13-ga-cuda9.2_1-1_amd64.deb</span><br></pre></td></tr></table></figure><h4 id="参考资料"><a class="header-anchor" href="#参考资料">¶</a>参考资料</h4><blockquote><p>官网文档</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css&quot;&gt;&lt;h3 id=&quot;CUDA&quot;&gt;&lt;a class=&quot;header-anchor&quot; hr</summary>
      
    
    
    
    <category term="Programming" scheme="https://booksword.tk/categories/Programming/"/>
    
    <category term="Cuda" scheme="https://booksword.tk/categories/Programming/Cuda/"/>
    
    
    <category term="Linux" scheme="https://booksword.tk/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>Linux Mint从18.3升级到19</title>
    <link href="https://booksword.tk/2018/07/12/Upgrade-to-linux-mint-19-from-18-3/"/>
    <id>https://booksword.tk/2018/07/12/Upgrade-to-linux-mint-19-from-18-3/</id>
    <published>2018-07-12T10:54:37.000Z</published>
    <updated>2018-07-12T11:25:13.352Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>#####一、检查升级需求是否满足</p><ol><li><p>只有Linux Mint 18.3 Cinnamon，MATE和Xfce版本可以用升级包升级。</p><ul><li>使用18、18.1、18.2的需要先用Update Manager升级到18.3。</li></ul></li><li><p>使用Timeshift保存一个系统镜像。</p><ul><li>使用<code>apt install timeshift</code>安装Timeshift。</li><li>进入&quot;Menu -&gt; Administration -&gt; Timeshift&quot;打开Timeshift。</li><li>按提示创建镜像并设置自动创建频率，一切按默认选项即可。</li></ul></li><li><p>确定当前X Display Manager是LightDM。</p></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat /etc/X11/default-display-manager</span><br></pre></td></tr></table></figure><ul><li>如果得到<code>/usr/sbin/lightdm</code>，满足条件。</li><li>如果是<code>/usr/sbin/mdm</code>，则需要切换到LightDM。</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install lightdm lightdm-settings slick-greeter # 要求选择LDM或MDM时选择LDM</span><br><span class="line">sudo apt remove --purge mdm mint-mdm-themes*</span><br><span class="line">sudo dpkg-reconfigure lightdm</span><br><span class="line">sudo reboot</span><br></pre></td></tr></table></figure><h4 id="升级步骤"><a class="header-anchor" href="#升级步骤">¶</a>升级步骤</h4><ol><li>更新现有Linux Mint 18.3系统。</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt update</span><br><span class="line">sudo apt upgrade</span><br></pre></td></tr></table></figure><ol start="2"><li><p>设置终端可以滚动无限多行以方便在失败后通过输出查找原因。<br>打开终端，在&quot;Edit&quot;菜单中&quot;Profile Preferences&quot;中&quot;Scrolling&quot;选项卡，把“Limit scrollback to XX lines”前面的复选框去掉。</p></li><li><p>安装升级工具。</p></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt install mintupgrade</span><br></pre></td></tr></table></figure><ol start="4"><li><p>检查安装<br>使用<code>mintupgrade check</code>命令模拟升级，遵照显示的说明。此命令临时将系统指向Linux Mint 19并估计升级会带来的影响，但不会真执行升级操作所以不会对现有系统造成任何影响。如果检查过程中显示有软件包有冲突，用<code>apt purge</code>命令删除掉该软件包并记下包名，此外也要注意记录重要但会在升级时被自动删除掉的包，以备升级成功后重新安装。<br>重复执行本步骤直至输出符合预期（意味着没有冲突和重要的包会受到升级影响）。</p></li><li><p>下载更新并按装</p></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mintupgrade download</span><br><span class="line">mintupgrade upgrade</span><br></pre></td></tr></table></figure><h5 id="参考资料"><a class="header-anchor" href="#参考资料">¶</a>参考资料</h5><blockquote><ul><li><a href="https://community.linuxmint.com/tutorial/view/2416">How to upgrade to Linux Mint 19</a></li></ul></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css&quot;&gt;&lt;p&gt;#####一、检查升级需求是否满足&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;只有L</summary>
      
    
    
    
    <category term="Linux" scheme="https://booksword.tk/categories/Linux/"/>
    
    
  </entry>
  
  <entry>
    <title>Linux系统下多Nvidia显卡超频</title>
    <link href="https://booksword.tk/2018/07/10/Linux-multi-graphic-card-overclock/"/>
    <id>https://booksword.tk/2018/07/10/Linux-multi-graphic-card-overclock/</id>
    <published>2018-07-10T11:56:58.000Z</published>
    <updated>2018-07-10T12:15:54.317Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><ol><li>安装驱动</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt install nvidia-384 nvidia-384-dev</span><br></pre></td></tr></table></figure><ol start="2"><li><p>下载一个edid文件用来模拟显示器以使得没有连接显示器的显卡可以被设置。</p></li><li><p>用<code>xconfig</code>生成<code>xorg.conf</code>文件(生成后位于<code>/etc/X11/</code>)</p></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nvidia-xconfig -a --cool-bits=28 --custom-edid=<span class="string">&quot;DFP-0:&lt;path to edid file&gt;&quot;</span> --connected-monitor=<span class="string">&quot;DFP-0&quot;</span> --no-use-display-device</span><br></pre></td></tr></table></figure><ol start="4"><li>打开<code>/etc/X11/xorg.conf</code>文件，可以看到对应每块显卡，均生成了<code>Monitor</code>，<code>Device</code>，<code>Screen</code>三个Section，其中<code>Screen</code> Section如下</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">Section &quot;Screen&quot;</span><br><span class="line">    Identifier     &quot;Screen1&quot;</span><br><span class="line">    Device         &quot;Device1&quot;</span><br><span class="line">    Monitor        &quot;Monitor1&quot;</span><br><span class="line">    DefaultDepth    24</span><br><span class="line">    Option         &quot;CustomEDID&quot; &quot;DFP-0:/etc/X11/delledid.bin&quot;</span><br><span class="line">    Option         &quot;ConnectedMonitor&quot; &quot;DFP-0&quot;</span><br><span class="line">    Option         &quot;UseDisplayDevice&quot; &quot;none&quot;</span><br><span class="line">    Option         &quot;Coolbits&quot; &quot;28&quot;</span><br><span class="line">    SubSection     &quot;Display&quot;</span><br><span class="line">        Depth       24</span><br><span class="line">    EndSubSection</span><br><span class="line">EndSection</span><br></pre></td></tr></table></figure><p>可以看到刚才设置的各个条目都在<code>Option</code>里面。找到并删除掉实际连接显示器的Section中除了<code>Coolbits</code>之外的其他<code>Option</code>。</p><ol start="5"><li>重启电脑。</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css&quot;&gt;&lt;ol&gt;
&lt;li&gt;安装驱动&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class=&quot;h</summary>
      
    
    
    
    <category term="Linux" scheme="https://booksword.tk/categories/Linux/"/>
    
    <category term="Cuda" scheme="https://booksword.tk/categories/Linux/Cuda/"/>
    
    
  </entry>
  
  <entry>
    <title>Linux下Transmission的“UDP Failed to set receive buffer”错误</title>
    <link href="https://booksword.tk/2018/07/09/Transmission-UDP-Failed-to-set-receive-buffer/"/>
    <id>https://booksword.tk/2018/07/09/Transmission-UDP-Failed-to-set-receive-buffer/</id>
    <published>2018-07-09T13:09:06.000Z</published>
    <updated>2022-10-01T08:54:06.002Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>在Ubuntu 18.04的VPS上运行<code>transmission-daemon</code>报如下错误：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Jul 06 13:50:43 ubuntu-s-1vcpu-2gb-tor1-01 systemd[1]: Started Transmission BitTorrent Daemon.</span><br><span class="line">Jul 06 13:50:44 ubuntu-s-1vcpu-2gb-tor1-01 transmission-daemon[29663]: [2018-07-06 13:50:44.429] UDP Failed to set receive buffer: requested 4194304, got 425984 (tr-udp.c:84)</span><br><span class="line">Jul 06 13:50:44 ubuntu-s-1vcpu-2gb-tor1-01 transmission-daemon[29663]: [2018-07-06 13:50:44.430] UDP Failed to set send buffer: requested 1048576, got 425984 (tr-udp.c:95)</span><br><span class="line">Jul 06 13:50:44 ubuntu-s-1vcpu-2gb-tor1-01 transmission-daemon[29663]: [2018-07-06 13:50:44.430] UDP Failed to set receive buffer: requested 4194304, got 425984 (tr-udp.c:84)</span><br><span class="line">Jul 06 13:50:44 ubuntu-s-1vcpu-2gb-tor1-01 transmission-daemon[29663]: [2018-07-06 13:50:44.430] UDP Failed to set send buffer: requested 1048576, got 425984 (tr-udp.c:95)</span><br></pre></td></tr></table></figure><p>解决方案如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sysctl -w net.core.rmem_max=8388608</span><br><span class="line">sysctl -w net.core.wmem_max=8388608</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css&quot;&gt;&lt;p&gt;在Ubuntu 18.04的VPS上运行&lt;code&gt;transmission</summary>
      
    
    
    
    <category term="Linux" scheme="https://booksword.tk/categories/Linux/"/>
    
    <category term="应用软件" scheme="https://booksword.tk/categories/Linux/%E5%BA%94%E7%94%A8%E8%BD%AF%E4%BB%B6/"/>
    
    
  </entry>
  
  <entry>
    <title>Nginx建立多个server</title>
    <link href="https://booksword.tk/2018/07/08/Nginx-setup-second-server/"/>
    <id>https://booksword.tk/2018/07/08/Nginx-setup-second-server/</id>
    <published>2018-07-08T08:53:39.000Z</published>
    <updated>2018-07-08T09:23:54.039Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><ol><li>在<code>/etc/nginx/conf.d/</code>中添加<code>conf</code>文件，如<code>myblog.conf</code>，最简内容如下：</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen       &lt;port&gt;;</span><br><span class="line">    root  /var/www/myblog/;                 # root path</span><br><span class="line">    index index.html index.htm index.php;   # default page</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>检查<code>/etc/nginx/conf.d/download.conf</code>是否有<code>include /etc/nginx/conf.d/*.conf;</code>， 如果没有则添加。</li><li>运行<code>nginx -t</code>检查配置文件是否正确。</li><li>检查权限：<ol><li>查看运行nginx的用户:</li></ol> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ps aux | grep &quot;nginx: worker process&quot; | awk &#x27;&#123;print $1&#125;&#x27;</span><br></pre></td></tr></table></figure><ol start="2"><li>对配置中的<code>root</code>目录，如上例中的<code>/var/www/myblog/</code>及其所有父目录和需要http访问的子目录，设置权限为755，对所有文件设为644。<em>（注意这里很多网上资料的解决方案是将nginx运行用户改为root用户，这样也能解决权限导致的403问题，但出于安全考虑不建议这样做。）</em></li></ol></li><li>访问http://&lt;ip address&gt;:&lt;port&gt; 检查配置的正确性。</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css&quot;&gt;&lt;ol&gt;
&lt;li&gt;在&lt;code&gt;/etc/nginx/conf.d/&lt;/code&gt;</summary>
      
    
    
    
    <category term="nginx" scheme="https://booksword.tk/categories/nginx/"/>
    
    
  </entry>
  
</feed>
