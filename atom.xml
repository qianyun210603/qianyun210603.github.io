<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>书剑阁</title>
  
  <subtitle>技术の记录本</subtitle>
  <link href="https://booksword.top/atom.xml" rel="self"/>
  
  <link href="https://booksword.top/"/>
  <updated>2024-04-11T08:10:47.613Z</updated>
  <id>https://booksword.top/</id>
  
  <author>
    <name>BookSword</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>KDB+效能玩票测试</title>
    <link href="https://booksword.top/2024/04/11/KDB+%E6%95%88%E8%83%BD%E7%8E%A9%E7%A5%A8%E6%B5%8B%E8%AF%95/"/>
    <id>https://booksword.top/2024/04/11/KDB+%E6%95%88%E8%83%BD%E7%8E%A9%E7%A5%A8%E6%B5%8B%E8%AF%95/</id>
    <published>2024-04-10T22:12:43.000Z</published>
    <updated>2024-04-11T08:10:47.613Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h2 id="动因"><a class="header-anchor" href="#动因">¶</a>动因</h2><p>之前使用Man-Group的Arctic系统（老Arctic，基于MongoDB的那个）存储各种交易标的的数据，但发现比较慢。测试下传说中的KDB+看能否替换。目前并不期望能使用KDB+强项的内部计算（由于<code>q</code>语言学习成本过高），只是简单作为时序数据库使用，支持读取写入增删改查即可。</p><h2 id="架构"><a class="header-anchor" href="#架构">¶</a>架构</h2><p>使用一台Linux主机作为数据库服务器，与客户机在同一个局域网（千兆以太网）下。具体配置过程略。</p><h2 id="简单测试"><a class="header-anchor" href="#简单测试">¶</a>简单测试</h2><p>使用数据是浦发银行（600000.SSE）的1分钟数据，长度大约10年，一共599280行x9列。</p><ol><li><p>写入<br>KDB+:</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">t = con(<span class="string">&#x27;&#123;`:trade/ set x&#125;&#x27;</span>, df1)</span><br></pre></td></tr></table></figure><p>CPU times: total: 844 ms<br>Wall time: 574 ms</p><p>Arctic:</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">barlib.write(<span class="string">&quot;test_1m&quot;</span>, df1)</span><br></pre></td></tr></table></figure><p>CPU times: total: 1.48 s<br>Wall time: 1.62 s</p></li><li><p>整体读取<br>KDB+:</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">%%time</span><br><span class="line">a = con(<span class="string">&#x27;get `:trade&#x27;</span>)</span><br><span class="line">df_get = a.pd().set_index(<span class="string">&quot;date&quot;</span>)</span><br></pre></td></tr></table></figure><p>CPU times: total: 297 ms<br>Wall time: 338 ms</p><p>Arctic:</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">barlib.read(<span class="string">&quot;test_1m&quot;</span>)</span><br></pre></td></tr></table></figure><p>CPU times: total: 2.08 s<br>Wall time: 3.24 s</p></li><li><p>部分读取<br>KDB+</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a_p = con(<span class="string">&quot;select date, open, close from `:trade where date within 2023.01.01T10:00 2024.03.01T14:00&quot;</span>)</span><br><span class="line">df_get_p = a_p.pd().set_index(<span class="string">&quot;date&quot;</span>)</span><br></pre></td></tr></table></figure><p>CPU times: total: 15.6 ms<br>Wall time: 18 ms</p><p>Arctic</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">barlib.read(<span class="string">&quot;test_1m&quot;</span>, chunk_range=DateRange(<span class="string">&quot;2023.01.01 10:00&quot;</span>, <span class="string">&quot;2024.03.01T14:00&quot;</span>), columns=[<span class="string">&quot;open&quot;</span>, <span class="string">&quot;close&quot;</span>])</span><br></pre></td></tr></table></figure><p>CPU times: total: 188 ms<br>Wall time: 332 ms</p></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css&quot;&gt;&lt;h2 id=&quot;动因&quot;&gt;&lt;a class=&quot;header-anchor&quot; href</summary>
      
    
    
    
    <category term="数据库" scheme="https://booksword.top/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    <category term="KDB+" scheme="https://booksword.top/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/KDB/"/>
    
    
  </entry>
  
  <entry>
    <title>Python中的PriorityQueue测试</title>
    <link href="https://booksword.top/2024/03/16/Python%E4%B8%AD%E7%9A%84PriorityQueue%E6%B5%8B%E8%AF%95/"/>
    <id>https://booksword.top/2024/03/16/Python%E4%B8%AD%E7%9A%84PriorityQueue%E6%B5%8B%E8%AF%95/</id>
    <published>2024-03-16T00:15:40.000Z</published>
    <updated>2024-03-16T08:19:27.580Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>Python官方提供一个<code>PriorityQueue</code>，可以按优先级取出Push入队的对象，但这个Queue不稳定（即相同优先级并不保证先进先出）。</p><p>测试代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> defaultdict</span><br><span class="line"><span class="keyword">from</span> queue <span class="keyword">import</span> Empty, Queue, PriorityQueue</span><br><span class="line"><span class="keyword">from</span> threading <span class="keyword">import</span> Thread, get_ident</span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> sleep</span><br><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> <span class="type">Any</span>, <span class="type">Callable</span>, <span class="type">List</span></span><br><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">EVENT_SLEEP = <span class="string">&quot;eSleep&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Event</span>:</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    Event object consists of a type string which is used</span></span><br><span class="line"><span class="string">    by event engine for distributing event, and a data</span></span><br><span class="line"><span class="string">    object which contains the real data.</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, etype: <span class="built_in">str</span>, data: <span class="type">Any</span> = <span class="literal">None</span>, priority: <span class="built_in">int</span> = <span class="number">100</span></span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">        <span class="string">&quot;&quot;&quot;&quot;&quot;&quot;</span></span><br><span class="line">        self.<span class="built_in">type</span>: <span class="built_in">str</span> = etype</span><br><span class="line">        self.priority = priority</span><br><span class="line">        self.data: <span class="type">Any</span> = data</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__lt__</span>(<span class="params">self, other</span>):</span><br><span class="line">        <span class="keyword">return</span> self.priority &gt; other.priority</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__le__</span>(<span class="params">self, other</span>):</span><br><span class="line">        <span class="keyword">return</span> self.priority &gt;= other.priority</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Defines handler function to be used in event engine.</span></span><br><span class="line">HandlerType: <span class="built_in">callable</span> = <span class="type">Callable</span>[[Event], <span class="literal">None</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">EventEngine</span>:</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    Event engine distributes event object based on its type</span></span><br><span class="line"><span class="string">    to those handlers registered.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    It also generates timer event by every interval seconds,</span></span><br><span class="line"><span class="string">    which can be used for timing purpose.</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, interval: <span class="built_in">int</span> = <span class="number">1</span>, using_priority = <span class="literal">False</span></span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        Timer event is generated every 1 second by default, if</span></span><br><span class="line"><span class="string">        interval not specified.</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        self._interval: <span class="built_in">int</span> = interval</span><br><span class="line">        self._queue: Queue = PriorityQueue() <span class="keyword">if</span> using_priority <span class="keyword">else</span> Queue()</span><br><span class="line">        self._active: <span class="built_in">bool</span> = <span class="literal">False</span></span><br><span class="line">        self._thread: Thread = Thread(target=self._run)</span><br><span class="line">        self._handlers: defaultdict = defaultdict(<span class="built_in">list</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">_run</span>(<span class="params">self</span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        Get event from queue and then process it.</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;Event engine started. Thread ID: <span class="subst">&#123;get_ident()&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">while</span> self._active:</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                event: Event = self._queue.get(block=<span class="literal">True</span>, timeout=<span class="number">1</span>)</span><br><span class="line">                self._process(event)</span><br><span class="line">            <span class="keyword">except</span> Empty:</span><br><span class="line">                <span class="comment"># logger.info(f&quot;Event Queue empty. Thread ID: &#123;get_ident()&#125;&quot;)</span></span><br><span class="line">                <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">_process</span>(<span class="params">self, event: Event</span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        First distribute event to those handlers registered listening</span></span><br><span class="line"><span class="string">        to this type.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        Then distribute event to those general handlers which listens</span></span><br><span class="line"><span class="string">        to all types.</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> event.<span class="built_in">type</span> <span class="keyword">in</span> self._handlers:</span><br><span class="line">            <span class="keyword">for</span> handler <span class="keyword">in</span> self._handlers[event.<span class="built_in">type</span>]:</span><br><span class="line">                handler(event)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">start</span>(<span class="params">self</span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        Start event engine to process events and generate timer events.</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        self._active = <span class="literal">True</span></span><br><span class="line">        self._thread.start()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">stop</span>(<span class="params">self</span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        Stop event engine.</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        self._active = <span class="literal">False</span></span><br><span class="line">        self._thread.join()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">put</span>(<span class="params">self, event: Event</span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        Put an event object into event queue.</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        self._queue.put(event)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">register</span>(<span class="params">self, etype: <span class="built_in">str</span>, handler: HandlerType</span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        Register a new handler function for a specific event type. Every</span></span><br><span class="line"><span class="string">        function can only be registered once for each event type.</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        handler_list: <span class="built_in">list</span> = self._handlers[etype]</span><br><span class="line">        <span class="keyword">if</span> handler <span class="keyword">not</span> <span class="keyword">in</span> handler_list:</span><br><span class="line">            handler_list.append(handler)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">unregister</span>(<span class="params">self, etype: <span class="built_in">str</span>, handler: HandlerType</span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        Unregister an existing handler function from event engine.</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        handler_list: <span class="built_in">list</span> = self._handlers[etype]</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> handler <span class="keyword">in</span> handler_list:</span><br><span class="line">            handler_list.remove(handler)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> handler_list:</span><br><span class="line">            self._handlers.pop(<span class="built_in">type</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">process_sleep_event</span>(<span class="params">event</span>):</span><br><span class="line">    name, sleepseconds = event.data</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;In <span class="subst">&#123;get_ident()&#125;</span>, Task <span class="subst">&#123;name&#125;</span> sleep <span class="subst">&#123;sleepseconds&#125;</span> start @ <span class="subst">&#123;datetime.now().isoformat()&#125;</span>&quot;</span>)</span><br><span class="line">    sleep(sleepseconds)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;In <span class="subst">&#123;get_ident()&#125;</span>, Task <span class="subst">&#123;name&#125;</span> sleep <span class="subst">&#123;sleepseconds&#125;</span> end @ <span class="subst">&#123;datetime.now().isoformat()&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;main thread: <span class="subst">&#123;get_ident()&#125;</span> start  @ <span class="subst">&#123;datetime.now().isoformat()&#125;</span>&quot;</span>)</span><br><span class="line">    engine = EventEngine(using_priority=<span class="literal">True</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;using <span class="subst">&#123;<span class="built_in">type</span>(engine._queue)&#125;</span>&quot;</span>)</span><br><span class="line">    engine.register(EVENT_SLEEP, process_sleep_event)</span><br><span class="line">    engine.start()</span><br><span class="line"></span><br><span class="line">    engine.put(Event(EVENT_SLEEP, (<span class="string">&quot;1st_1sec_event&quot;</span>, <span class="number">1</span>)))</span><br><span class="line">    engine.put(Event(EVENT_SLEEP, (<span class="string">&quot;2nd_1sec_event&quot;</span>, <span class="number">1</span>), priority=<span class="number">50</span>))</span><br><span class="line">    engine.put(Event(EVENT_SLEEP, (<span class="string">&quot;3rd_5sec_event&quot;</span>, <span class="number">5</span>)))</span><br><span class="line">    engine.put(Event(EVENT_SLEEP, (<span class="string">&quot;4th_5sec_event&quot;</span>, <span class="number">5</span>), priority=<span class="number">200</span>))</span><br><span class="line">    sleep(<span class="number">13</span>)</span><br><span class="line">    engine.put(Event(EVENT_SLEEP, (<span class="string">&quot;5th_5sec_event&quot;</span>, <span class="number">3</span>), priority=<span class="number">300</span>))</span><br><span class="line"></span><br><span class="line">    engine.stop()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;main thread: <span class="subst">&#123;get_ident()&#125;</span>, exit @ <span class="subst">&#123;datetime.now().isoformat()&#125;</span>&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">main thread: 117652 start  @ 2024-03-16T15:58:45.398626</span><br><span class="line">using &lt;class &#x27;queue.PriorityQueue&#x27;&gt;</span><br><span class="line">Event engine started. Thread ID: 102312</span><br><span class="line">In 102312, Task 4th_5sec_event sleep 5 start @ 2024-03-16T15:58:45.399626</span><br><span class="line">In 102312, Task 4th_5sec_event sleep 5 end @ 2024-03-16T15:58:50.402557</span><br><span class="line">In 102312, Task 3rd_5sec_event sleep 5 start @ 2024-03-16T15:58:50.402557</span><br><span class="line">In 102312, Task 3rd_5sec_event sleep 5 end @ 2024-03-16T15:58:55.413506</span><br><span class="line">In 102312, Task 1st_1sec_event sleep 1 start @ 2024-03-16T15:58:55.413506</span><br><span class="line">In 102312, Task 1st_1sec_event sleep 1 end @ 2024-03-16T15:58:56.418677</span><br><span class="line">In 102312, Task 2nd_1sec_event sleep 1 start @ 2024-03-16T15:58:56.418677</span><br><span class="line">In 102312, Task 2nd_1sec_event sleep 1 end @ 2024-03-16T15:58:57.424852</span><br><span class="line">In 102312, Task 5th_5sec_event sleep 3 start @ 2024-03-16T15:58:58.403006</span><br><span class="line">In 102312, Task 5th_5sec_event sleep 3 end @ 2024-03-16T15:59:01.406562</span><br><span class="line">main thread: 117652, exit @ 2024-03-16T15:59:01.406562</span><br></pre></td></tr></table></figure><h2 id="参考资料"><a class="header-anchor" href="#参考资料">¶</a>参考资料</h2><blockquote><ul><li><a href="https://docs.python.org/3/library/queue.html#module-queue">官方文档</a></li></ul></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css&quot;&gt;&lt;p&gt;Python官方提供一个&lt;code&gt;PriorityQueue&lt;/code&gt;</summary>
      
    
    
    
    <category term="Programming" scheme="https://booksword.top/categories/Programming/"/>
    
    <category term="Python" scheme="https://booksword.top/categories/Programming/Python/"/>
    
    
  </entry>
  
  <entry>
    <title>CTP踩坑记</title>
    <link href="https://booksword.top/2024/01/21/CTP%E8%B8%A9%E5%9D%91%E8%AE%B0/"/>
    <id>https://booksword.top/2024/01/21/CTP%E8%B8%A9%E5%9D%91%E8%AE%B0/</id>
    <published>2024-01-21T02:38:25.000Z</published>
    <updated>2024-03-16T08:19:27.581Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h2 id="数据篇"><a class="header-anchor" href="#数据篇">¶</a>数据篇</h2><ul><li><p>郑商所数据垃圾值</p><ul><li>部分日夜盘最后一个tick的时间戳会被标到第二日；</li><li>夜盘开始时20:5x会有垃圾tick；</li><li>没有<code>最后修改毫秒</code>，需要自己插值；</li></ul></li><li><p>K线合成</p></li><li><p>注意每个交易时间段最后一个tick。比如合成5分钟K线，对9:00-10:15时间段，10:15整可能会有一个tick需要归到10:10开始的K线里。</p></li><li><p>一般的行情软件和数据商，包括TB、天软、米筐K线按第一个有成交的tick来计算，但CTP推送的时候按500ms切片，即便无成交。</p></li><li><p>可能有些高/低价包含在500ms内，从而不能从<code>last_price</code>得知。目前能做到的最好是参考CTP推送的日内最高/低价修正部分。</p></li></ul><h2 id="接口篇"><a class="header-anchor" href="#接口篇">¶</a>接口篇</h2><ul><li>似乎有两个乘数【合约数量乘数】和【合约基础商品乘数】，分别定义为<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">///合约数量乘数</span></span><br><span class="line">TThostFtdcVolumeMultipleType VolumeMultiple;</span><br><span class="line"><span class="comment">///合约基础商品乘数</span></span><br><span class="line">TThostFtdcUnderlyingMultipleType UnderlyingMultiple;</span><br></pre></td></tr></table></figure>按文档，标的期货保证金为 [标的期货合约结算价×期货合约乘数×标的期货合约交易所保证金率（按金额）+ 标的期货合约交易所保证金<br>率(按手数) ]×基础商品乘数<br>这个【合约基础商品乘数】到底怎么用的？</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css&quot;&gt;&lt;h2 id=&quot;数据篇&quot;&gt;&lt;a class=&quot;header-anchor&quot; hre</summary>
      
    
    
    
    <category term="Programming" scheme="https://booksword.top/categories/Programming/"/>
    
    <category term="CTP" scheme="https://booksword.top/categories/Programming/CTP/"/>
    
    
  </entry>
  
  <entry>
    <title>发布Python包到PyPi上</title>
    <link href="https://booksword.top/2024/01/21/publish_python_package_pypi/"/>
    <id>https://booksword.top/2024/01/21/publish_python_package_pypi/</id>
    <published>2024-01-20T23:30:21.000Z</published>
    <updated>2024-01-21T10:37:18.348Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><ol><li><p>确保Python包至少要有写好的<code>setup.py</code>(或<code>setup.cfg</code>)、<code>README.md</code>和一个协议文件<code>LICENSE</code>。同时包名不得与Pypi上已有的包冲突。</p></li><li><p>安装必要的工具：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install setuptools wheel twine</span><br></pre></td></tr></table></figure><p>如果使用<code>setup.cfg</code>还需要<code>build</code>包：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install build</span><br></pre></td></tr></table></figure></li><li><p>更新<code>setup.py</code>或<code>setup.cfg</code>里的版本号，PyPi不允许重复版本号。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">version = X.Y.Z</span><br></pre></td></tr></table></figure></li><li><p>将版本提交到版本控制系统（如Github）,并创建相应的<code>tag</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git commit -am <span class="string">&quot;Release version X.Y.Z&quot;</span></span><br><span class="line">git tag X.Y.Z</span><br><span class="line">git push origin X.Y.Z</span><br></pre></td></tr></table></figure></li><li><p>创建源代码和wheel文件发布</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python -m build</span><br></pre></td></tr></table></figure></li><li><p>注册PyPi账号于https://pypi.org/，按提示步骤操作，并开启2FA验证（可以用Google或微软的Authenticator APP）。</p></li><li><p>PyPi现在强制使用token验证，所以需要在&quot;Account Setting&quot;里面生成一个API token。然后在用户目录里面创建一个<code>.pypirc</code>文件填充如下内容（<code>username</code>就是那个带前后下划线的&quot;<strong>token</strong>&quot;,<code>password</code>换成系统生成的API token）。</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[pypi]</span><br><span class="line">username = __token__</span><br><span class="line">password = pypi-**********</span><br></pre></td></tr></table></figure></li><li><p>使用<code>twine</code>上传</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">twine upload dist/*</span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css&quot;&gt;&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;确保Python包至少要有写好的&lt;code&gt;setup.</summary>
      
    
    
    
    <category term="Programming" scheme="https://booksword.top/categories/Programming/"/>
    
    <category term="Python" scheme="https://booksword.top/categories/Programming/Python/"/>
    
    
  </entry>
  
  <entry>
    <title>数据源问题集锦</title>
    <link href="https://booksword.top/2024/01/21/%E6%95%B0%E6%8D%AE%E6%BA%90%E9%97%AE%E9%A2%98%E9%9B%86%E9%94%A6/"/>
    <id>https://booksword.top/2024/01/21/%E6%95%B0%E6%8D%AE%E6%BA%90%E9%97%AE%E9%A2%98%E9%9B%86%E9%94%A6/</id>
    <published>2024-01-20T23:30:21.000Z</published>
    <updated>2024-03-16T08:19:27.580Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h3 id="米筐【RQData】"><a class="header-anchor" href="#米筐【RQData】">¶</a>米筐【RQData】</h3><h3 id="天软【Tinysoft】"><a class="header-anchor" href="#天软【Tinysoft】">¶</a>天软【Tinysoft】</h3><ul><li>[ ] K线合成问题: 例如fu2405.SHFE，2024-03-06 13：55（起始时间，天软的实际是标明结束时间）的5分钟K。</li></ul><h3 id="上期CTP"><a class="header-anchor" href="#上期CTP">¶</a>上期CTP</h3><p>（见CTP踩坑记）</p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css&quot;&gt;&lt;h3 id=&quot;米筐【RQData】&quot;&gt;&lt;a class=&quot;header-anch</summary>
      
    
    
    
    <category term="交易策略开发" scheme="https://booksword.top/categories/%E4%BA%A4%E6%98%93%E7%AD%96%E7%95%A5%E5%BC%80%E5%8F%91/"/>
    
    <category term="数据" scheme="https://booksword.top/categories/%E4%BA%A4%E6%98%93%E7%AD%96%E7%95%A5%E5%BC%80%E5%8F%91/%E6%95%B0%E6%8D%AE/"/>
    
    
  </entry>
  
  <entry>
    <title>Ubuntu安装Postgresql并设置自己的数据文件位置</title>
    <link href="https://booksword.top/2023/12/24/Ubuntu%E5%AE%89%E8%A3%85Postgresql%E5%B9%B6%E8%AE%BE%E7%BD%AE%E8%87%AA%E5%B7%B1%E7%9A%84%E6%95%B0%E6%8D%AE%E6%96%87%E4%BB%B6%E4%BD%8D%E7%BD%AE/"/>
    <id>https://booksword.top/2023/12/24/Ubuntu%E5%AE%89%E8%A3%85Postgresql%E5%B9%B6%E8%AE%BE%E7%BD%AE%E8%87%AA%E5%B7%B1%E7%9A%84%E6%95%B0%E6%8D%AE%E6%96%87%E4%BB%B6%E4%BD%8D%E7%BD%AE/</id>
    <published>2023-12-24T09:31:10.000Z</published>
    <updated>2023-12-24T09:32:07.157Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h2 id="安装"><a class="header-anchor" href="#安装">¶</a>安装</h2><p>可以直接从官方<code>apt</code>源安装</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sudo sh -c <span class="string">&#x27;echo &quot;deb https://apt.postgresql.org/pub/repos/apt $(lsb_release -cs)-pgdg main&quot; &gt; /etc/apt/sources.list.d/pgdg.list&#x27;</span></span><br><span class="line">wget --quiet -O - https://www.postgresql.org/media/keys/ACCC4CF8.asc | sudo apt-key add -</span><br><span class="line">sudo apt update</span><br><span class="line">sudo apt install postgresql</span><br></pre></td></tr></table></figure><h2 id="设置数据文件位置"><a class="header-anchor" href="#设置数据文件位置">¶</a>设置数据文件位置</h2><h4 id="准备工作——创建新位置"><a class="header-anchor" href="#准备工作——创建新位置">¶</a>准备工作——创建新位置</h4><p>创建如下新目录，并且GRANT全部权限，数据文件将保存于此：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/home/db/postgre/data</span><br></pre></td></tr></table></figure><h4 id="步骤一：移动数据文件"><a class="header-anchor" href="#步骤一：移动数据文件">¶</a>步骤一：移动数据文件</h4><p>切换到默认PostgreSQL用户(一般为<code>postgres</code>)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo su postgres</span><br></pre></td></tr></table></figure><p>进入交互：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">psql</span><br></pre></td></tr></table></figure><p>查看当前默认的数据目录位置：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">postgres=# SHOW data_directory;</span><br></pre></td></tr></table></figure><p>输出</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Output</span><br><span class="line">       data_directory</span><br><span class="line">-----------------------------</span><br><span class="line"> /var/lib/postgresql/16/main</span><br><span class="line">(1 row)</span><br></pre></td></tr></table></figure><p>退出交互：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">postgres=# \q</span><br></pre></td></tr></table></figure><p>停止服务：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl stop postgresql</span><br><span class="line">sudo systemctl status postgresql <span class="comment"># 查看状态，确认已停止</span></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">○ postgresql.service - PostgreSQL RDBMS</span><br><span class="line">     Loaded: loaded (/lib/systemd/system/postgresql.service; enabled; vendor preset: enabled)</span><br><span class="line">     Active: inactive (dead) since Sun 2023-12-24 14:41:08 CST; 4s ago</span><br><span class="line">    Process: 183242 ExecStart=/bin/true (code=exited, status=0/SUCCESS)</span><br><span class="line">   Main PID: 183242 (code=exited, status=0/SUCCESS)</span><br><span class="line">        CPU: 1ms</span><br></pre></td></tr></table></figure><p>看到<code>inactive (dead)</code>确认已经停止。</p><p>拷贝数据库目录到新位置，如果没有rsync，可以使用apt安装下，参数说明：</p><ul><li>-a 参数保存权限和其他目录属性</li><li>-v 会显示详细过程</li></ul><p>注意：</p><ul><li>如果在目录最后加上／，会把目录下面的内容拷贝过去，</li><li>如果最后没有／，会拷贝这个目录及下面的内容。</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo rsync -av /var/lib/postgresql/ /home/db/postgre/data/</span><br></pre></td></tr></table></figure><p>上面的拷贝结束后，把当前数据目录改名成备份，等最后确认新位置没有问题后再删除：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo <span class="built_in">mv</span> /var/lib/postgresql/16/main /var/lib/postgresql/16/main.bak</span><br></pre></td></tr></table></figure><h4 id="步骤二：指向数据文件新位置"><a class="header-anchor" href="#步骤二：指向数据文件新位置">¶</a>步骤二：指向数据文件新位置</h4><p>编辑配置文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vi /etc/postgresql/16/main/postgresql.conf</span><br></pre></td></tr></table></figure><p>找到有data_directory的一行，修改后面的目录路径为新位置：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">data_directory = &#x27;/home/db/postgre/data/16/main&#x27;</span><br></pre></td></tr></table></figure><p>保存，退出。</p><h4 id="步骤三：重新启动数据库并验证数据文件位置"><a class="header-anchor" href="#步骤三：重新启动数据库并验证数据文件位置">¶</a>步骤三：重新启动数据库并验证数据文件位置</h4><p>重新启动服务：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl start postgresql</span><br></pre></td></tr></table></figure><p>查看服务状态：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl status postgresql</span><br></pre></td></tr></table></figure><p>可以看到输出中有active (exited)字样，说明服务启动成功了：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Output</span><br><span class="line">● postgresql.service - PostgreSQL RDBMS</span><br><span class="line">     Loaded: loaded (/lib/systemd/system/postgresql.service; enabled; vendor preset: enabled)</span><br><span class="line">     Active: active (exited) since Sun 2023-12-24 14:41:18 CST; 44s ago</span><br><span class="line">    Process: 217149 ExecStart=/bin/true (code=exited, status=0/SUCCESS)</span><br><span class="line">   Main PID: 217149 (code=exited, status=0/SUCCESS)</span><br><span class="line">        CPU: 1ms</span><br></pre></td></tr></table></figure><p>看到<code>active (exited)</code>确认已经启动。</p><p>注：这里说明下<code>(exited)</code>。<code>postgresql.service</code>只是一个启动的wrapper，实际运行的服务是<code> postgresql@&lt;version&gt;-main.service</code>。</p><h4 id="步骤四：清理数据"><a class="header-anchor" href="#步骤四：清理数据">¶</a>步骤四：清理数据</h4><p>如果上述验证过程没有问题，可以删除原有的数据目录了：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo <span class="built_in">rm</span> -rf /var/lib/postgresql/16/main.bak</span><br></pre></td></tr></table></figure><h2 id="其他常用设置"><a class="header-anchor" href="#其他常用设置">¶</a>其他常用设置</h2><h4 id="允许从非本机访问"><a class="header-anchor" href="#允许从非本机访问">¶</a>允许从非本机访问</h4><p>编辑<code>postgresql.conf</code>，将<code>listen_addresses = 'localhost'</code>改成<code>listen_addresses = '*'</code>以允许所有ip访问，或者填写所需的ip。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css&quot;&gt;&lt;h2 id=&quot;安装&quot;&gt;&lt;a class=&quot;header-anchor&quot; href</summary>
      
    
    
    
    <category term="数据库" scheme="https://booksword.top/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    <category term="Postgresql" scheme="https://booksword.top/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/Postgresql/"/>
    
    
  </entry>
  
  <entry>
    <title>在Anaconda环境下安装Apache Airflow以进行定时任务管理：设置为系统服务</title>
    <link href="https://booksword.top/2023/11/23/ApacheAirflow2/"/>
    <id>https://booksword.top/2023/11/23/ApacheAirflow2/</id>
    <published>2023-11-23T00:57:03.000Z</published>
    <updated>2023-11-23T09:37:17.846Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><ol><li><p>下载系统服务配置模板</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">wget https://raw.githubusercontent.com/apache/airflow/master/scripts/systemd/airflow</span><br><span class="line">wget https://raw.githubusercontent.com/apache/airflow/master/scripts/systemd/airflow-webserver.service</span><br><span class="line">wget https://raw.githubusercontent.com/apache/airflow/master/scripts/systemd/airflow-scheduler.service</span><br></pre></td></tr></table></figure></li><li><p>第一个文件配置了在启动系统服务时候需要设置的环境变量，即<code>AIRFLOW_HOME</code>，<code>AIRFLOW_CONFIG</code>，设置成和安装篇里面一样的值即可。而后将其拷贝到适当位置，推荐为<code>/etc/sysconfig/airflow</code>，并将所有权修改到运行Airflow的用户下。</p></li><li><p>然后配置<code>airflow-scheduler.service</code>如下：</p><p><code>airflow-scheduler.service</code>：</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">[Unit]</span><br><span class="line">Description=Airflow scheduler daemon</span><br><span class="line">After=network.target postgresql.service mysql.service redis.service rabbitmq-server.service</span><br><span class="line">Wants=postgresql.service mysql.service redis.service rabbitmq-server.service</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">EnvironmentFile=&lt;2中的环境变量配置文件&gt;</span><br><span class="line">User=&lt;airflow user&gt;</span><br><span class="line">Group=&lt;airflow user group&gt;</span><br><span class="line">Type=simple</span><br><span class="line">ExecStart=&lt;path to airflow&gt;/airflow scheduler&#x27;</span><br><span class="line">Restart=always</span><br><span class="line">RestartSec=5s</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure></li><li><p>再配置<code>airflow-webserver.service</code>如下<br><code>airflow-webserver.service</code>：</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">[Unit]</span><br><span class="line">Description=Airflow webserver daemon</span><br><span class="line">After=network.target postgresql.service mysql.service redis.service rabbitmq-server.service</span><br><span class="line">Wants=postgresql.service mysql.service redis.service rabbitmq-server.service</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">EnvironmentFile=&lt;2中的环境变量配置文件&gt;</span><br><span class="line">User=&lt;airflow user&gt;</span><br><span class="line">Group=&lt;airflow user group&gt;</span><br><span class="line">Type=simple</span><br><span class="line">ExecStart=&lt;path to airflow&gt;/airflow webserver --pid /run/airflow/webserver.pid</span><br><span class="line">Restart=on-failure</span><br><span class="line">RestartSec=5s</span><br><span class="line">PrivateTmp=true</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure><p>这里我们发现需要一个<code>pid</code>文件</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mkdir /run/airflow</span><br><span class="line">chown &lt;airflow user&gt;:&lt;airflow user group&gt; /run/airflow</span><br></pre></td></tr></table></figure></li><li><p>然后启动服务</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl daemon-reload  # 让更改生效</span><br><span class="line">sudo systemctl start airflow-scheduler.service</span><br><span class="line">sudo systemctl start airflow-webserver.service</span><br></pre></td></tr></table></figure></li><li><p>但这个时候发现很奇怪的问题，<code>airflow-scheduler</code>服务总是时断时续，报错“找不到airflow”。<br>研究后发现，虽然我们通过指定<code>&lt;path to airflow&gt;/airflow</code>保证了<code>webserver</code>和<code>scheduler</code>本身是通过Anaconda环境运行的，但是<code>scheduler</code>在运行任务时候，是运行<code>airflow task run xxx ...</code>，这个时候由于<code>systemctl</code>并不会自动激活conda环境，所以就无法找到<code>airflow</code>这个命令。</p><p>所以需要在<code>ExecStart</code>里面加入激活环境的相关命令，<code>airflow-scheduler.service</code>须变更如下：</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ExecStart=/bin/bash -c &#x27;source /home/booksword/anaconda3/etc/profile.d/conda.sh &amp;&amp; conda activate &amp;&amp; airflow scheduler&#x27;</span><br></pre></td></tr></table></figure><p><code>airflow-scheduler.service</code>变更如下：</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ExecStart=/bin/bash -c &#x27;source /home/booksword/anaconda3/etc/profile.d/conda.sh &amp;&amp; conda activate &amp;&amp; airflow webserver --pid /run/airflow/webserver.pid&#x27;</span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css&quot;&gt;&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;下载系统服务配置模板&lt;/p&gt;
 &lt;figure clas</summary>
      
    
    
    
    <category term="应用软件" scheme="https://booksword.top/categories/%E5%BA%94%E7%94%A8%E8%BD%AF%E4%BB%B6/"/>
    
    <category term="Airflow" scheme="https://booksword.top/categories/%E5%BA%94%E7%94%A8%E8%BD%AF%E4%BB%B6/Airflow/"/>
    
    
  </entry>
  
  <entry>
    <title>jupyterlab升级后的数个插件问题</title>
    <link href="https://booksword.top/2023/08/19/jupyterlab/"/>
    <id>https://booksword.top/2023/08/19/jupyterlab/</id>
    <published>2023-08-18T23:09:06.000Z</published>
    <updated>2023-11-24T02:12:52.671Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>第一，插件<code>@jupyterlab/notebook-extension:tracker</code>报错</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">[W 2023-08-12 15:11:31.242 LabApp] Failed validating settings (@jupyterlab/notebook-extension:tracker): Additional properties are not allowed (&#x27;experimentalDisableDocumentWideUndoRedo&#x27;, &#x27;numberCellsToRenderDirectly&#x27;, &#x27;observedBottomMargin&#x27;, &#x27;observedTopMargin&#x27;, &#x27;remainingTimeBeforeRescheduling&#x27;, &#x27;renderCellOnIdle&#x27; were unexpected)</span><br><span class="line"></span><br><span class="line">    Failed validating &#x27;additionalProperties&#x27; in schema:</span><br><span class="line">        &#123;&#x27;additionalProperties&#x27;: False,</span><br><span class="line">         &#x27;definitions&#x27;: &#123;&#x27;kernelStatusConfig&#x27;: &#123;&#x27;additionalProperties&#x27;: False,</span><br><span class="line">                                                &#x27;properties&#x27;: &#123;&#x27;showOnStatusBar&#x27;: &#123;&#x27;default&#x27;: False,</span><br><span class="line">                                                                                   &#x27;description&#x27;: &#x27;If &#x27;</span><br><span class="line">                                                                                                  &#x27;`true`, &#x27;</span><br><span class="line">                                                                                                  &#x27;the &#x27;</span><br><span class="line">                                                                                                  &#x27;kernel &#x27;</span><br><span class="line">                                                                                                  &#x27;status &#x27;</span><br><span class="line">                                                                                                  &#x27;progression &#x27;</span><br><span class="line">                                                                                                  &#x27;will &#x27;</span><br><span class="line">                                                                                                  &#x27;be &#x27;</span><br><span class="line">                                                                                                  &#x27;displayed &#x27;</span><br><span class="line">                                                                                                  &#x27;in &#x27;</span><br><span class="line">                                                                                                  &#x27;the &#x27;</span><br><span class="line">                                                                                                  &#x27;status &#x27;</span><br><span class="line">                                                                                                  &#x27;bar &#x27;</span><br><span class="line">                                                                                                  &#x27;otherwise &#x27;</span><br><span class="line">                                                                                                  &#x27;it &#x27;</span><br><span class="line">                                                                                                  &#x27;will &#x27;</span><br><span class="line">                                                                                                  &#x27;be &#x27;</span><br><span class="line">                                                                                                  &#x27;in &#x27;</span><br><span class="line">                                                                                                  &#x27;the &#x27;</span><br><span class="line">                                                                                                  &#x27;toolbar.&#x27;,</span><br><span class="line">                                                                                   &#x27;title&#x27;: &#x27;Show &#x27;</span><br><span class="line">                                                                                            &#x27;kernel &#x27;</span><br><span class="line">                                                                                            &#x27;status &#x27;</span><br><span class="line">                                                                                            &#x27;on &#x27;</span><br><span class="line">                                                                                            &#x27;toolbar &#x27;</span><br><span class="line">                                                                                            &#x27;or &#x27;</span><br><span class="line">                                                                                            &#x27;status &#x27;</span><br><span class="line">                                                                                            &#x27;bar.&#x27;,</span><br><span class="line">                                                                                   &#x27;type&#x27;: &#x27;boolean&#x27;&#125;,</span><br><span class="line">                                                               &#x27;showProgress&#x27;: &#123;&#x27;default&#x27;: True,</span><br><span class="line">                                                                                &#x27;title&#x27;: &#x27;Show &#x27;</span><br><span class="line">                                                                                         &#x27;execution &#x27;</span><br><span class="line">                                                                                         &#x27;progress.&#x27;,</span><br><span class="line">                                                                                &#x27;type&#x27;: &#x27;boolean&#x27;&#125;&#125;,</span><br><span class="line">                                                &#x27;type&#x27;: &#x27;object&#x27;&#125;&#125;,</span><br><span class="line">         &#x27;description&#x27;: &#x27;Notebook settings.&#x27;,</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>解决：从<code>~\.jupyter\lab\user-settings\@jupyterlab\notebook-extension\tracker.jupyterlab-settings</code>中删除以上选项。</p><p>第二，升级后部分Widgets无法正常显示，例如<code>tqdm</code>的进度条。</p><p>如果单单显示一个<code>Error display widgets</code>，那么首先要重新build插件。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jupyter lab build</span><br></pre></td></tr></table></figure><p>如果提示node版本太低，就升级nodejs。</p><p>插件重新编译好后，应该可以进入js的阶段了。如果还是不能正常显示，显示一个框框让<code>Click to show javascript error</code>，那么可能需要升级<code>ipywidgets</code>的版本。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css&quot;&gt;&lt;p&gt;第一，插件&lt;code&gt;@jupyterlab/notebook-extens</summary>
      
    
    
    
    <category term="Programming" scheme="https://booksword.top/categories/Programming/"/>
    
    <category term="jupyter" scheme="https://booksword.top/categories/Programming/jupyter/"/>
    
    
  </entry>
  
  <entry>
    <title>在Anaconda环境下安装Apache Airflow以进行定时任务管理：安装篇</title>
    <link href="https://booksword.top/2023/07/15/ApacheAirflow1/"/>
    <id>https://booksword.top/2023/07/15/ApacheAirflow1/</id>
    <published>2023-07-14T23:30:21.000Z</published>
    <updated>2023-12-24T09:32:07.157Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>本文将介绍如何在Anaconda环境下安装和配置Apache Airflow，用于管理和调度定时任务。以下是主要步骤：</p><ol><li><p>在Anaconda的base环境或者自定义的环境下，通过pip安装<code>typing_extensions</code>和<code>apache-airflow</code>包。</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pip install typing_extensions</span><br><span class="line">pip install apache-airflow</span><br></pre></td></tr></table></figure></li><li><p>创建一个目录来存放Airflow的数据，并将这个目录的路径设置为环境变量<code>AIRFLOW_HOME</code>。</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> &lt;<span class="built_in">where</span> you want to put airflow data <span class="keyword">in</span>&gt;</span><br><span class="line"><span class="built_in">export</span> AIRFLOW_HOME=&lt;<span class="built_in">where</span> you want to put airflow data <span class="keyword">in</span>&gt;</span><br></pre></td></tr></table></figure></li><li><p>运行<code>airflow scheduler</code>命令，然后退出。这将在<code>$AIRFLOW_HOME</code>目录下创建基础的文件。</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">airflow scheduler</span><br></pre></td></tr></table></figure></li><li><p>运行<code>airflow db migrate</code>命令来初始化数据库，然后创建一个用户。</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">airflow db migrate</span><br><span class="line">airflow <span class="built_in">users</span> create --username airflow --role Admin -f xxx -l xxx -e xxx@xxx.com</span><br></pre></td></tr></table></figure><p>这会在<code>AIRFLOW_HOME</code>下面创建一个名为<code>airflow.db</code>的<code>sqlite3</code>文件。</p></li><li><p>运行<code>airflow scheduler</code>和<code>airflow webserver</code>命令来分别启动定时器后台和网页服务。你可以选择使用<code>nohup</code>命令来使这些服务在后台运行。</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">nohup</span> airflow scheduler &gt; scheduler.log 2&gt;&amp;1 &amp;</span><br><span class="line"><span class="built_in">nohup</span> airflow webserver &gt; webserver.log 2&gt;&amp;1 &amp;</span><br></pre></td></tr></table></figure></li><li><p>通过浏览器访问<code>http://localhost:8080</code>来管理定时任务。Airflow已经提供了多个例子，你可以参考这些例子来配置自己的定时任务。</p><ul><li>在浏览器的管理页面会看到一个警告，让避免使用<code>SequentialExecutor</code>，这是因为<code>SequentialExecutor</code>会使用<code>airflow</code>的主进程顺序执行所有任务，导致每个任务都会卡住<code>scheduler</code>。虽然不知道为啥官方要默认到<code>SequentialExecutor</code>，不过解决方案很简单，到<code>$AIRFLOW_HOME/airflow.cfg</code>文件中找到</li></ul> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">executor = SequentialExecutor</span><br></pre></td></tr></table></figure><p>改成</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">executor = LocalExecutor</span><br></pre></td></tr></table></figure><p>并重启<code>airflow scheduler</code>服务就可以了。</p></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css&quot;&gt;&lt;p&gt;本文将介绍如何在Anaconda环境下安装和配置Apache Airflow</summary>
      
    
    
    
    <category term="应用软件" scheme="https://booksword.top/categories/%E5%BA%94%E7%94%A8%E8%BD%AF%E4%BB%B6/"/>
    
    <category term="Airflow" scheme="https://booksword.top/categories/%E5%BA%94%E7%94%A8%E8%BD%AF%E4%BB%B6/Airflow/"/>
    
    
  </entry>
  
  <entry>
    <title>单个非root用户Anaconda下安装Apache Airflow用于定时任务：使用Postgresql</title>
    <link href="https://booksword.top/2023/07/15/ApacheAirflow3/"/>
    <id>https://booksword.top/2023/07/15/ApacheAirflow3/</id>
    <published>2023-07-14T23:30:21.000Z</published>
    <updated>2023-12-24T09:30:41.174Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h2 id="准备工作"><a class="header-anchor" href="#准备工作">¶</a>准备工作</h2><p>首先参考：</p><ul><li>《在Anaconda环境下安装Apache Airflow以进行定时任务管理：安装篇》安装<code>airflow</code></li><li>《Ubuntu安装Postgresql并设置自己的数据文件位置》配置好数据库</li><li>安装<code>SQLAlchemy</code>和<code>psycopg2</code> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pip install SQLAlchemy</span><br><span class="line">pip install psycopg2</span><br></pre></td></tr></table></figure></li><li>停止Airflow相关服务  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl stop airflow-scheduler.service</span><br><span class="line">sudo systemctl stop airflow-webserver.service</span><br></pre></td></tr></table></figure></li></ul><h2 id="创建Airflow相关的数据库和数据库用户"><a class="header-anchor" href="#创建Airflow相关的数据库和数据库用户">¶</a>创建Airflow相关的数据库和数据库用户</h2><ul><li>切换到Postgresql的管理用户，运行<code>psql</code>进入Postgresql的命令行  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo su postgres</span><br><span class="line">psql</span><br></pre></td></tr></table></figure></li><li>在Postgresql的命令行运行以下命令（注意最后的分号要带上）创建相应的DB和用户。  <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> DATABASE airflow_db;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">USER</span> airflow_user <span class="keyword">WITH</span> PASSWORD <span class="string">&#x27;airflow_pass&#x27;</span>;</span><br><span class="line"><span class="keyword">GRANT</span> <span class="keyword">ALL</span> PRIVILEGES <span class="keyword">ON</span> DATABASE airflow_db <span class="keyword">TO</span> airflow_user;</span><br><span class="line"><span class="comment">-- PostgreSQL 15+ requires additional privileges:</span></span><br><span class="line">\<span class="keyword">connect</span> airflow_db;</span><br><span class="line"><span class="keyword">GRANT</span> <span class="keyword">ALL</span> <span class="keyword">ON</span> SCHEMA public <span class="keyword">TO</span> airflow_user;</span><br></pre></td></tr></table></figure></li><li>编辑Postgresql的<code>pg_hba.conf</code>文件赋予<code>airflow_user</code>访问权限<ul><li>默认位于<code>/etc/postgresql/16/main/pg_hba.conf</code></li><li>添加一行<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">host    all             all             127.0.0.1/32            password</span><br></pre></td></tr></table></figure>允许所有本地用户通过<code>localhost</code>访问。这个限制有些宽，可以具体限制到用户访问ip等。</li></ul></li></ul><h2 id="修改Airflow配置并迁移到新数据库"><a class="header-anchor" href="#修改Airflow配置并迁移到新数据库">¶</a>修改Airflow配置并迁移到新数据库</h2><p>首先配置环境变量：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> AIRFLOW_HOME=/data/airflow</span><br><span class="line"><span class="built_in">export</span> AIRFLOW_CONFIG=/data/airflow/airflow.cfg</span><br></pre></td></tr></table></figure><p>(注意这里一定要手工<code>export</code>，试验过<code>source /etc/sysconfig/airflow</code>，尽管<code>echo $AIRFLOW_HOME</code>输出的是正确的目录，还是不能被<code>airflow</code>识别，不知道是不是因为用的Anaconda环境。)</p><p>打开<code>airflow.cfg</code>文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vi $AIRFLOW_CONFIG</span><br></pre></td></tr></table></figure><p>将<code>sql_alchemy_conn</code>设为<code>Postgresql</code>的链接</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sql_alchemy_conn = postgresql+psycopg2://airflow_user:airflow_pass@localhost/airflow_db</span><br></pre></td></tr></table></figure><p>初始化</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">airflow db migrate</span><br></pre></td></tr></table></figure><p>重新启Airflow的服务</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl start airflow-scheduler.service</span><br><span class="line">sudo systemctl start airflow-webserver.service</span><br></pre></td></tr></table></figure><p>检查状态</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl status airflow-scheduler.service</span><br><span class="line">sudo systemctl status airflow-webserver.service</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css&quot;&gt;&lt;h2 id=&quot;准备工作&quot;&gt;&lt;a class=&quot;header-anchor&quot; hr</summary>
      
    
    
    
    <category term="应用软件" scheme="https://booksword.top/categories/%E5%BA%94%E7%94%A8%E8%BD%AF%E4%BB%B6/"/>
    
    <category term="Airflow" scheme="https://booksword.top/categories/%E5%BA%94%E7%94%A8%E8%BD%AF%E4%BB%B6/Airflow/"/>
    
    
  </entry>
  
  <entry>
    <title>解决报错: qt.qpa.plugin Could not find the Qt platform plugin &quot;xcb&quot; in &quot;&quot;</title>
    <link href="https://booksword.top/2023/04/30/error%20Could%20not%20find%20the%20Qt%20platform%20plugin%20xcb%20in/"/>
    <id>https://booksword.top/2023/04/30/error%20Could%20not%20find%20the%20Qt%20platform%20plugin%20xcb%20in/</id>
    <published>2023-04-30T02:41:32.000Z</published>
    <updated>2023-11-24T02:12:52.671Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h2 id="问题"><a class="header-anchor" href="#问题">¶</a>问题</h2><p>使用<code>plotly</code>绘图生成图片的时候遇到如下报错：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">qt.qpa.plugin: Could not find the Qt platform plugin &quot;xcb&quot; in &quot;&quot;</span><br><span class="line">This application failed to start because no Qt platform plugin could be initialized. Reinstalling the application may fix this problem.</span><br></pre></td></tr></table></figure><h2 id="解决过程"><a class="header-anchor" href="#解决过程">¶</a>解决过程</h2><h4 id="尝试一"><a class="header-anchor" href="#尝试一">¶</a>尝试一</h4><p>参考<a href="https://askubuntu.com/questions/1228495/cannot-open-qcreator-qt-qpa-plugin-could-not-find-the-qt-platform-plugin-xcb">这篇Askubuntu文章</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">指定环境变量`QT_QPA_PLATFORM_PLUGIN_PATH`。</span><br><span class="line">```bash</span><br><span class="line">export QT_QPA_PLATFORM_PLUGIN_PATH=/usr/lib/x86_64-linux-gnu/qt5/plugins/platforms</span><br></pre></td></tr></table></figure><p>报错变为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">qt.core.plugin.loader: In /usr/lib/x86_64-linux-gnu/qt5/plugins/platforms/libqeglfs.so:</span><br><span class="line">  Plugin uses incompatible Qt library (5.15.0) [release]</span><br><span class="line">qt.core.plugin.loader: In /usr/lib/x86_64-linux-gnu/qt5/plugins/platforms/libqlinuxfb.so:</span><br><span class="line">  Plugin uses incompatible Qt library (5.15.0) [release]</span><br><span class="line">qt.core.plugin.loader: In /usr/lib/x86_64-linux-gnu/qt5/plugins/platforms/libqminimal.so:</span><br><span class="line">  Plugin uses incompatible Qt library (5.15.0) [release]</span><br><span class="line">qt.core.plugin.loader: In /usr/lib/x86_64-linux-gnu/qt5/plugins/platforms/libqminimalegl.so:</span><br><span class="line">  Plugin uses incompatible Qt library (5.15.0) [release]</span><br><span class="line">qt.core.plugin.loader: In /usr/lib/x86_64-linux-gnu/qt5/plugins/platforms/libqoffscreen.so:</span><br><span class="line">  Plugin uses incompatible Qt library (5.15.0) [release]</span><br><span class="line">qt.core.plugin.loader: In /usr/lib/x86_64-linux-gnu/qt5/plugins/platforms/libqvnc.so:</span><br><span class="line">  Plugin uses incompatible Qt library (5.15.0) [release]</span><br><span class="line">qt.core.plugin.loader: In /usr/lib/x86_64-linux-gnu/qt5/plugins/platforms/libqxcb.so:</span><br><span class="line">  Plugin uses incompatible Qt library (5.15.0) [release]</span><br><span class="line">qt.qpa.plugin: Could not find the Qt platform plugin &quot;xcb&quot; in &quot;/usr/lib/x86_64-linux-gnu/qt5/plugins/platforms&quot;</span><br><span class="line">This application failed to start because no Qt platform plugin could be initialized. Reinstalling the application may fix this problem.</span><br></pre></td></tr></table></figure><h4 id="尝试二"><a class="header-anchor" href="#尝试二">¶</a>尝试二</h4><p>考虑<code>python</code>程序用了<code>PySide6</code>包和QT6相关，考虑是不是因为这个版本不匹配，于是安装了Qt6并将环境变量指向Qt6的位置：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install qt6-base-dev qt6-base-dev-tools</span><br><span class="line"><span class="built_in">export</span> QT_QPA_PLATFORM_PLUGIN_PATH=/usr/lib/x86_64-linux-gnu/qt6/plugins/platforms</span><br></pre></td></tr></table></figure><p>报错变为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">qt.qpa.plugin: Could not load the Qt platform plugin &quot;xcb&quot; in &quot;/usr/lib/x86_64-linux-gnu/qt6/plugins/platforms&quot; even though it was found.</span><br><span class="line">This application failed to start because no Qt platform plugin could be initialized. Reinstalling the application may fix this problem.</span><br><span class="line"></span><br><span class="line">Available platform plugins are: eglfs, linuxfb, minimal, minimalegl, offscreen, vkkhrdisplay, vnc, xcb.</span><br></pre></td></tr></table></figure><p>再考虑是不是python包版本不匹配，于是强制升级了<code>PySide6</code>和<code>PyQt6</code>。<br>报错变为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">  File &quot;/anaconda3/lib/python3.9/site-packages/matplotlib/_api/deprecation.py&quot;, line 454, in wrapper</span><br><span class="line">    return func(*args, **kwargs)</span><br><span class="line">  File &quot;/anaconda3/lib/python3.9/site-packages/matplotlib/pyplot.py&quot;, line 771, in figure</span><br><span class="line">    manager = new_figure_manager(</span><br><span class="line">  File &quot;/anaconda3/lib/python3.9/site-packages/matplotlib/pyplot.py&quot;, line 346, in new_figure_manager</span><br><span class="line">    _warn_if_gui_out_of_main_thread()</span><br><span class="line">  File &quot;/anaconda3/lib/python3.9/site-packages/matplotlib/pyplot.py&quot;, line 336, in _warn_if_gui_out_of_main_thread</span><br><span class="line">    if (_get_required_interactive_framework(_get_backend_mod()) and</span><br><span class="line">  File &quot;/anaconda3/lib/python3.9/site-packages/matplotlib/pyplot.py&quot;, line 206, in _get_backend_mod</span><br><span class="line">    switch_backend(dict.__getitem__(rcParams, &quot;backend&quot;))</span><br><span class="line">  File &quot;/anaconda3/lib/python3.9/site-packages/matplotlib/pyplot.py&quot;, line 251, in switch_backend</span><br><span class="line">    switch_backend(candidate)</span><br><span class="line">  File &quot;/anaconda3/lib/python3.9/site-packages/matplotlib/pyplot.py&quot;, line 264, in switch_backend</span><br><span class="line">    backend_mod = importlib.import_module(</span><br><span class="line">  File &quot;/anaconda3/lib/python3.9/importlib/__init__.py&quot;, line 127, in import_module</span><br><span class="line">    return _bootstrap._gcd_import(name[level:], package, level)</span><br><span class="line">  File &quot;&lt;frozen importlib._bootstrap&gt;&quot;, line 1030, in _gcd_import</span><br><span class="line">  File &quot;&lt;frozen importlib._bootstrap&gt;&quot;, line 1007, in _find_and_load</span><br><span class="line">  File &quot;&lt;frozen importlib._bootstrap&gt;&quot;, line 986, in _find_and_load_unlocked</span><br><span class="line">  File &quot;&lt;frozen importlib._bootstrap&gt;&quot;, line 680, in _load_unlocked</span><br><span class="line">  File &quot;&lt;frozen importlib._bootstrap_external&gt;&quot;, line 850, in exec_module</span><br><span class="line">  File &quot;&lt;frozen importlib._bootstrap&gt;&quot;, line 228, in _call_with_frames_removed</span><br><span class="line">  File &quot;/anaconda3/lib/pythoadd n3.9/site-packages/matplotlib/backends/backend_qtagg.py&quot;, line 12, in &lt;module&gt;</span><br><span class="line">    from .backend_qt import QtCore, QtGui, _BackendQT, FigureCanvasQT</span><br><span class="line">  File &quot;/anaconda3/lib/python3.9/site-packages/matplotlib/backends/backend_qt.py&quot;, line 72, in &lt;module&gt;</span><br><span class="line">    _MODIFIER_KEYS = [</span><br><span class="line">  File &quot;/anaconda3/lib/python3.9/site-packages/matplotlib/backends/backend_qt.py&quot;, line 73, in &lt;listcomp&gt;</span><br><span class="line">    (_to_int(getattr(_enum(&quot;QtCore.Qt.KeyboardModifier&quot;), mod)),</span><br><span class="line">TypeError: int() argument must be a string, a bytes-like object or a number, not &#x27;KeyboardModifier&#x27;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>发现涉及到<code>matplotlib</code>，同样升级之，错误变为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">qt.qpa.plugin: Could not load the Qt platform plugin &quot;xcb&quot; in &quot;/usr/lib/x86_64-linux-gnu/qt6/plugins/platforms&quot; even though it was found.</span><br><span class="line">This application failed to start because no Qt platform plugin could be initialized. Reinstalling the application may fix this problem.</span><br><span class="line"></span><br><span class="line">Available platform plugins are: eglfs, offscreen, minimal, xcb, wayland-egl, linuxfb, vkkhrdisplay, wayland, vnc, minimalegl.</span><br></pre></td></tr></table></figure><p>百思不得其解。</p><h4 id="解决"><a class="header-anchor" href="#解决">¶</a>解决</h4><p>网上找到设置<code>export QT_DEBUG_PLUGINS=1</code>后可以让Qt输出详细debug信息，设置后运行程序输出：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">qt.core.plugin.factoryloader: Got keys from plugin meta data QList(&quot;minimalegl&quot;)</span><br><span class="line">qt.core.library: &quot;/anaconda3/lib/python3.9/site-packages/PyQt6/Qt6/plugins/platforms/libqxcb.so&quot; cannot load: Cannot load library /anaconda3/lib/python3.9/site-packages/PyQt6/Qt6/plugins/platforms/libqxcb.so: (libxcb-cursor.so.0: cannot open shared object file: No such file or directory)</span><br><span class="line">qt.core.plugin.loader: QLibraryPrivate::loadPlugin failed on &quot;/anaconda3/lib/python3.9/site-packages/PyQt6/Qt6/plugins/platforms/libqxcb.so&quot; : &quot;Cannot load library /anaconda3/lib/python3.9/site-packages/PyQt6/Qt6/plugins/platforms/libqxcb.so: (libxcb-cursor.so.0: cannot open shared object file: No such file or directory)&quot;</span><br><span class="line">qt.qpa.plugin: Could not load the Qt platform plugin &quot;xcb&quot; in &quot;/usr/lib/x86_64-linux-gnu/qt6/plugins/platforms&quot; even though it was found.</span><br><span class="line">This application failed to start because no Qt platform plugin could be initialized. Reinstalling the application may fix this problem.</span><br></pre></td></tr></table></figure><p>发现</p><ul><li>实际上被使用的是PyQt6自带的插件动态库，并没有用<code>QT_QPA_PLATFORM_PLUGIN_PATH</code>指定的系统库。</li><li>错误原因是缺失<code>libxcb-cursor.so.0</code>。<br>于是安装<code>libxcb-cursor</code></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install libxcb-cursor*</span><br></pre></td></tr></table></figure><p>再次运行发现不再报错。问题解决。</p><p>删除掉<code>QT_DEBUG_PLUGINS</code>和<code>QT_QPA_PLATFORM_PLUGIN_PATH</code>环境变量（因为实际上并没有用系统的Qt6，所以<code>QT_QPA_PLATFORM_PLUGIN_PATH</code>删掉不影响什么）。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css&quot;&gt;&lt;h2 id=&quot;问题&quot;&gt;&lt;a class=&quot;header-anchor&quot; href</summary>
      
    
    
    
    <category term="Programming" scheme="https://booksword.top/categories/Programming/"/>
    
    <category term="Python" scheme="https://booksword.top/categories/Programming/Python/"/>
    
    
  </entry>
  
  <entry>
    <title>ffmpeg中的-filter_complex</title>
    <link href="https://booksword.top/2023/04/08/ffmpeg_filter_complex/"/>
    <id>https://booksword.top/2023/04/08/ffmpeg_filter_complex/</id>
    <published>2023-04-08T05:38:06.000Z</published>
    <updated>2023-04-08T15:02:00.790Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>需要合并两个分辨率不同的mp4视频，所以稍微研究了下ffmpeg中的complex_filter的合并语法。</p><p>如果要是合并相同编码，分辨率，FPS的视频，那很简单，直接用<code>concat</code>文件协议就行：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># mylist.txt</span><br><span class="line">file &#x27;video1.mp4&#x27;</span><br><span class="line">file &#x27;video2.mp4&#x27;</span><br></pre></td></tr></table></figure><p>（可以直接用<code>for f in *.mp4; do echo &quot;file '$f'&quot; &gt;&gt; mylist.txt; done</code>生成。）<br>然后</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ffmpeg -f concat -safe 0 -i mylist.txt -c copy video.mp4</span><br></pre></td></tr></table></figure><p>即可。</p><p>但是如果编码，分辨率，FPS不同，想用一行命令解决问题，就要用到<code>-filter_complex</code>参数，指定将哪个文件的哪个stream做什么样的变换。对于笔者的需求，将<code>video2.mp4</code>的分辨率转成和<code>video1.mp4</code>相同然后合并<code>video1.mp4</code>、<code>video2.mp4</code>，命令如下。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ffmpeg -i video1.mp4 -i video2.mp4 -filter_complex <span class="string">&quot;[1:v]scale=640:480[v1];[0:v][0:a][v1][1:a]concat=n=2:v=1:a=1[outv][outa]&quot;</span> -map <span class="string">&quot;[outv]&quot;</span> -map <span class="string">&quot;[outa]&quot;</span> -c:v libx264 -crf 21 video.mp4</span><br></pre></td></tr></table></figure><p>参数解释：</p><ul><li><code>-i video1.mp4 -i video2.mp4</code>：输入视频，可以有多个；</li><li><code>-filter_complex</code>：后面跟complex filter表达式字符串（类似一种编程语言）<ul><li><code>[1:v]scale=640:480[v1]</code>: 将第二个输入文件的视频流分辨率转为640x480并用<code>[v1]</code>作为代号。<code>[1:v]</code>表示第一个输入视频文件的视频流，之所以这里是“1”是计算机界惯例编号从0开始。如果有多个视频流可以用<code>[1:v:0]</code>，<code>[1:v:1]</code>，……表示。</li><li><code>[0:v][0:a][v1][1:a]concat=n=2:v=1:a=1[outv][outa]</code>表示将第一个输入文件的音视频流，转换后的第二个输入文件视频流，第二个输入文件的音频流连接起来并分别赋予代号<code>[outv]</code>和<code>[outa]</code>，<code>n=2</code>表示一共两个文件，<code>v=1</code>表示一共一个视频流，<code>a=1</code>表示一共一个音频流。</li><li><code>-map &quot;[outv]&quot; -map &quot;[outa]&quot;</code>表示将<code>[outv]</code>和<code>[outa]</code>map为一个文件。</li><li><code>-c:v libx264</code>指定视频流编码器，<code>-crf 21</code>是编码器参数</li><li><code>video.mp4</code>指定输出文件名。</li></ul></li></ul><p>根据以上可以举一反三写出更复杂的filter表达式，具体的可用的filter可以参考<a href="https://www.ffmpeg.org/ffmpeg-filters.html">官方文档中的相关章节</a>。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css&quot;&gt;&lt;p&gt;需要合并两个分辨率不同的mp4视频，所以稍微研究了下ffmpeg中的comp</summary>
      
    
    
    
    <category term="应用软件" scheme="https://booksword.top/categories/%E5%BA%94%E7%94%A8%E8%BD%AF%E4%BB%B6/"/>
    
    <category term="ffmpeg" scheme="https://booksword.top/categories/%E5%BA%94%E7%94%A8%E8%BD%AF%E4%BB%B6/ffmpeg/"/>
    
    
  </entry>
  
  <entry>
    <title>TigerVNC：使用X.509加密连接</title>
    <link href="https://booksword.top/2023/04/06/509%E5%8A%A0%E5%AF%86%E8%BF%9E%E6%8E%A5/"/>
    <id>https://booksword.top/2023/04/06/509%E5%8A%A0%E5%AF%86%E8%BF%9E%E6%8E%A5/</id>
    <published>2023-04-06T00:06:00.000Z</published>
    <updated>2023-04-08T15:02:00.790Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>根据Ubuntu 20.04安装VNC服务（Xfce4）配置好VNC后，连接时会提示数据未加密所以不安全。</p><p><img src="/2023/04/06/509%E5%8A%A0%E5%AF%86%E8%BF%9E%E6%8E%A5/image.png.png" alt="image.png"></p><p>查阅文档后得知TigerVNC支持X.509认证的TLS加密。</p><h3 id="设置方法"><a class="header-anchor" href="#设置方法">¶</a>设置方法</h3><h4 id="服务端"><a class="header-anchor" href="#服务端">¶</a>服务端</h4><p>首先生成认证文件。可以使用商业的认证（如有）。如果没有，则需要使用OpenSSL生成自己的认证。</p><ol><li><p>安装OpenSSL</p><ul><li>RedHat/CentOS/Fedora：<code>sudo yum install openssl</code></li><li>Debian/Ubuntu/Mint: <code>sudo apt-get install openssl</code></li></ul></li><li><p>使用OpenSSL生成认证密钥对</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">openssl req -x509 -newkey rsa -days 365 -nodes -keyout vnc-server-private.pem -out vnc-server.pem -subj <span class="string">&#x27;/CN=&lt;your server ip&gt;&#x27;</span> -addext <span class="string">&quot;subjectAltName=IP:&lt;your server ip&gt;&quot;</span></span><br></pre></td></tr></table></figure><p>（将<code>&lt;your server ip&gt;</code>替换成服务器真实IP）</p><p>会在运行命令的文件夹下面生成<code>vnc-server-private.pem</code>和<code>vnc-server.pem</code>两个文件。将<code>vnc-server.pem</code>下载到客户机上备用。</p></li><li><p>（可选）为了便于管理，将密钥对拷贝到<code>~/.vnc</code>下面。</p></li><li><p>附带以下参数运行<code>vncserver</code>:</p></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vncserver -localhost no -SecurityTypes X509Vnc -X509Key vnc-server-private.pem -X509Cert vnc-server.pem</span><br></pre></td></tr></table></figure><h4 id="客户端（使用TigerVNCviewer）"><a class="header-anchor" href="#客户端（使用TigerVNCviewer）">¶</a>客户端（使用TigerVNCviewer）</h4><p>点击<code>Options...</code>按钮，将<code>Security</code>选项卡下的<code>Path to X509 CA certificate</code>指向从OpenSSL生成的公钥pem文件<code>vnc-server.pem</code>（之前从服务端下载的）。</p><p><img src="/2023/04/06/509%E5%8A%A0%E5%AF%86%E8%BF%9E%E6%8E%A5/2023-04-06T164308.png" alt="2023-04-06T164308"></p><p>然后照常连接。可以看到连接已经变成安全的了。</p><p><img src="/2023/04/06/509%E5%8A%A0%E5%AF%86%E8%BF%9E%E6%8E%A5/2023-04-06T164124.png" alt="2023-04-06T164124"></p><h4 id="服务端配置文件"><a class="header-anchor" href="#服务端配置文件">¶</a>服务端配置文件</h4><p>如果不想每次都运行服务都需要打那么长一串命令，可以把选项写入服务器上的配置文件，并放在<code>~/.vnc</code>文件夹下：</p><ul><li>版本1.10：<code>~/.vnc.conf</code></li><li>版本1.12+: <code>~/.vnc/tigervnc.conf</code></li></ul><p>配置文件内容如下：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$localhost=&quot;no&quot;;</span><br><span class="line">$SecurityTypes=&quot;X509Vnc&quot;;</span><br><span class="line">$X509Key=&quot;$ENV&#123;HOME&#125;/.vnc/vnc-server-private.pem&quot;;</span><br><span class="line">$X509Cert=&quot;$ENV&#123;HOME&#125;/.vnc/vnc-server.pem&quot;;</span><br></pre></td></tr></table></figure><h2 id="参考资料"><a class="header-anchor" href="#参考资料">¶</a>参考资料</h2><blockquote><ul><li><a href="https://github.com/TigerVNC/tigervnc/wiki/Secure-your-connection">Secure your connection</a></li></ul></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css&quot;&gt;&lt;p&gt;根据Ubuntu 20.04安装VNC服务（Xfce4）配置好VNC后，连接</summary>
      
    
    
    
    <category term="其他" scheme="https://booksword.top/categories/%E5%85%B6%E4%BB%96/"/>
    
    
  </entry>
  
  <entry>
    <title>Hexo部署到GitHub Pages后设置的自定义域名丢失</title>
    <link href="https://booksword.top/2023/03/23/Hexo_missing_custom_domain/"/>
    <id>https://booksword.top/2023/03/23/Hexo_missing_custom_domain/</id>
    <published>2023-03-23T13:02:14.000Z</published>
    <updated>2023-03-23T09:18:08.414Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h3 id="问题"><a class="header-anchor" href="#问题">¶</a>问题</h3><p>基于Hexo的静态博客托管在GitHub Pages上，并且在<code>Settings-&gt;Pages</code>里面绑定了自定义域名。<br><img src="/2023/03/23/Hexo_missing_custom_domain/Hexo_missing_custom_domain%5C1.png" alt=""></p><p>但每次部署（运行<code>hexo deploy</code>后设置的自定义域名都会被自动清空。</p><h3 id="解决"><a class="header-anchor" href="#解决">¶</a>解决</h3><p>在<code>source</code>文件夹下建立文本文件<code>CNAME</code>（无后缀名），内容为自定义域名。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css&quot;&gt;&lt;h3 id=&quot;问题&quot;&gt;&lt;a class=&quot;header-anchor&quot; href</summary>
      
    
    
    
    <category term="Hexo" scheme="https://booksword.top/categories/Hexo/"/>
    
    
  </entry>
  
  <entry>
    <title>ffmpeg合并文件报错“Unsafe file name”</title>
    <link href="https://booksword.top/2023/02/21/ffmpeg_unsafe_file_name/"/>
    <id>https://booksword.top/2023/02/21/ffmpeg_unsafe_file_name/</id>
    <published>2023-02-21T13:37:49.000Z</published>
    <updated>2023-03-21T12:17:21.542Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>解决：加上参数<code>-safe 0</code>。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css&quot;&gt;&lt;p&gt;解决：加上参数&lt;code&gt;-safe 0&lt;/code&gt;。&lt;/p&gt;
</summary>
      
    
    
    
    <category term="应用软件" scheme="https://booksword.top/categories/%E5%BA%94%E7%94%A8%E8%BD%AF%E4%BB%B6/"/>
    
    <category term="ffmpeg" scheme="https://booksword.top/categories/%E5%BA%94%E7%94%A8%E8%BD%AF%E4%BB%B6/ffmpeg/"/>
    
    
  </entry>
  
  <entry>
    <title>Ubuntu 20.04安装VNC服务（Xfce4）</title>
    <link href="https://booksword.top/2023/02/04/Ubuntu%2020.04%E5%AE%89%E8%A3%85VNC%E6%9C%8D%E5%8A%A1%EF%BC%88Xfce4%EF%BC%89/"/>
    <id>https://booksword.top/2023/02/04/Ubuntu%2020.04%E5%AE%89%E8%A3%85VNC%E6%9C%8D%E5%8A%A1%EF%BC%88Xfce4%EF%BC%89/</id>
    <published>2023-02-04T09:35:00.000Z</published>
    <updated>2023-04-30T02:40:00.154Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h4 id="目标"><a class="header-anchor" href="#目标">¶</a>目标</h4><p>给VPS安装VNC服务以能使用图形化界面软件。</p><h4 id="步骤"><a class="header-anchor" href="#步骤">¶</a>步骤</h4><ol><li><p>安装Xfce桌面环境</p><p><code>sudo apt install xfce4</code></p> <font size="1"> a. 中途会让选择是用`gdm3`还是`lightdm`。根据网上描述[^fn1]，`lightdm`占用资源更少，支持的桌面系统更多，同时可定制性更好；而`gdm3`是专门为`GNOME`开发的。所以这里选`lightdm`。 </font></li><li><p>安装VNC Server</p><p><code>sudo apt install tigervnc-standalone-server</code></p></li><li><p>初始化</p></li><li><p>运行命令<code>vncserver</code>，会提示输入密码，这个密码是后期连接vnc的密码，一定要记住。</p></li><li><p>运行<code>vncserver -kill :1</code>杀掉刚刚的服务进程。</p></li><li><p><code>vi ~/.vnc/xstartup</code>建立<code>xstartup</code>文件，并将以下内容复制进去：</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/sh</span></span><br><span class="line"><span class="comment"># Uncomment the following two lines for normal desktop:</span></span><br><span class="line"><span class="comment"># unset SESSION_MANAGER</span></span><br><span class="line"><span class="comment"># exec /etc/X11/xinit/xinitrc</span></span><br><span class="line"></span><br><span class="line">[ -x /etc/vnc/xstartup ] &amp;&amp; <span class="built_in">exec</span> /etc/vnc/xstartup</span><br><span class="line">[ -r <span class="variable">$HOME</span>/.Xresources ] &amp;&amp; xrdb <span class="variable">$HOME</span>/.Xresources</span><br><span class="line">xsetroot -solid grey</span><br><span class="line">vncconfig -iconic &amp;</span><br><span class="line">x-terminal-emulator -geometry 80x24+10+10 -<span class="built_in">ls</span> -title <span class="string">&quot;<span class="variable">$VNCDESKTOP</span> Desktop&quot;</span> &amp;</span><br><span class="line">x-window-manager &amp;</span><br><span class="line"></span><br><span class="line"><span class="comment">#gnome-terminal &amp;</span></span><br><span class="line"></span><br><span class="line">sesion-manager &amp; xfdesktop &amp; xfce4-panel &amp;</span><br><span class="line">xfce4-menu-plugin &amp;</span><br><span class="line">xfsettingsd &amp;</span><br><span class="line">xfconfd &amp;</span><br><span class="line">xfwm4 &amp;</span><br></pre></td></tr></table></figure></li><li><p>再次开启<code>vncserver</code>: <code>vncserver -localhost no</code><br><code>tigervncserver</code>默认只能本机访问，<code>-localhost no</code>参数关闭此限制。</p></li></ol><h4 id="其他"><a class="header-anchor" href="#其他">¶</a>其他</h4><ul><li>VNC服务默认使用从5901开始的端口，一台VPS上可以开启多个VNC服务，连接时<code>ip:1</code>对应5901端口的服务，连接时<code>ip:2</code>对应5902端口的服务，以此类推。</li><li>如VPS有防火墙需要打开对应的端口。</li></ul><p>^fn1: <a href="https://www.linuxfordevices.com/tutorials/linux/gdm3-vs-lightdm">https://www.linuxfordevices.com/tutorials/linux/gdm3-vs-lightdm</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css&quot;&gt;&lt;h4 id=&quot;目标&quot;&gt;&lt;a class=&quot;header-anchor&quot; href</summary>
      
    
    
    
    <category term="Linux" scheme="https://booksword.top/categories/Linux/"/>
    
    
  </entry>
  
  <entry>
    <title>Linux Swap交换分区</title>
    <link href="https://booksword.top/2023/01/11/linux-swap%E4%BA%A4%E6%8D%A2%E5%88%86%E5%8C%BA/"/>
    <id>https://booksword.top/2023/01/11/linux-swap%E4%BA%A4%E6%8D%A2%E5%88%86%E5%8C%BA/</id>
    <published>2023-01-11T12:02:00.000Z</published>
    <updated>2023-01-11T12:02:07.462Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>在我们自己的购买的服务器环境中，一般是买的1g的内存，但是当服务器里面的东西装的比较多的时候就会导致内存不够用了,这个时候可以通过增加虚拟内存来夸大内存容量。</p><h4 id="设置"><a class="header-anchor" href="#设置">¶</a>设置</h4><p>0、查看内存使用情况</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ free -m</span><br><span class="line">              total        used        free      shared  buff/cache   available</span><br><span class="line">Mem:           3914         161        1110           0        2643        3479</span><br><span class="line">Swap:          8703          64        8639</span><br></pre></td></tr></table></figure><p>1、检查 Swap 空间，先检查一下系统里有没有既存的 Swap 文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ swapon -s</span><br></pre></td></tr></table></figure><p>如果返回的信息概要是空的，则表示 Swap 文件不存在。</p><p>2、创建文件并全部写入0.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">dd</span> <span class="keyword">if</span>=/dev/zero of=/swapfile bs=1G count=4</span><br></pre></td></tr></table></figure><p>以上命令创建4G的全零文件。</p><p>【参数说明】</p><ul><li>if=文件名：输入文件名，缺省为标准输入。即指定源文件。&lt; if=input file &gt;</li><li>of=文件名：输出文件名，缺省为标准输出。即指定目的文件。&lt; of=output file &gt;</li><li>bs=bytes：同时设置读入/输出的块大小为bytes个字节</li><li>count=blocks：仅拷贝blocks个块，块大小等于bs指定的字节数。</li></ul><p>3、将创建的文件转为swap</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ mkswap /swapfile</span><br></pre></td></tr></table></figure><p>4、激活</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ swapon /swapfile</span><br></pre></td></tr></table></figure><p>之后可使用0，1步骤中的命令检测是否开启成功。</p><p>5、(可选)如果要机器重启的时候自动挂载 Swap ，那么还需要修改<code>/etc/fstab</code>，添加如下行：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/swapfile   swap   swap    defaults 0 0</span><br></pre></td></tr></table></figure><p>6、删除文件Swap</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ swapoff  /swapfile  <span class="comment">#卸载swap文件</span></span><br><span class="line">$ <span class="built_in">rm</span> -rf /swapfile  <span class="comment">#删除文件</span></span><br></pre></td></tr></table></figure><p>如果进行了步骤5，须相应删除该行。</p><h4 id="相关知识"><a class="header-anchor" href="#相关知识">¶</a>相关知识</h4><p>交换技术<br>交换（Swapping）技术它的主要特点是：打破了一个程序一旦进入内存，就一直驻留在内存直到运行结束的限制。</p><p>在多道程序环境下，内存中可以同时存在多个进程（程序），其中的一部分进程由于等待某些事件而处于阻塞状态，但这些处于阻塞状态的进程仍然驻留内存，并占据着内存空间；另一方面，外存上可能有许多等待装入内存运行的程序，却因内存不足而未能装入。显然，这是一种严重的系统资源浪费，它会使系统的吞吐量下降。为了解决这个问题，可以在操作系统中增加交换（对换）功能，即由操作系统根据需要，将内存中暂时不具备运行条件的部分程序或数据移到外存（换出），以便腾出足够的内存空间，将外存中需要运行的程序或数据调入内存（换入）投入运行。在操作系统中引入交换（对换）技术，可以显著提高内存资源的利用率并改善系统的性能。</p><p>以交换的单位不同来划分，则有以下两种交换方式。</p><p>以进程为单位的交换。每次换入/换出的是整个进程，我们称这种交换为进程交换（进程对换）或整体交换（整体对换）。进程交换广泛应用于分时系统，主要解决内存紧张问题。</p><p>以页（此处不多做介绍）或段（此处不多做介绍）为单位的交换。这种交换分别称为页置换（页交换或页对换）或段置换（段交换或段对换），页置换和段置换是以进程中的某一部分为交换单位，因此又称为部分交换（部分对换）。部分交换广泛应用于现代操作系统中，是实现虚拟存储器的基础。</p><p>我们这里所说的交换是指进程交换，为了实现进程交换，操作系统需要解决以下两个问题。</p><p>对换空间的管理。在具有交换功能的操作系统中，一般将外存空间分为文件区和交换区（对换区）。文件区用来存放文件，而交换区则用来存放从内存中换出的进程，或等待换入内存的进程。尽管文件区一般采用离散分配方式来分配外存存储空间，但交换区的存储空间分配则宜采用连续分配方式，这是因为交换区中存放的是换入/换出的进程，为了提高交换速度，有必要采用连续分配方式，并且交换区可以采用与可变分区存储管理类似的方法进行管理。例如，使用空闲分区表或空闲分区链来记录外存交换区的使用情况，利用首次适应算法、最佳适应算法或最差适应算法来进行外存交换区的分配。</p><p>交换的时机以及选择哪些进程交换。交换时机一般选择在进程的时间片用完，以及进程等待输入/输出时，或者在进程要求扩充其内存空间而得不到满足时。换出到外存的进程一般选择处于阻塞状态，或优先级低且短时间内不会再次投入运行的进程；换入到内存的进程则应选择换出时间最久且已处于就绪状态的进程。</p><h5 id="参考"><a class="header-anchor" href="#参考">¶</a>参考</h5><p>1、<a href="https://cloud.tencent.com/developer/article/1704157">https://cloud.tencent.com/developer/article/1704157</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css&quot;&gt;&lt;p&gt;在我们自己的购买的服务器环境中，一般是买的1g的内存，但是当服务器里面的东西</summary>
      
    
    
    
    <category term="Linux" scheme="https://booksword.top/categories/Linux/"/>
    
    
  </entry>
  
  <entry>
    <title>Ubuntu系统挂载Windows共享文件夹通过credential文件认证</title>
    <link href="https://booksword.top/2022/11/29/ubuntu-mount-windows-share-drive-with-credential-file/"/>
    <id>https://booksword.top/2022/11/29/ubuntu-mount-windows-share-drive-with-credential-file/</id>
    <published>2022-11-29T07:55:00.000Z</published>
    <updated>2023-04-06T08:07:18.796Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h3 id="问题"><a class="header-anchor" href="#问题">¶</a>问题</h3><p>要把Windows的共享文件夹挂载到Ubuntu系统的电脑里面，使用命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo mount -t cifs //&lt;ip or host&gt;/&lt;source folder&gt; &lt;destiny folder&gt; -o username=&#x27;xxx&#x27;&#x27;,password=&#x27;xxx&#x27;,vers=2.0</span><br></pre></td></tr></table></figure><p>可以，但是使用密码文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo mount -t cifs //&lt;ip or host&gt;/&lt;source folder&gt; &lt;destiny folder&gt; -o credentials=/xxx/.smbcredentials,vers=2.0</span><br></pre></td></tr></table></figure><p>报如下错误</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mount: &lt;destiny folder&gt;: bad option; for several filesystems (e.g. nfs, cifs) you might need a /sbin/mount.&lt;type&gt; helper program.</span><br></pre></td></tr></table></figure><h3 id="解决"><a class="header-anchor" href="#解决">¶</a>解决</h3><p>安装<code>cifs-util</code>包。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install cifs-util</span><br></pre></td></tr></table></figure><p>安装后重新挂载，成功~</p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css&quot;&gt;&lt;h3 id=&quot;问题&quot;&gt;&lt;a class=&quot;header-anchor&quot; href</summary>
      
    
    
    
    <category term="Linux" scheme="https://booksword.top/categories/Linux/"/>
    
    
  </entry>
  
  <entry>
    <title>gitignore文件的顺序</title>
    <link href="https://booksword.top/2022/11/22/gitignore%E6%96%87%E4%BB%B6%E7%9A%84%E9%A1%BA%E5%BA%8F/"/>
    <id>https://booksword.top/2022/11/22/gitignore%E6%96%87%E4%BB%B6%E7%9A%84%E9%A1%BA%E5%BA%8F/</id>
    <published>2022-11-22T09:26:00.000Z</published>
    <updated>2022-11-22T09:32:01.854Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>发现<code>.gitignore</code>里面条目顺序是有意义的。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">*.c</span><br><span class="line">*.cpp</span><br><span class="line">!skts.c</span><br><span class="line">!np_datetime.c</span><br><span class="line">!np_datetime_strings.c</span><br></pre></td></tr></table></figure><p>则<code>!</code>的几项生效</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">$ git status</span><br><span class="line">On branch main</span><br><span class="line">Your branch is up to date with &#x27;origin/main&#x27;.</span><br><span class="line"></span><br><span class="line">Changes not staged for commit:</span><br><span class="line">  (use &quot;git add &lt;file&gt;...&quot; to update what will be committed)</span><br><span class="line">  (use &quot;git restore &lt;file&gt;...&quot; to discard changes in working directory)</span><br><span class="line">        modified:   .gitignore</span><br><span class="line"></span><br><span class="line">Untracked files:</span><br><span class="line">  (use &quot;git add &lt;file&gt;...&quot; to include in what will be committed)</span><br><span class="line">        __init__.pxd</span><br><span class="line">        pandas_helper/_libs/tslibs/src/datetime/np_datetime.c</span><br><span class="line">        pandas_helper/_libs/tslibs/src/datetime/np_datetime_strings.c</span><br><span class="line"></span><br><span class="line">no changes added to commit (use &quot;git add&quot; and/or &quot;git commit -a&quot;)</span><br></pre></td></tr></table></figure><p>如果反过来</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">!skts.c</span><br><span class="line">!np_datetime.c</span><br><span class="line">!np_datetime_strings.c</span><br><span class="line">*.c</span><br><span class="line">*.cpp</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css&quot;&gt;&lt;p&gt;发现&lt;code&gt;.gitignore&lt;/code&gt;里面条目顺序是有意义的。&lt;</summary>
      
    
    
    
    <category term="Programming" scheme="https://booksword.top/categories/Programming/"/>
    
    <category term="Git" scheme="https://booksword.top/categories/Programming/Git/"/>
    
    
  </entry>
  
  <entry>
    <title>设置局域网和广域网远程开机（Wake on Lan）</title>
    <link href="https://booksword.top/2022/11/22/wakeonlan/"/>
    <id>https://booksword.top/2022/11/22/wakeonlan/</id>
    <published>2022-11-22T09:25:00.000Z</published>
    <updated>2022-11-29T08:38:51.621Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h2 id="需求"><a class="header-anchor" href="#需求">¶</a>需求</h2><p>因为需要随时远程访问家里计算机，因此希望出远门后即便出现家里停电等情况，家里计算机意外关机，也能够通过远程唤醒。</p><h2 id="网上的资料"><a class="header-anchor" href="#网上的资料">¶</a>网上的资料</h2><p>网上的解决方案：</p><ol><li>Wake on LAN (WOL)<sup class="footnote-ref"><a href="#fn1" id="fnref1">[1]</a></sup>: 本文的方案。通过向目标机发送一个魔幻数据包（Magic Packet）进行远程唤醒，需要主板和网卡支持。本意设计是在局域网内，通过端口映射等方法也可以在广域网生效（需要公网静态IP或者公网动态IP+DDNS）。</li><li>各种开机棒等： 同样需要主板和网卡的支持，同时需要购买格外硬件，还要在硬件厂商的网站注册以让硬件厂商能直接访问对应硬件，安全性也是个顾虑。</li><li>智能插座，一些DIY的能在线控制的继电器之类的设备。</li></ol><p>考虑需要远程的连接的PC都支持WOL，研究采用WOL的方案。</p><h2 id="实现"><a class="header-anchor" href="#实现">¶</a>实现</h2><h3 id="局域网唤醒"><a class="header-anchor" href="#局域网唤醒">¶</a>局域网唤醒</h3><h4 id="主板BIOS设置"><a class="header-anchor" href="#主板BIOS设置">¶</a>主板BIOS设置</h4><ul><li>开机按<code>Del</code>（根据主板品牌可能是其他功能键，建议查阅主板说明书）进入BIOS设置，打开设备唤醒中的PCIE设备唤醒选项。根据品牌可能被称为<ul><li>Boot on LAN</li><li>Wake on LAN</li><li>PME Event WakeUp,</li><li>Resume by MAC LAN</li><li>Wake-Up by PCI card</li><li>Wake Up On PCI PME</li><li>Power On by PCI Card</li><li>WakeUp by PME of PCI</li><li>Power On By PCI Devices</li><li>WakeUp by Onborad LAN</li><li>Resume By PCI or PCI-E Ddevice<br>等等。</li></ul></li><li>如果有的话，关闭Fast Boot或类似选项。</li><li>如果有的话，关闭EMP。</li></ul><h4 id="目标机系统设置"><a class="header-anchor" href="#目标机系统设置">¶</a>目标机系统设置</h4><h6 id="Windows-10"><a class="header-anchor" href="#Windows-10">¶</a>Windows 10</h6><ul><li>首先，更新网卡驱动到最新版本。<ul><li>建议去主板/网卡的官网下载。Windows集成的更新并不及时。</li></ul></li><li>搜索框搜“设备管理器（Device Manager）”并打开。</li><li>在“网络适配器（Network adapters）”下面找到有线网卡，右键菜单“属性（Properties）”。<ul><li>进入“高级（Advanced）”选项卡，开启“Wait for Link”, “Wake on Link Settings”, “Wake on Magic Packet”, “Wake on Pattern Match”。</li><li>进入“电源管理（Power Management）”选项卡，把三个复选框全部选上。</li></ul></li></ul><h6 id="Ubuntu-22-04"><a class="header-anchor" href="#Ubuntu-22-04">¶</a>Ubuntu 22.04</h6><ul><li>首先查看本机的各网卡名称和MAC地址<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">$ ifconfig</span><br><span class="line">enp5s0: flags=4099&lt;UP,BROADCAST,MULTICAST&gt;  mtu xxxx</span><br><span class="line">        ether xx:xx:xx:xx:xx:xx  txqueuelen 1000  (Ethernet)</span><br><span class="line">        RX packets 0  bytes 0 (0.0 B)</span><br><span class="line">        RX errors 0  dropped 0  overruns 0  frame 0</span><br><span class="line">        TX packets 0  bytes 0 (0.0 B)</span><br><span class="line">        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0</span><br><span class="line">        device memory 0xfc000000-fc01ffff</span><br><span class="line"></span><br><span class="line">enpxxx: flags=4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;  mtu 1500</span><br><span class="line">        inet 192.168.x.xxx  netmask 255.255.255.0  broadcast 192.168.x.255</span><br><span class="line">        inet6 xxxx:1b43  prefixlen 64  scopeid 0x0&lt;global&gt;</span><br><span class="line">        inet6 fe80::271e:d40:2e18:9c6  prefixlen 64  scopeid 0x20&lt;<span class="built_in">link</span>&gt;</span><br><span class="line">        inet6 xxxx:7bb2  prefixlen 64  scopeid 0x0&lt;global&gt;</span><br><span class="line">        inet6 xxxx:9b94  prefixlen 64  scopeid 0x0&lt;global&gt;</span><br><span class="line">        inet6 xxxx:99f1  prefixlen 64  scopeid 0x0&lt;global&gt;</span><br><span class="line">        ether xx:xx:xx:xx:xx:xx  txqueuelen 1000  (Ethernet)</span><br><span class="line">        RX packets 53552819  bytes 30767884934 (30.7 GB)</span><br><span class="line">        RX errors 0  dropped 671  overruns 0  frame 0</span><br><span class="line">        TX packets 72797481  bytes 71048847776 (71.0 GB)</span><br><span class="line">        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0</span><br><span class="line"></span><br><span class="line">...</span><br></pre></td></tr></table></figure>从上面信息查出本机有线网网卡名称为<code>enpxxx</code>。</li><li>然后使用<code>ethtool</code>查看是否开启了WOL。<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"> $ sudo ethtool enpxxx | grep Wake</span><br><span class="line">Supports Wake-on: pumbg</span><br><span class="line">Wake-on: g</span><br></pre></td></tr></table></figure>这样表示支持WOL且已经开启。<ul><li>如果显示<code>Wake-on: d</code>则表示WOL被禁用，需使用命令<code>sudo ethtool -s enpxxx wol g</code>开启。</li><li>如未安装<code>ethtool</code>可以<code>sudo apt install ethtool</code>安装。</li></ul></li></ul><h4 id="控制软件"><a class="header-anchor" href="#控制软件">¶</a>控制软件</h4><h6 id="Android平台"><a class="header-anchor" href="#Android平台">¶</a>Android平台</h6><p>笔者使用的是Wake on LAN v1.35，官网已不可考，吾爱破解有个<a href="https://www.52pojie.cn/thread-1609028-1-1.html">帖子</a>提供了apk文件的下载。<br>点&quot;+&quot;按钮新建，选择“ENTER MANUALLY”，起个名字填入MAC地址即可。填写完成后<code>ADD DEVICE</code>，就会显示在列表里。<br><img src="/images/2022/11/wol_lan_control_android.jpg" alt=""><img src="/images/2022/11/wol_mainlist_control_android.jpg" alt=""></p><p>将手机连接到目标机同一局域网内的WiFi上，点击条目即可唤醒。</p><h3 id="广域网唤醒"><a class="header-anchor" href="#广域网唤醒">¶</a>广域网唤醒</h3><h4 id="公网网址"><a class="header-anchor" href="#公网网址">¶</a>公网网址</h4><p>国内运营商对家用网络一般给的都是内网IP，具体可以到运营商给的光猫里查看。如果申请了桥接，那么需要到连接光猫的路由器里查看。</p><ul><li>如果网址以10.或者172.开头，则多半是内网IP。</li><li>完全确认可以去<a href="https://www.ip138.com/">ip138</a>等网站上查看本机对外的IP，如果和光猫、路由的IP一致则是公网IP，否则是内网IP。</li></ul><h4 id="动态域名"><a class="header-anchor" href="#动态域名">¶</a>动态域名</h4><p>获取公网IP之后，需要到路由器所支持的动态域名商那里申请一个动态域名。如对联通的光猫，看他支持ORAY（其实是向日葵、花生壳等几家的合体）就去ORAY注册个账户，然后申请个花生壳的动态域名，申请后在路由里面按要求填写申请到的域名，ORAY的用户名，密码。</p><h4 id="路由器设置"><a class="header-anchor" href="#路由器设置">¶</a>路由器设置</h4><ul><li>设备的MAC地址与路由器分配的IP绑定。<br><img src="/images/2022/11/ipmac.png" alt=""></li><li>路由器需要设置端口转发，将外部发送过来的Magic Packet转发到目标机的端口9。</li></ul><hr class="footnotes-sep"><section class="footnotes"><ol class="footnotes-list"><li id="fn1" class="footnote-item"><p><a href="https://wiki.wireshark.org/WakeOnLAN">wiki.wireshak: WakeOnLAN</a> <a href="#fnref1" class="footnote-backref">↩︎</a></p></li></ol></section>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css&quot;&gt;&lt;h2 id=&quot;需求&quot;&gt;&lt;a class=&quot;header-anchor&quot; href</summary>
      
    
    
    
    <category term="其他" scheme="https://booksword.top/categories/%E5%85%B6%E4%BB%96/"/>
    
    
  </entry>
  
</feed>
