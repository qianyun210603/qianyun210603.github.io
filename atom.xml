<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>书剑阁</title>
  
  <subtitle>技术の记录本</subtitle>
  <link href="https://booksword.top/atom.xml" rel="self"/>
  
  <link href="https://booksword.top/"/>
  <updated>2025-02-13T07:29:04.602Z</updated>
  <id>https://booksword.top/</id>
  
  <author>
    <name>BookSword</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Qt6免继承实现QTableWidget右键菜单</title>
    <link href="https://booksword.top/2025/02/13/Qt6%E5%85%8D%E7%BB%A7%E6%89%BF%E5%AE%9E%E7%8E%B0QTableWidget%E5%8F%B3%E9%94%AE%E8%8F%9C%E5%8D%95/"/>
    <id>https://booksword.top/2025/02/13/Qt6%E5%85%8D%E7%BB%A7%E6%89%BF%E5%AE%9E%E7%8E%B0QTableWidget%E5%8F%B3%E9%94%AE%E8%8F%9C%E5%8D%95/</id>
    <published>2025-02-13T07:28:23.589Z</published>
    <updated>2025-02-13T07:29:04.602Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>通过事件过滤器（<code>eventFilter</code>）来实现右键菜单并显示行号。这种方法更加灵活，适合在已有的 <code>QTableWidget</code> 上添加功能，而无需修改或继承它。</p><p>以下是完整的示例代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QApplication&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QTableWidget&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QMenu&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QContextMenuEvent&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QMessageBox&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QHBoxLayout&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QWidget&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span> </span>&#123;</span><br><span class="line">    <span class="function">QApplication <span class="title">app</span><span class="params">(argc, argv)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建主窗口</span></span><br><span class="line">    QWidget window;</span><br><span class="line">    QHBoxLayout *layout = <span class="keyword">new</span> <span class="built_in">QHBoxLayout</span>(&amp;window);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建 QTableWidget</span></span><br><span class="line">    QTableWidget *tableWidget = <span class="keyword">new</span> <span class="built_in">QTableWidget</span>(<span class="number">5</span>, <span class="number">3</span>);</span><br><span class="line">    tableWidget-&gt;<span class="built_in">setHorizontalHeaderLabels</span>(&#123;<span class="string">&quot;Column 1&quot;</span>, <span class="string">&quot;Column 2&quot;</span>, <span class="string">&quot;Column 3&quot;</span>&#125;);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 填充一些数据</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> row = <span class="number">0</span>; row &lt; <span class="number">5</span>; ++row) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> col = <span class="number">0</span>; col &lt; <span class="number">3</span>; ++col) &#123;</span><br><span class="line">            QTableWidgetItem *item = <span class="keyword">new</span> <span class="built_in">QTableWidgetItem</span>(<span class="built_in">tr</span>(<span class="string">&quot;Item %1-%2&quot;</span>).<span class="built_in">arg</span>(row).<span class="built_in">arg</span>(col));</span><br><span class="line">            tableWidget-&gt;<span class="built_in">setItem</span>(row, col, item);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将 QTableWidget 添加到布局中</span></span><br><span class="line">    layout-&gt;<span class="built_in">addWidget</span>(tableWidget);</span><br><span class="line">    window.<span class="built_in">setLayout</span>(layout);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 安装事件过滤器</span></span><br><span class="line">    tableWidget-&gt;<span class="built_in">viewport</span>()-&gt;<span class="built_in">installEventFilter</span>(&amp;window);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 事件过滤器实现</span></span><br><span class="line">    window.<span class="built_in">installEventFilter</span>(tableWidget);</span><br><span class="line">    QObject::<span class="built_in">connect</span>(tableWidget, &amp;QTableWidget::customContextMenuRequested, [tableWidget](<span class="type">const</span> QPoint &amp;pos) &#123;</span><br><span class="line">        QTableWidgetItem *item = tableWidget-&gt;<span class="built_in">itemAt</span>(pos);</span><br><span class="line">        <span class="keyword">if</span> (item) &#123;</span><br><span class="line">            <span class="type">int</span> row = item-&gt;<span class="built_in">row</span>();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 创建右键菜单</span></span><br><span class="line">            QMenu menu;</span><br><span class="line">            QAction *showRowAction = menu.<span class="built_in">addAction</span>(<span class="built_in">tr</span>(<span class="string">&quot;Show Row Number&quot;</span>));</span><br><span class="line">            QObject::<span class="built_in">connect</span>(showRowAction, &amp;QAction::triggered, [row]() &#123;</span><br><span class="line">                QMessageBox::<span class="built_in">information</span>(<span class="literal">nullptr</span>, <span class="built_in">tr</span>(<span class="string">&quot;Row Number&quot;</span>), <span class="built_in">tr</span>(<span class="string">&quot;You clicked on row: %1&quot;</span>).<span class="built_in">arg</span>(row));</span><br><span class="line">            &#125;);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 显示菜单</span></span><br><span class="line">            menu.<span class="built_in">exec</span>(tableWidget-&gt;<span class="built_in">viewport</span>()-&gt;<span class="built_in">mapToGlobal</span>(pos));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 启用右键菜单</span></span><br><span class="line">    tableWidget-&gt;<span class="built_in">setContextMenuPolicy</span>(Qt::CustomContextMenu);</span><br><span class="line"></span><br><span class="line">    window.<span class="built_in">show</span>();</span><br><span class="line">    <span class="keyword">return</span> app.<span class="built_in">exec</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="代码说明："><a class="header-anchor" href="#代码说明：">¶</a>代码说明：</h3><ol><li><p><strong>事件过滤器</strong>：</p><ul><li>我们通过 <code>installEventFilter</code> 将事件过滤器安装到 <code>QTableWidget</code> 的视口（<code>viewport()</code>）上。</li><li>在事件过滤器中，我们可以捕获右键点击事件并显示菜单。</li></ul></li><li><p><strong>右键菜单</strong>：</p><ul><li>使用 <code>QMenu</code> 创建一个右键菜单。</li><li>通过 <code>QTableWidget::itemAt</code> 获取当前点击的单元格，并提取行号。</li><li>添加一个菜单项来显示行号，点击后会弹出一个消息框。</li></ul></li><li><p><strong><code>setContextMenuPolicy</code></strong>：</p><ul><li>设置 <code>QTableWidget</code> 的上下文菜单策略为 <code>Qt::CustomContextMenu</code>，以便触发 <code>customContextMenuRequested</code> 信号。</li></ul></li><li><p><strong>信号与槽</strong>：</p><ul><li>连接 <code>customContextMenuRequested</code> 信号，在右键点击时显示菜单。</li></ul></li></ol><h3 id="运行效果："><a class="header-anchor" href="#运行效果：">¶</a>运行效果：</h3><ul><li>右键点击表格中的任意单元格，会弹出一个菜单。</li><li>选择 “Show Row Number” 菜单项，会弹出一个消息框显示当前点击的行号。</li></ul><h3 id="优点："><a class="header-anchor" href="#优点：">¶</a>优点：</h3><ul><li>不需要继承 <code>QTableWidget</code>，适合在已有代码基础上扩展功能。</li><li>更加灵活，可以轻松应用到其他控件上。</li></ul><p>如果不想修改现有代码结构，这种方法是非常合适的！</p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css&quot;&gt;&lt;p&gt;通过事件过滤器（&lt;code&gt;eventFilter&lt;/code&gt;）来实现右键</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Windows 11编译安装pkg-config</title>
    <link href="https://booksword.top/2024/12/07/Windows%2011%E7%BC%96%E8%AF%91%E5%AE%89%E8%A3%85pkg-config/"/>
    <id>https://booksword.top/2024/12/07/Windows%2011%E7%BC%96%E8%AF%91%E5%AE%89%E8%A3%85pkg-config/</id>
    <published>2024-12-06T19:28:13.000Z</published>
    <updated>2024-12-15T08:45:37.601Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>待完成</p><h2 id="参考资料"><a class="header-anchor" href="#参考资料">¶</a>参考资料</h2><blockquote><ul><li><a href=""></a></li><li><a href=""></a></li></ul></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css&quot;&gt;&lt;p&gt;待完成&lt;/p&gt;
&lt;h2 id=&quot;参考资料&quot;&gt;&lt;a class=&quot;header</summary>
      
    
    
    
    <category term="Programming" scheme="https://booksword.top/categories/Programming/"/>
    
    <category term="C++" scheme="https://booksword.top/categories/Programming/C/"/>
    
    
  </entry>
  
  <entry>
    <title>Windows 11编译Boost (v1.86.0)库并加入系统路径</title>
    <link href="https://booksword.top/2024/12/07/Win11_build_boost/"/>
    <id>https://booksword.top/2024/12/07/Win11_build_boost/</id>
    <published>2024-12-06T18:33:22.000Z</published>
    <updated>2024-12-07T02:43:49.190Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><ol><li>去官网下载源码压缩包并解压；</li><li>打开Developer Command Prompt for VS 2022，切换到解压后的目录；</li><li>运行以下命令：<figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> installed</span><br><span class="line">bootstrap.bat</span><br><span class="line">b2 install variant=release link=shared,static threading=multi address-model=<span class="number">64</span> --prefix=installed</span><br></pre></td></tr></table></figure><ul><li><code>installed</code>为希望安装编译好的boost头文件、库文件的目录，这里是相对路径，也可以是绝对路径</li></ul></li><li>搜索栏中搜索<code>Environment Variable</code>，打开Windows 11的环境变量配置，新增<code>BOOST_ROOT</code>指向3中的安装路径。</li></ol><h2 id="参考资料"><a class="header-anchor" href="#参考资料">¶</a>参考资料</h2><blockquote><ul><li><a href="https://www.boost.org/build/doc/html/bbv2/overview/invocation.html">boost - Invocation</a></li></ul></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css&quot;&gt;&lt;ol&gt;
&lt;li&gt;去官网下载源码压缩包并解压；&lt;/li&gt;
&lt;li&gt;打开Develo</summary>
      
    
    
    
    <category term="Programming" scheme="https://booksword.top/categories/Programming/"/>
    
    <category term="C++" scheme="https://booksword.top/categories/Programming/C/"/>
    
    
  </entry>
  
  <entry>
    <title>windows_build_glib</title>
    <link href="https://booksword.top/2024/12/05/windows_build_glib/"/>
    <id>https://booksword.top/2024/12/05/windows_build_glib/</id>
    <published>2024-12-05T05:27:50.000Z</published>
    <updated>2024-12-05T13:28:50.784Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">meson .. --buildtype=&lt;release|debug|debugoptimized&gt; --prefix=&lt;path&gt;</span><br><span class="line">meson install</span><br></pre></td></tr></table></figure><h2 id="参考资料"><a class="header-anchor" href="#参考资料">¶</a>参考资料</h2><blockquote><ul><li><a href="https://github.com/GNOME/glib/blob/main/docs/win32-build.md">Building with Visual Studio 2015 or newer</a></li><li><a href=""></a></li></ul></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css&quot;&gt;&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;tabl</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>嵌入的Qt对话框输入一些东西相关(.exec/.show etc)</title>
    <link href="https://booksword.top/2024/11/09/%E5%B5%8C%E5%85%A5%E7%9A%84Qt%E5%AF%B9%E8%AF%9D%E6%A1%86%E8%BE%93%E5%85%A5%E4%B8%80%E4%BA%9B%E4%B8%9C%E8%A5%BF%E7%9B%B8%E5%85%B3/"/>
    <id>https://booksword.top/2024/11/09/%E5%B5%8C%E5%85%A5%E7%9A%84Qt%E5%AF%B9%E8%AF%9D%E6%A1%86%E8%BE%93%E5%85%A5%E4%B8%80%E4%BA%9B%E4%B8%9C%E8%A5%BF%E7%9B%B8%E5%85%B3/</id>
    <published>2024-11-08T20:24:29.000Z</published>
    <updated>2024-11-30T03:41:18.065Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>基本框架</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment"># some content load from remote data service</span></span><br><span class="line"><span class="comment"># ... code ignored ...</span></span><br><span class="line"></span><br><span class="line">app = QApplication([])</span><br><span class="line">dialog = ContentEditDialog(original_content)</span><br><span class="line">dialog.<span class="built_in">exec</span>()</span><br><span class="line"><span class="comment"># dialog.show()</span></span><br><span class="line"><span class="comment"># app.exec()</span></span><br><span class="line"></span><br><span class="line">updated_content = dialog.collect_edited_content()</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(updated_content)</span><br></pre></td></tr></table></figure><ul><li>只有<code>dialog.exec()</code>：程序阻塞，编辑生效。</li><li>只有<code>dialog.show()</code>: 程序不阻塞，对话框一闪即逝，无法编辑。</li><li><code>dialog.exec()</code>和<code>app.exec()</code>: 对话框关闭后程序卡死。</li><li><code>dialog.show()</code>和<code>app.exec()</code>: 程序阻塞，编辑生效。</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css&quot;&gt;&lt;p&gt;基本框架&lt;/p&gt;
&lt;figure class=&quot;highlight pyth</summary>
      
    
    
    
    <category term="Programming" scheme="https://booksword.top/categories/Programming/"/>
    
    <category term="Python" scheme="https://booksword.top/categories/Programming/Python/"/>
    
    
  </entry>
  
  <entry>
    <title>Windows配置nvm，nodejs</title>
    <link href="https://booksword.top/2024/11/02/Windows%E9%85%8D%E7%BD%AEnvm%EF%BC%8Cnodejs/"/>
    <id>https://booksword.top/2024/11/02/Windows%E9%85%8D%E7%BD%AEnvm%EF%BC%8Cnodejs/</id>
    <published>2024-11-01T19:43:04.000Z</published>
    <updated>2024-11-02T03:59:05.730Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><ol><li><p>下载<code>nvm</code>安装包：<a href="https://github.com/coreybutler/nvm-windows/releases">下载地址</a>；</p></li><li><p>运行并按步骤提示完成安装，过程中可以指定安装目录；</p></li><li><p>修改配置文件：切到<code>nvm</code>安装目录，打开<code>settings.txt</code></p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">root: F:\App\nvm</span><br><span class="line">path: C:\Program Files\nodejs</span><br><span class="line">node_mirror: https://npmmirror.com/mirrors/node/</span><br><span class="line">npm_mirror: https://npmmirror.com/mirrors/npm/</span><br></pre></td></tr></table></figure><ul><li><code>root</code>：<code>nvm</code>安装的node的存储目录，各版本的<code>nodejs</code>会被安装到<code>root\版本号</code>下面，要和环境变量<code>NVM_HOME</code>一致；</li><li><code>path</code>：目录链接，当运行<code>nvm use xxx</code>时，会将这个链接链接到对应的<code>root\版本号</code>上。要和环境变量<code>NVM_SYMLINK</code>一致，然后<code>%NVM_SYMLINK%</code>要被添加到<code>Path</code>里面；</li><li><code>node_mirror</code>，<code>npm_mirror</code>：node和npm的镜像源，如果官网过慢或无法访问，可以设置这两个。</li></ul></li><li><p>安装<code>nodejs</code>:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nvm install latest</span><br></pre></td></tr></table></figure><p><code>latest</code>可以换成指定的版本号。注意如果第3步中的<code>path</code>设置的目录需要管理员权限的话，这一步也需要用管理员权限的cmd或Terminal或Powershell运行。</p></li><li><p>使用<code>nodejs</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nvm use xxx</span><br></pre></td></tr></table></figure><p><code>xxx</code>为版本号。如果第3步中的<code>path</code>设置的目录需要管理员权限的话，这一步会有UAC提示授权。</p></li></ol><h2 id="参考资料"><a class="header-anchor" href="#参考资料">¶</a>参考资料</h2><blockquote><ul><li><a href="https://nvm.p6p.net/install/windows.html">nvm Windows 安装</a></li><li><a href="https://sebhastian.com/where-does-npm-install-packages/">Where does npm install packages? Find the install path</a></li><li><a href="https://nodejs.cn/npm/getting-started/configuring-your-local-environment/downloading-and-installing-node-js-and-npm/">下载和安装 Node.js 和 npm</a></li></ul></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css&quot;&gt;&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;下载&lt;code&gt;nvm&lt;/code&gt;安装包：&lt;a hre</summary>
      
    
    
    
    <category term="Programming" scheme="https://booksword.top/categories/Programming/"/>
    
    
  </entry>
  
  <entry>
    <title>Windows本地编译pandas源码</title>
    <link href="https://booksword.top/2024/10/26/Windows%E6%9C%AC%E5%9C%B0%E7%BC%96%E8%AF%91pandas%E6%BA%90%E7%A0%81/"/>
    <id>https://booksword.top/2024/10/26/Windows%E6%9C%AC%E5%9C%B0%E7%BC%96%E8%AF%91pandas%E6%BA%90%E7%A0%81/</id>
    <published>2024-10-26T02:03:02.000Z</published>
    <updated>2024-11-02T03:34:12.353Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><ol><li><p>从pandas的GitHub上克隆源码；</p></li><li><p>使用源码目录里面的<code>environment.yml</code>建立一个新env；（否则会破坏现有环境，因为pandas编译要设很多临时环境变量）;</p> <figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda env create --file environment.yml</span><br></pre></td></tr></table></figure><p>这会自动创建名为<code>pandas-dev</code>的环境并安装所需依赖，但还差一个<code>meson</code>，切换到<code>pandas-dev</code>，使用如下命令安装：</p> <figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">conda activate pandas-dev</span><br><span class="line">conda install meson-python</span><br></pre></td></tr></table></figure></li><li><p>切换到克隆下来的源码目录，运行</p> <figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># Build and install pandas</span><br><span class="line"># By default, this will <span class="built_in">print</span> verbose output</span><br><span class="line"># showing the &quot;rebuild&quot; taking place on import (see section below <span class="keyword">for</span> explanation)</span><br><span class="line"># <span class="keyword">If</span> you <span class="keyword">do</span> <span class="keyword">not</span> want to see this, omit everything after --no-build-isolation</span><br><span class="line">python -m pip install -ve . --no-build-isolation -Ceditable-verbose=true</span><br></pre></td></tr></table></figure><p>这一步踩了一些坑，这里说下解决方法：</p><ul><li>找不到<code>cl.exe</code>。<br>这是因为Visual Studio或者Build Tools for Visual Studio 2022的安装目录没有被加入系统目录。找到安装目录，然后导引到<code>VC\Tools\MSVC\14.xxxx\bin\Hostx86\x86\</code>，<code>cl.exe</code>就在这个目录里面，将其加入系统的<code>Path</code>环境变量。其中14.xxxx是版本号，<code>Hostx86\x86\</code>也可以是<code>Hostx64\x64\</code>，看想用32位编译器还是64位编译器。</li><li>找不到<code>MSVCRT.lib</code>（或其他系统<code>lib</code>文件）。这里要检查第2步中<code>activate</code>的输出，一般是未能找到所需的MSVC编译器版本，这时第2步里面设置环境变量就会显示找不到<code>vcvars64.bat</code>。这里面需要注意pandas需要用VS2019的Build Toolset (v142)，所以如果之前没有安装需要用Visual Studio Installer补上。<br><img src="/2024/10/26/Windows%E6%9C%AC%E5%9C%B0%E7%BC%96%E8%AF%91pandas%E6%BA%90%E7%A0%81/1.png" alt="alt text"><br>注意一定要用<code>Desktop development with C++</code>里面的<code>MSVC v142 - VS2019 C++ x64/x86 build tools</code>。原因是<code>pandas</code>给的conda脚本是根据VS的Component ID找VS安装目录的。只有这个Build tools符合脚本要求。如果安装的是<code>Individual components</code>里面的v142，那还是找不到，ID不一样。</li></ul></li></ol><h2 id="参考资料"><a class="header-anchor" href="#参考资料">¶</a>参考资料</h2><blockquote><ul><li><a href="https://pandas.pydata.org/docs/development/contributing_environment.html">Creating a development environment</a></li><li><a href="https://learn.microsoft.com/en-us/visualstudio/install/workload-component-id-vs-build-tools?view=vs-2022">Visual Studio Build Tools component directory</a></li></ul></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css&quot;&gt;&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;从pandas的GitHub上克隆源码；&lt;/p&gt;
&lt;/l</summary>
      
    
    
    
    <category term="Programming" scheme="https://booksword.top/categories/Programming/"/>
    
    <category term="Python" scheme="https://booksword.top/categories/Programming/Python/"/>
    
    
  </entry>
  
  <entry>
    <title>Windows端口成为系统保留端口的问题</title>
    <link href="https://booksword.top/2024/10/20/Windows%E7%AB%AF%E5%8F%A3%E6%88%90%E4%B8%BA%E7%B3%BB%E7%BB%9F%E4%BF%9D%E7%95%99%E7%AB%AF%E5%8F%A3%E7%9A%84%E9%97%AE%E9%A2%98/"/>
    <id>https://booksword.top/2024/10/20/Windows%E7%AB%AF%E5%8F%A3%E6%88%90%E4%B8%BA%E7%B3%BB%E7%BB%9F%E4%BF%9D%E7%95%99%E7%AB%AF%E5%8F%A3%E7%9A%84%E9%97%AE%E9%A2%98/</id>
    <published>2024-10-20T05:15:20.000Z</published>
    <updated>2024-10-20T13:27:44.797Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h2 id="问题背景"><a class="header-anchor" href="#问题背景">¶</a>问题背景</h2><p>因为要使用Redis，所以装了WSL，但启动后发现SS打不开了，提示xxx端口被系统保留。</p><p>参考文后所附文章：</p><ul><li>Windows 中有一个「TCP 动态端口范围」，处在这个范围内的端口，有时候会被一些服务占用。在 Windows Vista（或 Windows Server 2008）之前，动态端口范围是 1025 到 5000；在 Windows Vista（或 Windows Server 2008）之后，新的默认起始端口为 49152，新的默认结束端口为 65535。</li><li>如果安装了 Hyper-V，那么 Hyper-V 会为容器宿主网络服务（Windows Container Host Networking Service）随机保留一些端口号使用。</li></ul><h2 id="验证问题"><a class="header-anchor" href="#验证问题">¶</a>验证问题</h2><h5 id="查看当前被占用端口"><a class="header-anchor" href="#查看当前被占用端口">¶</a>查看当前被占用端口</h5><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">netstat -aon | <span class="built_in">findstr</span> &lt;端口号&gt;</span><br></pre></td></tr></table></figure><p>返回空，说明当前并没有程序占用目标端口。</p><h5 id="查看当前被Window保留的端口"><a class="header-anchor" href="#查看当前被Window保留的端口">¶</a>查看当前被Window保留的端口</h5><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">netsh int ipv4 show excludedportrange protocol=tcp</span><br></pre></td></tr></table></figure><p>返回</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Protocol tcp Port Exclusion Ranges</span><br><span class="line"></span><br><span class="line">Start Port    End Port</span><br><span class="line">----------    --------</span><br><span class="line">     xxx1       xxx2     *</span><br><span class="line">     xxx3       xxx4</span><br><span class="line"></span><br><span class="line">* - Administered port exclusions.</span><br></pre></td></tr></table></figure><p>发现目标端口确实在被保留的范围内。这是因为使用WSL需要Hyper-V服务导致的。</p><h6 id="设置系统可保留的端口范围，避开常用端口"><a class="header-anchor" href="#设置系统可保留的端口范围，避开常用端口">¶</a>设置系统可保留的端口范围，避开常用端口</h6><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">netsh int ipv4 <span class="built_in">set</span> dynamic tcp <span class="built_in">start</span>=xxxxx num=yyyyy</span><br><span class="line">netsh int ipv6 <span class="built_in">set</span> dynamic tcp <span class="built_in">start</span>=xxxxx num=yyyyy</span><br></pre></td></tr></table></figure><p>这两个命令分别设定了ipv4和v6系统可保留的端口范围：从xxxxx开始的yyyyy个。</p><p>然后还需要重启<code>winnat</code>以释放原保留端口。</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">net</span> stop winnat</span><br><span class="line"><span class="built_in">net</span> <span class="built_in">start</span> winnat</span><br></pre></td></tr></table></figure><h2 id="参考资料"><a class="header-anchor" href="#参考资料">¶</a>参考资料</h2><blockquote><ul><li><a href="https://zhuanlan.zhihu.com/p/474392069">解决 Windows 10 端口被 Hyper-V 随机保留（占用）的问题</a></li></ul></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css&quot;&gt;&lt;h2 id=&quot;问题背景&quot;&gt;&lt;a class=&quot;header-anchor&quot; hr</summary>
      
    
    
    
    <category term="其他" scheme="https://booksword.top/categories/%E5%85%B6%E4%BB%96/"/>
    
    
  </entry>
  
  <entry>
    <title>Github：解除Fork关系</title>
    <link href="https://booksword.top/2024/09/26/github_detach_fork/"/>
    <id>https://booksword.top/2024/09/26/github_detach_fork/</id>
    <published>2024-09-26T00:27:50.000Z</published>
    <updated>2024-09-26T08:46:17.087Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>开发者在利用GitHub进行项目开发时，常会遇到与Fork操作相关的一系列挑战，尤其是在项目独立发展后，这些挑战尤为突出。以下是几个关键问题及其有条理的重述：</p><h5 id="1-项目独立发展后的管理难题"><a class="header-anchor" href="#1-项目独立发展后的管理难题">¶</a>1. <strong>项目独立发展后的管理难题</strong></h5><ul><li><strong>深度定制与分化</strong>：最初通过Fork一个仓库开始的项目，随着时间推移，可能经历了从功能扩展到开发语言的变更，导致该仓库与原始父仓库在各个方面都已显著分化，各自独立发展。</li></ul><h5 id="2-Pull-Request的误操作风险"><a class="header-anchor" href="#2-Pull-Request的误操作风险">¶</a>2. <strong>Pull Request的误操作风险</strong></h5><ul><li><strong>默认目标分支问题</strong>：由于项目是从Fork开始的，每次创建Pull Request（PR）时，GitHub默认将父仓库作为目标分支，这增加了不小心将更改提交到父仓库的风险，可能导致不必要的混乱或冲突。</li></ul><h5 id="3-社区与贡献度显示的局限性"><a class="header-anchor" href="#3-社区与贡献度显示的局限性">¶</a>3. <strong>社区与贡献度显示的局限性</strong></h5><ul><li><strong>贡献者识别缺失</strong>：在Fork的仓库中，即使有人做出了重要贡献，这些贡献在GitHub上可能无法被正确归因，因为系统主要基于原始仓库来追踪贡献者。</li><li><strong>项目影响力不明</strong>：此外，由于Fork的仓库与父仓库在GitHub上的关联，很难直观地展示该项目被哪些其他项目所依赖或使用，这限制了项目的曝光度和影响力评估。</li></ul><h5 id="4-与父仓库分离的需求"><a class="header-anchor" href="#4-与父仓库分离的需求">¶</a>4. <strong>与父仓库分离的需求</strong></h5><ul><li><strong>缺乏直接解决方案</strong>：鉴于上述问题，开发者可能希望将Fork的仓库与父仓库正式分离，以便更好地管理项目、展示贡献者及影响力。然而，GitHub当前并未提供直接的“Unfork”或“Detach”功能来实现这一需求。</li></ul><h2 id="解决方案"><a class="header-anchor" href="#解决方案">¶</a>解决方案</h2><h4 id="删除并重新创建仓库"><a class="header-anchor" href="#删除并重新创建仓库">¶</a>删除并重新创建仓库</h4><ul><li><p>打开Git Bash。</p></li><li><p>创建一个 Fork 的裸克隆。</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> --bare https://github.com/EXAMPLE-USER/FORK-NAME.git</span><br></pre></td></tr></table></figure></li><li><p>删除Fork的仓库。</p><p>警告：删除 Fork 将永久删除所有相关的拉取请求（Pull Requests）和配置。此操作无法撤销。</p></li><li><p>在同一位置使用相同的名称创建一个新仓库。</p></li><li><p>将仓库镜像推送到相同的远程 URL。</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> FORK-NAME.git</span><br><span class="line">git push --mirror https://github.com/EXAMPLE-USER/FORK-NAME.git</span><br></pre></td></tr></table></figure></li><li><p>删除之前创建的临时本地克隆。</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> ..</span><br><span class="line"><span class="built_in">rm</span> -rf FORK-NAME.git</span><br></pre></td></tr></table></figure></li></ul><p>请注意，上述步骤中的<code>EXAMPLE-USER</code>和<code>FORK-NAME</code>需要替换为您实际的GitHub用户名和Fork仓库的名称。此外，<code>git push --mirror</code>命令会将所有引用（包括分支和标签）以及对象推送到远程仓库，这通常用于镜像或备份目的。在这个场景中，它被用来将本地裸克隆的内容推送到新创建的GitHub仓库中，从而“重建”Fork，但不再与原始仓库有 Fork 关系。</p><p>这种方法的缺点是会丢失原有的Issues，Wiki等。</p><h4 id="联系Github-Support"><a class="header-anchor" href="#联系Github-Support">¶</a>联系Github Support</h4><p>可以直接点击下面链接：</p><p><a href="https://support.github.com/contact?tags=rr-forks&amp;subject=Detach%20Fork&amp;flow=detach_fork">https://support.github.com/contact?tags=rr-forks&amp;subject=Detach Fork&amp;flow=detach_fork</a></p><p>然后根据virtual-assistant的提示一步步进行，之后会自动生成Ticket，等待Github客服处理。一般一个工作日内就能收到解决完毕的邮件了。</p><h2 id="参考资料"><a class="header-anchor" href="#参考资料">¶</a>参考资料</h2><blockquote><ul><li><a href="https://docs.github.com/en/pull-requests/collaborating-with-pull-requests/working-with-forks/detaching-a-fork">Detaching a fork</a></li><li><a href="https://stackoverflow.com/questions/16052477/delete-fork-dependency-of-a-github-repository">Delete fork dependency of a GitHub repository</a></li></ul></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css&quot;&gt;&lt;p&gt;开发者在利用GitHub进行项目开发时，常会遇到与Fork操作相关的一系列挑</summary>
      
    
    
    
    <category term="Programming" scheme="https://booksword.top/categories/Programming/"/>
    
    <category term="Git" scheme="https://booksword.top/categories/Programming/Git/"/>
    
    
  </entry>
  
  <entry>
    <title>properly_terminate_qthread_in_pyqt</title>
    <link href="https://booksword.top/2024/09/16/properly_terminate_qthread_in_pyqt/"/>
    <id>https://booksword.top/2024/09/16/properly_terminate_qthread_in_pyqt/</id>
    <published>2024-09-15T23:42:13.000Z</published>
    <updated>2024-09-16T07:56:53.842Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>如果程序中使用了<code>QThread</code>，需要正确销毁，否则会在程序退出时崩溃。</p><ol><li>定义<code>finished</code>信号在worker类里面；</li><li>在<code>finished</code>对应的槽函数里面调用<code>QThread</code>的<code>quit()</code>和<code>wait()</code>函数；</li><li><code>QThread</code>自带<code>finished</code>函数，将其链接到<code>QThread</code>对应的<code>deleteLater()</code>函数上。</li></ol><p>示例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> PyQt6.QtCore <span class="keyword">import</span> QThread, pyqtSignal, QObject, pyqtSlot, QMetaObject</span><br><span class="line"><span class="keyword">from</span> PyQt6.QtWidgets <span class="keyword">import</span> QApplication, QWidget, QPushButton, QVBoxLayout</span><br><span class="line"><span class="keyword">from</span> pydev_ipython.qt <span class="keyword">import</span> QtCore</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Worker</span>(<span class="title class_ inherited__">QObject</span>):</span><br><span class="line"></span><br><span class="line">    finished = pyqtSignal()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, parent=<span class="literal">None</span></span>):</span><br><span class="line">        <span class="built_in">super</span>(Worker, self).__init__(parent)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">run</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">import</span> time</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">11</span>):</span><br><span class="line">            time.sleep(<span class="number">1</span>)</span><br><span class="line">            <span class="built_in">print</span>(i)</span><br><span class="line">        self.finished.emit()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MainApp</span>(<span class="title class_ inherited__">QWidget</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">super</span>(MainApp, self).__init__()</span><br><span class="line">        self.setWindowTitle(<span class="string">&quot;QThread Example&quot;</span>)</span><br><span class="line">        layout = QVBoxLayout()</span><br><span class="line">        self.setLayout(layout)</span><br><span class="line">        self.setGeometry(<span class="number">100</span>, <span class="number">100</span>, <span class="number">400</span>, <span class="number">200</span>)</span><br><span class="line">        self.btn = QPushButton(<span class="string">&quot;Start Thread&quot;</span>)</span><br><span class="line">        layout.addWidget(self.btn)</span><br><span class="line">        self.btn.clicked.connect(self.start_thread)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">start_thread</span>(<span class="params">self</span>):</span><br><span class="line">        self.worker = Worker(parent=self)</span><br><span class="line">        self.worker.setObjectName(<span class="string">&quot;worker1&quot;</span>)</span><br><span class="line">        self.thread = QThread()</span><br><span class="line">        self.worker.moveToThread(self.thread)</span><br><span class="line">        self.thread.started.connect(self.worker.run)</span><br><span class="line">        <span class="comment"># self.worker.finished.connect(self.on_worker_finished)</span></span><br><span class="line">        self.worker.finished.connect(self.worker.deleteLater)</span><br><span class="line">        self.thread.finished.connect(self.thread.deleteLater)</span><br><span class="line">        QMetaObject.connectSlotsByName(self)</span><br><span class="line">        self.thread.start()</span><br><span class="line"></span><br><span class="line"><span class="meta">    @pyqtSlot()</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">on_worker1_finished</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Worker finished&quot;</span>)</span><br><span class="line">        self.thread.quit()</span><br><span class="line">        self.thread.wait()</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Thread finished&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app = QApplication(sys.argv)</span><br><span class="line">    window = MainApp()</span><br><span class="line">    window.show()</span><br><span class="line">    sys.exit(app.<span class="built_in">exec</span>())</span><br></pre></td></tr></table></figure><h2 id="参考资料"><a class="header-anchor" href="#参考资料">¶</a>参考资料</h2><blockquote><ul><li><a href=""></a></li><li><a href=""></a></li></ul></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css&quot;&gt;&lt;p&gt;如果程序中使用了&lt;code&gt;QThread&lt;/code&gt;，需要正确销毁，否则</summary>
      
    
    
    
    <category term="Programming" scheme="https://booksword.top/categories/Programming/"/>
    
    <category term="Python" scheme="https://booksword.top/categories/Programming/Python/"/>
    
    
  </entry>
  
  <entry>
    <title>【C++知识库】定义指向成员函数的函数指针</title>
    <link href="https://booksword.top/2024/07/04/cpp##function_ptr_to_member_function/"/>
    <id>https://booksword.top/2024/07/04/cpp##function_ptr_to_member_function/</id>
    <published>2024-07-04T01:55:23.000Z</published>
    <updated>2024-07-04T10:04:42.896Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>要在 C++ 中定义一个指向类成员函数的原始函数指针，你需要知道成员函数有一个隐式的 this 指针作为它们的第一个参数，这使它们与自由函数或静态成员函数区别开来。因此，声明指向成员函数的指针的语法包括类名和 ::* 操作符。<br>这是定义指向非静态成员函数的原始函数指针的一般语法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ReturnType (ClassName::*pointerName)(ParameterTypes...) = &amp;ClassName::FunctionName;</span><br></pre></td></tr></table></figure><h3 id="示例："><a class="header-anchor" href="#示例：">¶</a>示例：</h3><p>考虑一个类 MyClass，它有一个成员函数 doSomething：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyClass</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">doSomething</span><span class="params">(<span class="type">int</span> value)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 实现</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>要定义一个指向 doSomething 成员函数的指针，你可以这样写：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">void</span> (MyClass::*funcPtr)(<span class="type">int</span>) = &amp;MyClass::doSomething;</span><br></pre></td></tr></table></figure><h3 id="使用成员函数指针："><a class="header-anchor" href="#使用成员函数指针：">¶</a>使用成员函数指针：</h3><p>要使用这个指针，你需要一个 <code>MyClass</code> 的实例，并使用 <code>.*</code> 操作符（如果你使用的是指向实例的指针，则使用 <code>-&gt;*</code>）来调用函数：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">MyClass myObject;</span><br><span class="line">(myObject.*funcPtr)(<span class="number">10</span>); <span class="comment">// 使用对象实例</span></span><br><span class="line"></span><br><span class="line">MyClass* myObjectPtr = <span class="keyword">new</span> <span class="built_in">MyClass</span>();</span><br><span class="line">(myObjectPtr-&gt;*funcPtr)(<span class="number">10</span>); <span class="comment">// 使用指向对象的指针</span></span><br></pre></td></tr></table></figure><h3 id="关于-Const-成员函数的说明："><a class="header-anchor" href="#关于-Const-成员函数的说明：">¶</a>关于 Const 成员函数的说明：</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">void</span> (MyClass::*funcPtrConst)(<span class="type">int</span>) <span class="type">const</span> = &amp;MyClass::FunctionName;</span><br></pre></td></tr></table></figure><h3 id="静态成员函数："><a class="header-anchor" href="#静态成员函数：">¶</a>静态成员函数：</h3><p>静态成员函数没有 <code>this</code> 指针，可以被常规函数指针指向，不需要类特定的语法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ReturnType (*pointerName)(ParameterTypes...) = &amp;ClassName::StaticFunctionName;</span><br></pre></td></tr></table></figure><h2 id="参考资料"><a class="header-anchor" href="#参考资料">¶</a>参考资料</h2><blockquote><ul><li>Github Copilot</li></ul></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css&quot;&gt;&lt;p&gt;要在 C++ 中定义一个指向类成员函数的原始函数指针，你需要知道成员函数有一</summary>
      
    
    
    
    <category term="Programming" scheme="https://booksword.top/categories/Programming/"/>
    
    <category term="C++" scheme="https://booksword.top/categories/Programming/C/"/>
    
    
  </entry>
  
  <entry>
    <title>【C++知识库】关于std::function的开销</title>
    <link href="https://booksword.top/2024/07/01/cpp##_stdfunction/"/>
    <id>https://booksword.top/2024/07/01/cpp##_stdfunction/</id>
    <published>2024-07-01T02:26:49.000Z</published>
    <updated>2024-07-04T10:04:46.181Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>在 C++ 中使用 <code>std::function</code> 相比于使用函数指针或直接函数调用会引入一定的运行时成本。这个成本主要是由于 <code>std::function</code> 使用的类型擦除机制，使其能够存储、复制和调用任何与其签名匹配的可调用目标（函数、lambda 表达式、bind 表达式或其他函数对象）。以下是导致其运行时成本的关键因素：</p><ol><li>间接性：<code>std::function</code> 涉及一个额外的间接层级。当你调用一个 <code>std::function</code> 时，它内部通过指向虚函数表（vtable）的指针调用存储的可调用对象。这种间接性可以阻止某些编译器优化，如内联，这些优化对于直接函数调用或甚至是函数指针来说更可行。</li><li>堆分配：对于超出小对象优化（SOO）阈值（这是实现定义的）的可调用对象，<code>std::function</code> 可能会执行堆分配。这可能引入动态内存分配/释放的开销，并可能导致堆碎片化。然而，对于小对象，<code>std::function</code> 通常使用一种优化来在栈上存储对象，避免了堆分配。</li><li>类型擦除开销：使 <code>std::function</code> 能够存储任何匹配签名的可调用类型的类型擦除机制也引入了开销。这是因为它必须维护对各种可调用类型的统一接口，这涉及到存储额外的元数据，并可能执行动态类型检查。</li><li>复制/移动操作：复制或移动 <code>std::function</code> 对象可能比简单的函数指针更昂贵，特别是如果存储的可调用对象很大或需要堆分配。成本取决于存储的可调用对象的复制/移动操作的复杂性。</li></ol><p>尽管存在这些开销，<code>std::function</code> 在许多场景中都是非常通用且有用的，例如当你需要存储回调、实现信号-槽机制或处理高阶函数时。它提供的灵活性和类型安全性通常可以证明这些运行时成本是合理的。然而，对于性能关键的代码路径，每个周期都很重要，考虑使用直接函数调用、函数指针或模板基础解决方案可能是更高效的选择，编译器可以对其进行更有效的优化。</p><h2 id="参考资料"><a class="header-anchor" href="#参考资料">¶</a>参考资料</h2><blockquote><ul><li>Github Copilot</li></ul></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css&quot;&gt;&lt;p&gt;在 C++ 中使用 &lt;code&gt;std::function&lt;/code&gt; 相</summary>
      
    
    
    
    <category term="Programming" scheme="https://booksword.top/categories/Programming/"/>
    
    <category term="C++" scheme="https://booksword.top/categories/Programming/C/"/>
    
    
  </entry>
  
  <entry>
    <title>【C++知识库】关于stdafx.h</title>
    <link href="https://booksword.top/2024/07/01/Cpp1##stdafx/"/>
    <id>https://booksword.top/2024/07/01/Cpp1##stdafx/</id>
    <published>2024-06-30T23:36:36.000Z</published>
    <updated>2024-07-01T07:45:14.589Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>  <code>stdafx.h</code>是Visual Studio项目中用于加速构建过程的预编译头文件。<code>stdafx.h</code>的名称是传统上的，来源于Visual Studio的早期版本，但它本身没有任何内在的含义。使用预编译头文件可以显著减少大型项目的编译时间。</p><h3 id="预编译头文件的工作原理"><a class="header-anchor" href="#预编译头文件的工作原理">¶</a>预编译头文件的工作原理</h3><p>  当你编译一个 C++ 程序时，编译器会处理每个编译单元（通常是一个 .cpp 文件）中包含的头文件。这个过程可能非常耗时，特别是对于有许多头文件在多个编译单元中被包含的大型项目。为了优化这一点，引入了预编译头文件的概念。</p><p>  预编译头文件被编译一次，然后在多个编译单元中重用。这意味着，只要这些头文件没有改变，编译器就可以跳过在每个编译单元中处理预编译头文件中包含的头文件，从而加速编译过程。</p><h3 id="stdafx-h和stdafx-cpp"><a class="header-anchor" href="#stdafx-h和stdafx-cpp">¶</a><code>stdafx.h</code>和<code>stdafx.cpp</code></h3><ul><li><code>stdafx.h</code>：这个文件通常包含 C++ 标准库的头文件、外部库的头文件以及其他项目特定的、不经常改变的头文件。通过在 stdafx.h 中包含这些头文件，你确保它们只被编译一次，然后被重用，从而加速后续的编译。</li><li>stdafx.cpp：这个文件用于创建预编译头文件。它通常只包含一行代码：#include “stdafx.h”。当这个文件被编译时，它会生成预编译头文件（<code>.pch</code>）。</li></ul><h3 id="为什么-Visual-Studio-会自动提供-stdafx-h"><a class="header-anchor" href="#为什么-Visual-Studio-会自动提供-stdafx-h">¶</a>为什么 Visual Studio 会自动提供 stdafx.h</h3><p>  Visual Studio在启用预编译头文件的项目中自动提供<code>stdafx.h</code>，是为了鼓励使用这个功能来加快构建时间。对于较大的项目或有许多外部库的项目，使用预编译头文件特别有益。</p><h2 id="参考资料"><a class="header-anchor" href="#参考资料">¶</a>参考资料</h2><blockquote><ul><li>Github Copilot</li></ul></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css&quot;&gt;&lt;p&gt;  &lt;code&gt;stdafx.h&lt;/code&gt;是Visual Studio项</summary>
      
    
    
    
    <category term="Programming" scheme="https://booksword.top/categories/Programming/"/>
    
    <category term="C++" scheme="https://booksword.top/categories/Programming/C/"/>
    
    
  </entry>
  
  <entry>
    <title>acme.sh申请SSL证书的一点经验</title>
    <link href="https://booksword.top/2024/06/30/sh%E7%94%B3%E8%AF%B7%E8%AF%81%E4%B9%A6%E7%9A%84%E4%B8%80%E7%82%B9%E7%BB%8F%E9%AA%8C/"/>
    <id>https://booksword.top/2024/06/30/sh%E7%94%B3%E8%AF%B7%E8%AF%81%E4%B9%A6%E7%9A%84%E4%B8%80%E7%82%B9%E7%BB%8F%E9%AA%8C/</id>
    <published>2024-06-29T16:12:12.000Z</published>
    <updated>2024-06-30T02:12:52.327Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h3 id="acme-sh安装"><a class="header-anchor" href="#acme-sh安装">¶</a>acme.sh安装</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">curl https://get.acme.sh | sh -s email=business@kailinjt.com</span><br><span class="line"><span class="built_in">alias</span>  acme.sh=<span class="string">&#x27;/root/.acme.sh/acme.sh&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="CA机构"><a class="header-anchor" href="#CA机构">¶</a>CA机构</h3><ul><li>Let’s Encrypt不晚于2024-06-29强制要求DNSSEC，否则报错<code>DNSSEC: DNSKEY Missing</code>。但鹅厂的DNSPod需要付费才能开启DNSSEC，故放弃。<ul><li>可以通过<a href="https://dnssec-debugger.verisignlabs.com/">VERISIGN™//LABS</a>查看域名的DNSSEC状态。</li></ul></li><li>切换默认CA到ZeroSSL  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">acme.sh --set-default-ca --server zerossl</span><br></pre></td></tr></table></figure></li><li>ZeroSSL需要登记下邮箱  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">acme.sh --register-account -m qianyun6@sina.com --server zerossl</span><br></pre></td></tr></table></figure></li></ul><h3 id="通过DNSPod认证获取证书"><a class="header-anchor" href="#通过DNSPod认证获取证书">¶</a>通过DNSPod认证获取证书</h3><ul><li><p>获取腾讯云SecretId和SecretKey</p><p>参考<a href="https://docs.dnspod.cn/dns/acme-sh/">acme.sh 自动解析并申请证书</a></p></li><li><p>将获取的SecretId和SecretKey设为环境变量：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">export Tencent_SecretId=&quot;&lt;Your SecretId&gt;&quot;</span><br><span class="line">export Tencent_SecretKey=&quot;&lt;Your SecretKey&gt;&quot;</span><br></pre></td></tr></table></figure></li><li><p>用acem.sh获取证书</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">acme.sh --issue --dns dns_tencent -d &lt;your domain&gt;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css&quot;&gt;&lt;h3 id=&quot;acme-sh安装&quot;&gt;&lt;a class=&quot;header-ancho</summary>
      
    
    
    
    <category term="其他" scheme="https://booksword.top/categories/%E5%85%B6%E4%BB%96/"/>
    
    
  </entry>
  
  <entry>
    <title>KDB+效能玩票测试</title>
    <link href="https://booksword.top/2024/04/11/KDB+%E6%95%88%E8%83%BD%E7%8E%A9%E7%A5%A8%E6%B5%8B%E8%AF%95/"/>
    <id>https://booksword.top/2024/04/11/KDB+%E6%95%88%E8%83%BD%E7%8E%A9%E7%A5%A8%E6%B5%8B%E8%AF%95/</id>
    <published>2024-04-10T22:12:43.000Z</published>
    <updated>2024-04-11T08:10:47.613Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h2 id="动因"><a class="header-anchor" href="#动因">¶</a>动因</h2><p>之前使用Man-Group的Arctic系统（老Arctic，基于MongoDB的那个）存储各种交易标的的数据，但发现比较慢。测试下传说中的KDB+看能否替换。目前并不期望能使用KDB+强项的内部计算（由于<code>q</code>语言学习成本过高），只是简单作为时序数据库使用，支持读取写入增删改查即可。</p><h2 id="架构"><a class="header-anchor" href="#架构">¶</a>架构</h2><p>使用一台Linux主机作为数据库服务器，与客户机在同一个局域网（千兆以太网）下。具体配置过程略。</p><h2 id="简单测试"><a class="header-anchor" href="#简单测试">¶</a>简单测试</h2><p>使用数据是浦发银行（600000.SSE）的1分钟数据，长度大约10年，一共599280行x9列。</p><ol><li><p>写入<br>KDB+:</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">t = con(<span class="string">&#x27;&#123;`:trade/ set x&#125;&#x27;</span>, df1)</span><br></pre></td></tr></table></figure><p>CPU times: total: 844 ms<br>Wall time: 574 ms</p><p>Arctic:</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">barlib.write(<span class="string">&quot;test_1m&quot;</span>, df1)</span><br></pre></td></tr></table></figure><p>CPU times: total: 1.48 s<br>Wall time: 1.62 s</p></li><li><p>整体读取<br>KDB+:</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">%%time</span><br><span class="line">a = con(<span class="string">&#x27;get `:trade&#x27;</span>)</span><br><span class="line">df_get = a.pd().set_index(<span class="string">&quot;date&quot;</span>)</span><br></pre></td></tr></table></figure><p>CPU times: total: 297 ms<br>Wall time: 338 ms</p><p>Arctic:</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">barlib.read(<span class="string">&quot;test_1m&quot;</span>)</span><br></pre></td></tr></table></figure><p>CPU times: total: 2.08 s<br>Wall time: 3.24 s</p></li><li><p>部分读取<br>KDB+</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a_p = con(<span class="string">&quot;select date, open, close from `:trade where date within 2023.01.01T10:00 2024.03.01T14:00&quot;</span>)</span><br><span class="line">df_get_p = a_p.pd().set_index(<span class="string">&quot;date&quot;</span>)</span><br></pre></td></tr></table></figure><p>CPU times: total: 15.6 ms<br>Wall time: 18 ms</p><p>Arctic</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">barlib.read(<span class="string">&quot;test_1m&quot;</span>, chunk_range=DateRange(<span class="string">&quot;2023.01.01 10:00&quot;</span>, <span class="string">&quot;2024.03.01T14:00&quot;</span>), columns=[<span class="string">&quot;open&quot;</span>, <span class="string">&quot;close&quot;</span>])</span><br></pre></td></tr></table></figure><p>CPU times: total: 188 ms<br>Wall time: 332 ms</p></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css&quot;&gt;&lt;h2 id=&quot;动因&quot;&gt;&lt;a class=&quot;header-anchor&quot; href</summary>
      
    
    
    
    <category term="数据库" scheme="https://booksword.top/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    <category term="KDB+" scheme="https://booksword.top/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/KDB/"/>
    
    
  </entry>
  
  <entry>
    <title>【Python知识库】Python中的PriorityQueue测试</title>
    <link href="https://booksword.top/2024/03/16/Python%E4%B8%AD%E7%9A%84PriorityQueue%E6%B5%8B%E8%AF%95/"/>
    <id>https://booksword.top/2024/03/16/Python%E4%B8%AD%E7%9A%84PriorityQueue%E6%B5%8B%E8%AF%95/</id>
    <published>2024-03-16T00:15:40.000Z</published>
    <updated>2024-07-01T07:46:26.286Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>Python官方提供一个<code>PriorityQueue</code>，可以按优先级取出Push入队的对象，但这个Queue不稳定（即相同优先级并不保证先进先出）。</p><p>测试代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> defaultdict</span><br><span class="line"><span class="keyword">from</span> queue <span class="keyword">import</span> Empty, Queue, PriorityQueue</span><br><span class="line"><span class="keyword">from</span> threading <span class="keyword">import</span> Thread, get_ident</span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> sleep</span><br><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> <span class="type">Any</span>, <span class="type">Callable</span>, <span class="type">List</span></span><br><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">EVENT_SLEEP = <span class="string">&quot;eSleep&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Event</span>:</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    Event object consists of a type string which is used</span></span><br><span class="line"><span class="string">    by event engine for distributing event, and a data</span></span><br><span class="line"><span class="string">    object which contains the real data.</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, etype: <span class="built_in">str</span>, data: <span class="type">Any</span> = <span class="literal">None</span>, priority: <span class="built_in">int</span> = <span class="number">100</span></span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">        <span class="string">&quot;&quot;&quot;&quot;&quot;&quot;</span></span><br><span class="line">        self.<span class="built_in">type</span>: <span class="built_in">str</span> = etype</span><br><span class="line">        self.priority = priority</span><br><span class="line">        self.data: <span class="type">Any</span> = data</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__lt__</span>(<span class="params">self, other</span>):</span><br><span class="line">        <span class="keyword">return</span> self.priority &gt; other.priority</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__le__</span>(<span class="params">self, other</span>):</span><br><span class="line">        <span class="keyword">return</span> self.priority &gt;= other.priority</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Defines handler function to be used in event engine.</span></span><br><span class="line">HandlerType: <span class="built_in">callable</span> = <span class="type">Callable</span>[[Event], <span class="literal">None</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">EventEngine</span>:</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    Event engine distributes event object based on its type</span></span><br><span class="line"><span class="string">    to those handlers registered.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    It also generates timer event by every interval seconds,</span></span><br><span class="line"><span class="string">    which can be used for timing purpose.</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, interval: <span class="built_in">int</span> = <span class="number">1</span>, using_priority = <span class="literal">False</span></span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        Timer event is generated every 1 second by default, if</span></span><br><span class="line"><span class="string">        interval not specified.</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        self._interval: <span class="built_in">int</span> = interval</span><br><span class="line">        self._queue: Queue = PriorityQueue() <span class="keyword">if</span> using_priority <span class="keyword">else</span> Queue()</span><br><span class="line">        self._active: <span class="built_in">bool</span> = <span class="literal">False</span></span><br><span class="line">        self._thread: Thread = Thread(target=self._run)</span><br><span class="line">        self._handlers: defaultdict = defaultdict(<span class="built_in">list</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">_run</span>(<span class="params">self</span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        Get event from queue and then process it.</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;Event engine started. Thread ID: <span class="subst">&#123;get_ident()&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">while</span> self._active:</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                event: Event = self._queue.get(block=<span class="literal">True</span>, timeout=<span class="number">1</span>)</span><br><span class="line">                self._process(event)</span><br><span class="line">            <span class="keyword">except</span> Empty:</span><br><span class="line">                <span class="comment"># logger.info(f&quot;Event Queue empty. Thread ID: &#123;get_ident()&#125;&quot;)</span></span><br><span class="line">                <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">_process</span>(<span class="params">self, event: Event</span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        First distribute event to those handlers registered listening</span></span><br><span class="line"><span class="string">        to this type.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        Then distribute event to those general handlers which listens</span></span><br><span class="line"><span class="string">        to all types.</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> event.<span class="built_in">type</span> <span class="keyword">in</span> self._handlers:</span><br><span class="line">            <span class="keyword">for</span> handler <span class="keyword">in</span> self._handlers[event.<span class="built_in">type</span>]:</span><br><span class="line">                handler(event)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">start</span>(<span class="params">self</span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        Start event engine to process events and generate timer events.</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        self._active = <span class="literal">True</span></span><br><span class="line">        self._thread.start()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">stop</span>(<span class="params">self</span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        Stop event engine.</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        self._active = <span class="literal">False</span></span><br><span class="line">        self._thread.join()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">put</span>(<span class="params">self, event: Event</span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        Put an event object into event queue.</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        self._queue.put(event)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">register</span>(<span class="params">self, etype: <span class="built_in">str</span>, handler: HandlerType</span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        Register a new handler function for a specific event type. Every</span></span><br><span class="line"><span class="string">        function can only be registered once for each event type.</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        handler_list: <span class="built_in">list</span> = self._handlers[etype]</span><br><span class="line">        <span class="keyword">if</span> handler <span class="keyword">not</span> <span class="keyword">in</span> handler_list:</span><br><span class="line">            handler_list.append(handler)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">unregister</span>(<span class="params">self, etype: <span class="built_in">str</span>, handler: HandlerType</span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        Unregister an existing handler function from event engine.</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        handler_list: <span class="built_in">list</span> = self._handlers[etype]</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> handler <span class="keyword">in</span> handler_list:</span><br><span class="line">            handler_list.remove(handler)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> handler_list:</span><br><span class="line">            self._handlers.pop(<span class="built_in">type</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">process_sleep_event</span>(<span class="params">event</span>):</span><br><span class="line">    name, sleepseconds = event.data</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;In <span class="subst">&#123;get_ident()&#125;</span>, Task <span class="subst">&#123;name&#125;</span> sleep <span class="subst">&#123;sleepseconds&#125;</span> start @ <span class="subst">&#123;datetime.now().isoformat()&#125;</span>&quot;</span>)</span><br><span class="line">    sleep(sleepseconds)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;In <span class="subst">&#123;get_ident()&#125;</span>, Task <span class="subst">&#123;name&#125;</span> sleep <span class="subst">&#123;sleepseconds&#125;</span> end @ <span class="subst">&#123;datetime.now().isoformat()&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;main thread: <span class="subst">&#123;get_ident()&#125;</span> start  @ <span class="subst">&#123;datetime.now().isoformat()&#125;</span>&quot;</span>)</span><br><span class="line">    engine = EventEngine(using_priority=<span class="literal">True</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;using <span class="subst">&#123;<span class="built_in">type</span>(engine._queue)&#125;</span>&quot;</span>)</span><br><span class="line">    engine.register(EVENT_SLEEP, process_sleep_event)</span><br><span class="line">    engine.start()</span><br><span class="line"></span><br><span class="line">    engine.put(Event(EVENT_SLEEP, (<span class="string">&quot;1st_1sec_event&quot;</span>, <span class="number">1</span>)))</span><br><span class="line">    engine.put(Event(EVENT_SLEEP, (<span class="string">&quot;2nd_1sec_event&quot;</span>, <span class="number">1</span>), priority=<span class="number">50</span>))</span><br><span class="line">    engine.put(Event(EVENT_SLEEP, (<span class="string">&quot;3rd_5sec_event&quot;</span>, <span class="number">5</span>)))</span><br><span class="line">    engine.put(Event(EVENT_SLEEP, (<span class="string">&quot;4th_5sec_event&quot;</span>, <span class="number">5</span>), priority=<span class="number">200</span>))</span><br><span class="line">    sleep(<span class="number">13</span>)</span><br><span class="line">    engine.put(Event(EVENT_SLEEP, (<span class="string">&quot;5th_5sec_event&quot;</span>, <span class="number">3</span>), priority=<span class="number">300</span>))</span><br><span class="line"></span><br><span class="line">    engine.stop()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;main thread: <span class="subst">&#123;get_ident()&#125;</span>, exit @ <span class="subst">&#123;datetime.now().isoformat()&#125;</span>&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">main thread: 117652 start  @ 2024-03-16T15:58:45.398626</span><br><span class="line">using &lt;class &#x27;queue.PriorityQueue&#x27;&gt;</span><br><span class="line">Event engine started. Thread ID: 102312</span><br><span class="line">In 102312, Task 4th_5sec_event sleep 5 start @ 2024-03-16T15:58:45.399626</span><br><span class="line">In 102312, Task 4th_5sec_event sleep 5 end @ 2024-03-16T15:58:50.402557</span><br><span class="line">In 102312, Task 3rd_5sec_event sleep 5 start @ 2024-03-16T15:58:50.402557</span><br><span class="line">In 102312, Task 3rd_5sec_event sleep 5 end @ 2024-03-16T15:58:55.413506</span><br><span class="line">In 102312, Task 1st_1sec_event sleep 1 start @ 2024-03-16T15:58:55.413506</span><br><span class="line">In 102312, Task 1st_1sec_event sleep 1 end @ 2024-03-16T15:58:56.418677</span><br><span class="line">In 102312, Task 2nd_1sec_event sleep 1 start @ 2024-03-16T15:58:56.418677</span><br><span class="line">In 102312, Task 2nd_1sec_event sleep 1 end @ 2024-03-16T15:58:57.424852</span><br><span class="line">In 102312, Task 5th_5sec_event sleep 3 start @ 2024-03-16T15:58:58.403006</span><br><span class="line">In 102312, Task 5th_5sec_event sleep 3 end @ 2024-03-16T15:59:01.406562</span><br><span class="line">main thread: 117652, exit @ 2024-03-16T15:59:01.406562</span><br></pre></td></tr></table></figure><h2 id="参考资料"><a class="header-anchor" href="#参考资料">¶</a>参考资料</h2><blockquote><ul><li><a href="https://docs.python.org/3/library/queue.html#module-queue">官方文档</a></li></ul></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css&quot;&gt;&lt;p&gt;Python官方提供一个&lt;code&gt;PriorityQueue&lt;/code&gt;</summary>
      
    
    
    
    <category term="Programming" scheme="https://booksword.top/categories/Programming/"/>
    
    <category term="Python" scheme="https://booksword.top/categories/Programming/Python/"/>
    
    
  </entry>
  
  <entry>
    <title>CTP踩坑记</title>
    <link href="https://booksword.top/2024/01/21/CTP%E8%B8%A9%E5%9D%91%E8%AE%B0/"/>
    <id>https://booksword.top/2024/01/21/CTP%E8%B8%A9%E5%9D%91%E8%AE%B0/</id>
    <published>2024-01-21T02:38:25.000Z</published>
    <updated>2024-03-16T08:19:27.581Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h2 id="数据篇"><a class="header-anchor" href="#数据篇">¶</a>数据篇</h2><ul><li><p>郑商所数据垃圾值</p><ul><li>部分日夜盘最后一个tick的时间戳会被标到第二日；</li><li>夜盘开始时20:5x会有垃圾tick；</li><li>没有<code>最后修改毫秒</code>，需要自己插值；</li></ul></li><li><p>K线合成</p></li><li><p>注意每个交易时间段最后一个tick。比如合成5分钟K线，对9:00-10:15时间段，10:15整可能会有一个tick需要归到10:10开始的K线里。</p></li><li><p>一般的行情软件和数据商，包括TB、天软、米筐K线按第一个有成交的tick来计算，但CTP推送的时候按500ms切片，即便无成交。</p></li><li><p>可能有些高/低价包含在500ms内，从而不能从<code>last_price</code>得知。目前能做到的最好是参考CTP推送的日内最高/低价修正部分。</p></li></ul><h2 id="接口篇"><a class="header-anchor" href="#接口篇">¶</a>接口篇</h2><ul><li>似乎有两个乘数【合约数量乘数】和【合约基础商品乘数】，分别定义为<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">///合约数量乘数</span></span><br><span class="line">TThostFtdcVolumeMultipleType VolumeMultiple;</span><br><span class="line"><span class="comment">///合约基础商品乘数</span></span><br><span class="line">TThostFtdcUnderlyingMultipleType UnderlyingMultiple;</span><br></pre></td></tr></table></figure>按文档，标的期货保证金为 [标的期货合约结算价×期货合约乘数×标的期货合约交易所保证金率（按金额）+ 标的期货合约交易所保证金<br>率(按手数) ]×基础商品乘数<br>这个【合约基础商品乘数】到底怎么用的？</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css&quot;&gt;&lt;h2 id=&quot;数据篇&quot;&gt;&lt;a class=&quot;header-anchor&quot; hre</summary>
      
    
    
    
    <category term="Programming" scheme="https://booksword.top/categories/Programming/"/>
    
    <category term="CTP" scheme="https://booksword.top/categories/Programming/CTP/"/>
    
    
  </entry>
  
  <entry>
    <title>发布Python包到PyPi上</title>
    <link href="https://booksword.top/2024/01/21/publish_python_package_pypi/"/>
    <id>https://booksword.top/2024/01/21/publish_python_package_pypi/</id>
    <published>2024-01-20T23:30:21.000Z</published>
    <updated>2024-01-21T10:37:18.348Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><ol><li><p>确保Python包至少要有写好的<code>setup.py</code>(或<code>setup.cfg</code>)、<code>README.md</code>和一个协议文件<code>LICENSE</code>。同时包名不得与Pypi上已有的包冲突。</p></li><li><p>安装必要的工具：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install setuptools wheel twine</span><br></pre></td></tr></table></figure><p>如果使用<code>setup.cfg</code>还需要<code>build</code>包：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install build</span><br></pre></td></tr></table></figure></li><li><p>更新<code>setup.py</code>或<code>setup.cfg</code>里的版本号，PyPi不允许重复版本号。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">version = X.Y.Z</span><br></pre></td></tr></table></figure></li><li><p>将版本提交到版本控制系统（如Github）,并创建相应的<code>tag</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git commit -am <span class="string">&quot;Release version X.Y.Z&quot;</span></span><br><span class="line">git tag X.Y.Z</span><br><span class="line">git push origin X.Y.Z</span><br></pre></td></tr></table></figure></li><li><p>创建源代码和wheel文件发布</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python -m build</span><br></pre></td></tr></table></figure></li><li><p>注册PyPi账号于https://pypi.org/，按提示步骤操作，并开启2FA验证（可以用Google或微软的Authenticator APP）。</p></li><li><p>PyPi现在强制使用token验证，所以需要在&quot;Account Setting&quot;里面生成一个API token。然后在用户目录里面创建一个<code>.pypirc</code>文件填充如下内容（<code>username</code>就是那个带前后下划线的&quot;<strong>token</strong>&quot;,<code>password</code>换成系统生成的API token）。</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[pypi]</span><br><span class="line">username = __token__</span><br><span class="line">password = pypi-**********</span><br></pre></td></tr></table></figure></li><li><p>使用<code>twine</code>上传</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">twine upload dist/*</span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css&quot;&gt;&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;确保Python包至少要有写好的&lt;code&gt;setup.</summary>
      
    
    
    
    <category term="Programming" scheme="https://booksword.top/categories/Programming/"/>
    
    <category term="Python" scheme="https://booksword.top/categories/Programming/Python/"/>
    
    
  </entry>
  
  <entry>
    <title>数据源问题集锦</title>
    <link href="https://booksword.top/2024/01/21/%E6%95%B0%E6%8D%AE%E6%BA%90%E9%97%AE%E9%A2%98%E9%9B%86%E9%94%A6/"/>
    <id>https://booksword.top/2024/01/21/%E6%95%B0%E6%8D%AE%E6%BA%90%E9%97%AE%E9%A2%98%E9%9B%86%E9%94%A6/</id>
    <published>2024-01-20T23:30:21.000Z</published>
    <updated>2024-03-16T08:19:27.580Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h3 id="米筐【RQData】"><a class="header-anchor" href="#米筐【RQData】">¶</a>米筐【RQData】</h3><h3 id="天软【Tinysoft】"><a class="header-anchor" href="#天软【Tinysoft】">¶</a>天软【Tinysoft】</h3><ul><li>[ ] K线合成问题: 例如fu2405.SHFE，2024-03-06 13：55（起始时间，天软的实际是标明结束时间）的5分钟K。</li></ul><h3 id="上期CTP"><a class="header-anchor" href="#上期CTP">¶</a>上期CTP</h3><p>（见CTP踩坑记）</p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css&quot;&gt;&lt;h3 id=&quot;米筐【RQData】&quot;&gt;&lt;a class=&quot;header-anch</summary>
      
    
    
    
    <category term="交易策略开发" scheme="https://booksword.top/categories/%E4%BA%A4%E6%98%93%E7%AD%96%E7%95%A5%E5%BC%80%E5%8F%91/"/>
    
    <category term="数据" scheme="https://booksword.top/categories/%E4%BA%A4%E6%98%93%E7%AD%96%E7%95%A5%E5%BC%80%E5%8F%91/%E6%95%B0%E6%8D%AE/"/>
    
    
  </entry>
  
  <entry>
    <title>Ubuntu安装Postgresql并设置自己的数据文件位置</title>
    <link href="https://booksword.top/2023/12/24/Ubuntu%E5%AE%89%E8%A3%85Postgresql%E5%B9%B6%E8%AE%BE%E7%BD%AE%E8%87%AA%E5%B7%B1%E7%9A%84%E6%95%B0%E6%8D%AE%E6%96%87%E4%BB%B6%E4%BD%8D%E7%BD%AE/"/>
    <id>https://booksword.top/2023/12/24/Ubuntu%E5%AE%89%E8%A3%85Postgresql%E5%B9%B6%E8%AE%BE%E7%BD%AE%E8%87%AA%E5%B7%B1%E7%9A%84%E6%95%B0%E6%8D%AE%E6%96%87%E4%BB%B6%E4%BD%8D%E7%BD%AE/</id>
    <published>2023-12-24T09:31:10.000Z</published>
    <updated>2023-12-24T09:32:07.157Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h2 id="安装"><a class="header-anchor" href="#安装">¶</a>安装</h2><p>可以直接从官方<code>apt</code>源安装</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sudo sh -c <span class="string">&#x27;echo &quot;deb https://apt.postgresql.org/pub/repos/apt $(lsb_release -cs)-pgdg main&quot; &gt; /etc/apt/sources.list.d/pgdg.list&#x27;</span></span><br><span class="line">wget --quiet -O - https://www.postgresql.org/media/keys/ACCC4CF8.asc | sudo apt-key add -</span><br><span class="line">sudo apt update</span><br><span class="line">sudo apt install postgresql</span><br></pre></td></tr></table></figure><h2 id="设置数据文件位置"><a class="header-anchor" href="#设置数据文件位置">¶</a>设置数据文件位置</h2><h4 id="准备工作——创建新位置"><a class="header-anchor" href="#准备工作——创建新位置">¶</a>准备工作——创建新位置</h4><p>创建如下新目录，并且GRANT全部权限，数据文件将保存于此：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/home/db/postgre/data</span><br></pre></td></tr></table></figure><h4 id="步骤一：移动数据文件"><a class="header-anchor" href="#步骤一：移动数据文件">¶</a>步骤一：移动数据文件</h4><p>切换到默认PostgreSQL用户(一般为<code>postgres</code>)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo su postgres</span><br></pre></td></tr></table></figure><p>进入交互：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">psql</span><br></pre></td></tr></table></figure><p>查看当前默认的数据目录位置：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">postgres=# SHOW data_directory;</span><br></pre></td></tr></table></figure><p>输出</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Output</span><br><span class="line">       data_directory</span><br><span class="line">-----------------------------</span><br><span class="line"> /var/lib/postgresql/16/main</span><br><span class="line">(1 row)</span><br></pre></td></tr></table></figure><p>退出交互：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">postgres=# \q</span><br></pre></td></tr></table></figure><p>停止服务：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl stop postgresql</span><br><span class="line">sudo systemctl status postgresql <span class="comment"># 查看状态，确认已停止</span></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">○ postgresql.service - PostgreSQL RDBMS</span><br><span class="line">     Loaded: loaded (/lib/systemd/system/postgresql.service; enabled; vendor preset: enabled)</span><br><span class="line">     Active: inactive (dead) since Sun 2023-12-24 14:41:08 CST; 4s ago</span><br><span class="line">    Process: 183242 ExecStart=/bin/true (code=exited, status=0/SUCCESS)</span><br><span class="line">   Main PID: 183242 (code=exited, status=0/SUCCESS)</span><br><span class="line">        CPU: 1ms</span><br></pre></td></tr></table></figure><p>看到<code>inactive (dead)</code>确认已经停止。</p><p>拷贝数据库目录到新位置，如果没有rsync，可以使用apt安装下，参数说明：</p><ul><li>-a 参数保存权限和其他目录属性</li><li>-v 会显示详细过程</li></ul><p>注意：</p><ul><li>如果在目录最后加上／，会把目录下面的内容拷贝过去，</li><li>如果最后没有／，会拷贝这个目录及下面的内容。</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo rsync -av /var/lib/postgresql/ /home/db/postgre/data/</span><br></pre></td></tr></table></figure><p>上面的拷贝结束后，把当前数据目录改名成备份，等最后确认新位置没有问题后再删除：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo <span class="built_in">mv</span> /var/lib/postgresql/16/main /var/lib/postgresql/16/main.bak</span><br></pre></td></tr></table></figure><h4 id="步骤二：指向数据文件新位置"><a class="header-anchor" href="#步骤二：指向数据文件新位置">¶</a>步骤二：指向数据文件新位置</h4><p>编辑配置文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vi /etc/postgresql/16/main/postgresql.conf</span><br></pre></td></tr></table></figure><p>找到有data_directory的一行，修改后面的目录路径为新位置：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">data_directory = &#x27;/home/db/postgre/data/16/main&#x27;</span><br></pre></td></tr></table></figure><p>保存，退出。</p><h4 id="步骤三：重新启动数据库并验证数据文件位置"><a class="header-anchor" href="#步骤三：重新启动数据库并验证数据文件位置">¶</a>步骤三：重新启动数据库并验证数据文件位置</h4><p>重新启动服务：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl start postgresql</span><br></pre></td></tr></table></figure><p>查看服务状态：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl status postgresql</span><br></pre></td></tr></table></figure><p>可以看到输出中有active (exited)字样，说明服务启动成功了：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Output</span><br><span class="line">● postgresql.service - PostgreSQL RDBMS</span><br><span class="line">     Loaded: loaded (/lib/systemd/system/postgresql.service; enabled; vendor preset: enabled)</span><br><span class="line">     Active: active (exited) since Sun 2023-12-24 14:41:18 CST; 44s ago</span><br><span class="line">    Process: 217149 ExecStart=/bin/true (code=exited, status=0/SUCCESS)</span><br><span class="line">   Main PID: 217149 (code=exited, status=0/SUCCESS)</span><br><span class="line">        CPU: 1ms</span><br></pre></td></tr></table></figure><p>看到<code>active (exited)</code>确认已经启动。</p><p>注：这里说明下<code>(exited)</code>。<code>postgresql.service</code>只是一个启动的wrapper，实际运行的服务是<code> postgresql@&lt;version&gt;-main.service</code>。</p><h4 id="步骤四：清理数据"><a class="header-anchor" href="#步骤四：清理数据">¶</a>步骤四：清理数据</h4><p>如果上述验证过程没有问题，可以删除原有的数据目录了：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo <span class="built_in">rm</span> -rf /var/lib/postgresql/16/main.bak</span><br></pre></td></tr></table></figure><h2 id="其他常用设置"><a class="header-anchor" href="#其他常用设置">¶</a>其他常用设置</h2><h4 id="允许从非本机访问"><a class="header-anchor" href="#允许从非本机访问">¶</a>允许从非本机访问</h4><p>编辑<code>postgresql.conf</code>，将<code>listen_addresses = 'localhost'</code>改成<code>listen_addresses = '*'</code>以允许所有ip访问，或者填写所需的ip。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css&quot;&gt;&lt;h2 id=&quot;安装&quot;&gt;&lt;a class=&quot;header-anchor&quot; href</summary>
      
    
    
    
    <category term="数据库" scheme="https://booksword.top/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    <category term="Postgresql" scheme="https://booksword.top/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/Postgresql/"/>
    
    
  </entry>
  
</feed>
