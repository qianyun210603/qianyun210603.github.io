{"pages":[{"title":"About","date":"2018-07-01T01:46:22.742Z","path":"about/index.html","text":""},{"title":"Categories","date":"2018-07-01T01:46:22.742Z","path":"categories/index.html","text":""},{"title":"Tags","date":"2018-07-01T01:46:22.743Z","path":"tags/index.html","text":""}],"posts":[{"title":"Hexo静态博客系列之一——在VPS上搭建","date":"2018-07-03T13:02:14.000Z","path":"2018/07/03/Build-Hexo-blog/","text":"本地部分 安装node.js 12curl -sL https://deb.nodesource.com/setup_8.x | sudo -E bash -apt install nodejs -y 安装Hexo 1npm install -g hexo-cli 初始化博客： 使用 1hexo init myblog 创建myblog目录并在其中生成博客需要的基本文件。 初始化结束后，安装用于git部署的插件hexo-deployer-git和用于预览的本地serverhexo-serverfor。 123cd myblognpm install hexo-deployer-git --savenpm install hexo-server 生成RSA密钥对用于与VPS之间的git验证 1ssh-keygen -b 2048 -t rsa 服务器部分 安装Web Server服务，这里用nginx。参照官网上的说明。 安装git：apt install git 为git单独建立一个账户，在$HOME下建立.ssh目录并在其中建立authorized_keys文件，将之前生成的密钥对中的公钥粘贴到其中： 12345adduser gitsu gitcd ~mkdir .sshvim .ssh/authorized_keys # paste public key 建立git裸仓库（bare repository）并设置一个钩子使得push进入裸仓库的文件自动复制到网站根目录下： 123git init --bare blog.gitvi blog.git/hooks/post-receivechmod +x blog.git/hooks/post-receive post-receive文件的内容为：12#!/bin/shgit --work-tree=/var/www/html --git-dir=$HOME/blog.git checkout -f 返回本地部分 撰写第一篇博客 在之前生成的myblog目录下运行 1hexo new “helloworld” 生成新文章模板，位于/myblog/source/_posts/helloworld.md。 在模板中填入内容 生成HTML1hexo generate 预览：hexo server 部署：在_config.xml文件中配置部署信息：1234deploy: type: git repo: git@&lt;server&gt;:&lt;path to bare repository&gt; branch: master 之后1hexo deploy 即可。","tags":[],"categories":[{"name":"Hexo","slug":"Hexo","permalink":"http://yoursite.com/categories/Hexo/"}]},{"title":"Linux Mint安装Cuda 9.1以及cuDNN、NICC","date":"2018-07-02T13:02:10.000Z","path":"2018/07/02/cuda-9-1-installation-on-linux-mint-with-cuDNN-and-NICC/","text":"CUDA123456789101112131415# execute following command as root usersudo -idpkg -i cuda-repo-ubuntu1604_9.1.85-1_amd64.deb apt-key adv --fetch-keys http://developer.download.nvidia.com/compute/cuda/repos/ubuntu1604/x86_64/7fa2af80.pubapt updateapt install cudachmod a+x /usr/local/cuda-9.1/bin/cuda-install-samples-9.1.sh# install cuda sample dependenciesapt install libgl-dev libglu-dev libx11-dev libegl1-mesa-dev libgles2-mesa-dev libmpich-dev# back to normal userexit# install cuda examplescuda-install-samples-9.1.sh ./ # force input macro value as linux mint is not officially supportedGLPATH=\"/usr/lib/x86_64-linux-gnu\" GLLINK=\"-L/usr/lib/x86_64-linux-gnu\" DFLT_PATH=\"/usr/lib\" EGLLIB=\"/usr/lib/x86_64-linux-gnu\" GLESLIB=\"/usr/lib/x86_64-linux-gnu\" make -j6 cuDNN首先从https://developer.nvidia.com/rdp/cudnn-download cuDNN v7.0.5 Runtime Library for Ubuntu16.04 (Deb) cuDNN v7.0.5 Developer Library for Ubuntu16.04 (Deb) cuDNN v7.0.5 Code Samples and User Guide for Ubuntu16.04 (Deb) 接下来，安装123dpkg -i libcudnn7_7.0.5.15-1+cuda9.1_amd64.debdpkg -i libcudnn7-dev_7.0.5.15-1+cuda9.1_amd64.debdpkg -i libcudnn7-doc_7.0.5.15-1+cuda9.1_amd64.deb 最后，运行官方测试用例以验证安装： 复制/usr/src/cudnn_samples_v7/到有写权限的目录下12cd cudnn_samples_v7/mnistCUDNN/make NICC从https://developer.nvidia.com/nccl/nccl-download下载并 dpkg 安装。1dpkg -i nccl-repo-ubuntu1604-2.1.15-ga-cuda9.1_1-1_amd64.deb","tags":[],"categories":[{"name":"Linux","slug":"Linux","permalink":"http://yoursite.com/categories/Linux/"},{"name":"Cuda","slug":"Linux/Cuda","permalink":"http://yoursite.com/categories/Linux/Cuda/"}]},{"title":"重命名Visual Studio项目","date":"2018-07-02T13:02:08.000Z","path":"2018/07/02/Rename-Visual-Studio-Project-name-checklist/","text":"因为Visual Stuido的主文件名和项目名以及一些依赖文件都是相互关联的，因此单单简单粗暴地重命名项目和源代码会导致编译错误。以下给出一个完美重命名VS项目的步骤检查表： 在Visual Studio重命名项目； 重命名相关的源文件和头文件，并更正#include； 重命名.sln, .vcpoj和.vcxpoj文件； 将3中提到的三个文件（均为文本文件，可以用文本编辑器打开）中的旧名称替换为新名称。","tags":[],"categories":[{"name":"Programming","slug":"Programming","permalink":"http://yoursite.com/categories/Programming/"},{"name":"Visual Studio","slug":"Programming/Visual-Studio","permalink":"http://yoursite.com/categories/Programming/Visual-Studio/"}]},{"title":"apt提示key expired问题","date":"2018-07-02T04:02:12.000Z","path":"2018/07/02/apt-key-expired/","text":"首先找出过期的key:12$ apt-key list | grep expiredpub 4096R/BE1DB1F1 2011-03-29 [expired: 2014-03-28] 其中BE1DB1F1就是key ID。 找到ID后即可用1sudo apt-key adv --recv-keys --keyserver keys.gnupg.net BE1DB1F1 更新key。 Referencehttps://serverfault.com/questions/7145/what-should-i-do-when-i-got-the-keyexpired-error-message-after-an-apt-get-update/718435#718435","tags":[],"categories":[{"name":"Linux","slug":"Linux","permalink":"http://yoursite.com/categories/Linux/"}]},{"title":"无损迁移Linux系统到新磁盘","date":"2018-07-01T13:02:10.000Z","path":"2018/07/01/Move-linux-to-new-disk/","text":"笔者的电脑原有一块SSD上装了Windows 10和Linux的双系统，其中Linux分配了大约300GB空间，但随着系统膨胀，发现空间逐步不够使用了，因此又买了一块1TB的SSD，打算将Linux整体迁移到1TB盘上，将原SSD上Linux部分都划给Windows 10。在此记录下迁移步骤，以供参考。（此步骤基于Linux Mint，其他发行版应该大同小异。） 迁移步骤 硬件安装； 刻录Linux安装U盘并以之启动电脑； 用fdisk命令分区，首先分2GBswap分区，其他作为迁移后的文件系统分区： 用fdisk -l命令检查当前磁盘挂载和分区情况，找出并记录下原SSD上Linux的swap分区和文件系统分区，以及新SSD的挂载点，假设分别是/dev/sda2, /dev/sda3,和/dev/sdd； 用fdisk /dev/sdd给新磁盘分为swap分区和文件系统分区： 12345678910111213Command (m for help): n # create partition of 2GB for swap areaPartition number (1-128, default 1): First sector (1-10000000, default 2048): Last sector, +sectors or +size&#123;K,M,G,T,P&#125; (34-2047, default 10000000): +2GCreated a new partition 1 of type 'Linux filesystem' and of size 2 GiB.Command (m for help): n # create partition with remaining space for main filesystemPartition number (2-128, default 2): First sector (600001-10000000): Last sector, +sectors or +size&#123;K,M,G,T,P&#125; (600002-10000000, default 10000000): Created a new partition 3 of type 'Linux filesystem' and of size 600 GiB. 再次fdisk -l查看新磁盘的分区，假设分别是/dev/sdd1和/dev/sdd2； 格式化新分区： 12mkfs.ext4 /dev/sdd1mkfs.ext4 /dev/sdd2 用dd命令复制旧SSD上Linux各分区到对应的新SSD分区上： 12dd if=/dev/sda2 of=/dev/sdd1dd if=/dev/sda3 of=/dev/sdd2 取决于文件分区大小，复制可能需要数个小时。此外，如果之前/boot是单独挂载的，在步骤3也需要创建对应的分区并拷贝内容。 更新磁盘信息： 12e2fsck -f /dev/sdd1resize2fs /dev/sdd1 使用gparted更新磁盘的UUID。完成后对应更新/etc/fstab中关于Linux系统的分区UUID： 使用blkid /dev/sdd1获得新磁盘上分区的UUID； 挂载新磁盘上的分区并更新位于/&lt;mount dir&gt;/etc/fstab为新UUID； 重启进入Windows 10，进入管理工具-&gt;磁盘管理，删除原SSD上的Linux分区； 用Linux安装盘再次启动系统，用boot-repair修复grub； 安装并打开boot-repair 1234sudo add-apt-repository ppa:yannubuntu/boot-repairsudo apt-get updatesudo apt-get install -y boot-repairboot-repair advanced mode选项卡中： “GRUB location”选项卡, 选中”Separate /boot/efi partition”，并选择Linux所在的分区。 “GRUB options”选项卡，选中”Purge GRUB before reinstalling it”。 重启，此时应该可以进入迁移后的Linux了。","tags":[],"categories":[{"name":"Linux","slug":"Linux","permalink":"http://yoursite.com/categories/Linux/"}]},{"title":"个税改革分析，减税还是加税？","date":"2018-06-30T02:32:49.000Z","path":"2018/06/30/New-personal-tax/","text":"万众期待的个税改革草案昨天被发布出来征求公众意见，目前似乎讨论都只集中在起征点和级距上。然而，相比于另一个重大变化，也许起征点提高那么一点点的利得对于相当一部分人来说会被完全抵消。这个重大变化就是——年终奖要和工资合并计税了，从此以后年终奖的税是大大提高了的。。 为了仔细分析这一点的影响，先来看下目前的年终奖扣税规定： 以下内容引用自《国家税务总局关于调整个人取得全年一次性奖金等计算征收个人所得税方法问题的通知》（国税发〔2005〕9号）： 二、纳税人取得全年一次性奖金，单独作为一个月工资、薪金所得计算纳税，并按以下计税办法，由扣缴义务人发放时代扣代缴：(一) 先将雇员当月内取得的全年一次性奖金，除以12个月，按其商数确定适用税率和速算扣除数。如果在发放年终一次性奖金的当月，雇员当月工资薪金所得低于税法规定的费用扣除额，应将全年一次性奖金减除“雇员当月工资薪金所得与费用扣除额的差额”后的余额，按上述办法确定全年一次性奖金的适用税率和速算扣除数。(二) 将雇员个人当月内取得的全年一次性奖金，按本条第(一)项确定的适用税率和速算扣除数计算征税，计算公式如下：如果雇员当月工资薪金所得高于(或等于)税法规定的费用扣除额的，适用公式为：应纳税额＝雇员当月取得全年一次性奖金×适用税率一速算扣除数如果雇员当月工资薪金所得低于税法规定的费用扣除额的，适用公式为： 应纳税额＝(雇员当月取得全年一次性奖金一雇员当月工资薪金所得与费用扣除额的差额)×适用税率一速算扣除数 因此目前年终奖税率和基本工资是基本没有关系的。而草案税制实施后，由于所有收入要“综合计税”并按年扣缴，所以年终奖的最低税率将变成基本工资的边际税率。 “（一）居民个人的综合所得，以每一纳税年度的收入额减除费用六万元以及专项扣除、专项附加扣除和依法确定的其他扣除后的余额，为应纳税所得额。专项扣除包括居民个人按照国家规定的范围和标准缴纳的基本养老保险、基本医疗保险、失业保险等社会保险费和住房公积金等；专项附加扣除包括子女教育、继续教育、大病医疗、住房贷款利息和住房租金等支出。 因此，尽管草案税制起征点略有提高，并且级距稍有扩大，但其实对大多数中产的减税作用并没有想象得那么大，部分人甚至会被加税。 笔者试算了从年总收入1万到300万区间内草案税制的影响，结果如下图所示：图中左上为草案税制与现行税制需缴纳税款的差额；右上和左下分别为现行税制和草案税制下平均税负，即个税/总收入；右下为平均税负的变化。 试算基于如下假设： 按帝都规定正常缴纳五险一金，帝都平均工资取最新公布8467元/月。正常情况下这个数字即将用于2018年7月到2019年6月社保基数计算。 只在一个单位取得工资奖金收入，没有其他需要“综合计税”的收入。 旧税率：月标准扣除额3500元 全月应纳税所得额（含税级距） 税率 速算扣除数 不超过1,500元 3% 0 超过1,500元至4,500元的部分 10% 105 超过4,500元至9,000元的部分 20% 555 超过9,000元至35,000元的部分 25% 1,005 超过35,000元至55,000元的部分 30% 2,755 超过55,000元至80,000元的部分 35% 5,505 超过80,000元的部分 45% 13,505 草案税率：年标准扣除额60000元 全年应纳税所得额（含税级距） 税率 速算扣除数 不超过36,000元 3% 0 超过36,000元至144,000元的部分 10% 2,520 超过144,000元至300,000元的部分 20% 16,920 超过300,000元至420,000元的部分 25% 31,920 超过420,000元至660,000元的部分 30% 52,920 超过660,000元至960,000元的部分 35% 85,920 超过960,000元的部分 45% 181,920 可以看出，如果按照草案执行，收入在90-200万元，奖金占总收入比例在20%-60%（也就是年终奖为3-18个月月薪）的相对高收入中产是最不幸的，不但没有获得减税，反而被加了税，最高可能要多缴纳总收入4-5%的税。考虑到收入在250万以上的人群年终奖占比都会比较高，所以大部分真正高收入的人群，比如年薪几千万的某保险公司老总这种反而能获得一小点减税（至少不会被加税，虽然他们也不会在意这么几万元钱）。当然，一直宣传的给低收入群体减税也算是实现了吧。","tags":[],"categories":[{"name":"其他","slug":"其他","permalink":"http://yoursite.com/categories/其他/"}]},{"title":"MFC","date":"2018-06-26T13:02:16.000Z","path":"2018/06/26/MFC/","text":"Function call flow123456CDialog::PreInitDialog()CDialog::HandleInitDialog(WPARAM, LPARAM)CDemoDlg::OnInitDialog()CDialog::CheckAutoCenter()CDialog::OnCmdMsg(nID, nCode, pExtra, pHandlerInfo);CDialog::PreTranslateMessage(pMsg) Solve “Opened in another editor” in Resource ViewClose “Resource.h” and all “.rc” file. Then shrink and re-expand the “rc” folder in Resource View.","tags":[],"categories":[]},{"title":"Tesseract","date":"2018-06-26T13:02:15.000Z","path":"2018/06/26/Tesseract/","text":"Install1. Required package123apt install autoconf-archive automake g++ libtool make pkg-config # for main recognizationapt install asciidoc # for documentapt-get install libicu-dev libpango1.0-dev libcairo2-dev # for training tool 1.1 Build libleptonica-dev from source1234567sudo -i # build as rootwget http://www.leptonica.org/source/leptonica-1.76.0.tar.gz # check http://www.leptonica.org/download.html for latest versiontar -xzf leptonica-1.76.0.tar.gzcd leptonica-1.76.0/./configuremakemake install 2. Clone tesseract from github1git clone https://github.com/tesseract-ocr/tesseract.git tesseract 3. Build as non-root user1234./autogen.sh./configure --prefix=$HOME/tesseract/bin/makemake install 4. Build training tool12make trainingmake training-install 5. Get trained dataDownload required language from https://github.com/tesseract-ocr/tesseract/wiki/Data-Files","tags":[],"categories":[]},{"title":"关于减轻功夫墙（GFW）造成的不便的一些探讨","date":"2018-06-26T13:02:15.000Z","path":"2018/06/26/About-GongFu-Wall/","text":"使用gooreplacer重定向对Google的访问 众所周知，天朝无法访问任何Google的服务。但不幸很多外国网站，如码农必备的Stackoverflow等都会调用Google的API，这就导致了这些网站访问速度巨慢，功能不全等问题。在网上发现了有人开发的关于可以重定向Google API到国内镜像的插件，可以用于Firefox和Google Chrome上。特记录于此：插件地址：https://github.com/jiacai2050/gooreplacer如果只需要重定向Google的访问，可以复制如下Rules，保存为.gson格式后导入。1234567891011121314151617181920212223242526272829303132333435363738394041&#123; &quot;createBy&quot;: &quot;http://liujiacai.net/gooreplacer/&quot;, &quot;createAt&quot;: &quot;Tue Jan 10 2017 17:45:39 GMT+0000&quot;, &quot;rules&quot;: &#123; &quot;ajax.googleapis.com&quot;: &#123; &quot;dstURL&quot;: &quot;ajax.proxy.ustclug.org&quot;, &quot;kind&quot;: &quot;wildcard&quot;, &quot;enable&quot;: true &#125;, &quot;storage.googleapis.com&quot;: &#123; &quot;dstURL&quot;: &quot;storage-googleapis.proxy.ustclug.org&quot;, &quot;kind&quot;: &quot;wildcard&quot;, &quot;enable&quot;: true &#125;, &quot;gerrit.googlesource.com&quot;: &#123; &quot;dstURL&quot;: &quot;gerrit-googlesource.proxy.ustclug.org&quot;, &quot;kind&quot;: &quot;wildcard&quot;, &quot;enable&quot;: true &#125;, &quot;themes.googleusercontent.com&quot;: &#123; &quot;dstURL&quot;: &quot;google-themes.proxy.ustclug.org&quot;, &quot;kind&quot;: &quot;wildcard&quot;, &quot;enable&quot;: true &#125;, &quot;platform.twitter.com/widgets.js&quot;: &#123; &quot;dstURL&quot;: &quot;cdn.rawgit.com/jiacai2050/gooreplacer/gh-pages/proxy/widgets.js&quot;, &quot;kind&quot;: &quot;wildcard&quot;, &quot;enable&quot;: true &#125;, &quot;apis.google.com/js/api.js&quot;: &#123; &quot;dstURL&quot;: &quot;cdn.rawgit.com/jiacai2050/gooreplacer/gh-pages/proxy/api.js&quot;, &quot;kind&quot;: &quot;wildcard&quot;, &quot;enable&quot;: true &#125;, &quot;apis.google.com/js/plusone.js&quot;: &#123; &quot;dstURL&quot;: &quot;cdn.rawgit.com/jiacai2050/gooreplacer/gh-pages/proxy/plusone.js&quot;, &quot;kind&quot;: &quot;wildcard&quot;, &quot;enable&quot;: true &#125; &#125;&#125; 目前该插件存在一点问题，就是配置是基于Cookies保存的，如果浏览器设置了隐私模式或清除了Cookies，配置会丢失。 Use PAC list for ss Install GenPAC (reference https://github.com/JinnLynn/GenPAC) 1pip install genpac Download url list 1genpac --pac-proxy \"SOCKS5 127.0.0.1:1080\" --gfwlist-proxy=\"SOCKS5 127.0.0.1:1080\" --output=\"mypac.pac\" Setup global proxy in system","tags":[{"name":"GFW, gooreplacer, ss","slug":"GFW-gooreplacer-ss","permalink":"http://yoursite.com/tags/GFW-gooreplacer-ss/"}],"categories":[]},{"title":"Git ticks","date":"2018-06-26T13:02:14.000Z","path":"2018/06/26/Git-ticks/","text":"Caching GitHub password in GitIn Terminal, enter the following:12git config --global credential.helper cache# Set git to use the credential memory cache To change the default password cache timeout, enter the following:12git config --global credential.helper 'cache --timeout=3600'# Set the cache to timeout after 1 hour (setting is in seconds) Or alternatively, store forever:1git config --global credential.helper store revert local change to previous commit1git checkout -- readme.txt # revert readme.txt to previous commit or123git fetch --allgit reset --hard origin/mastergit pull // can be ignored","tags":[],"categories":[]},{"title":"Install HP print driver on Linux mint","date":"2018-06-26T13:02:13.000Z","path":"2018/06/26/Install-HP-print-driver-on-Linux-mint/","text":"HPIP download address: https://developers.hp.com/hp-linux-imaging-and-printing/gethplip","tags":[],"categories":[]},{"title":"pandas tricks","date":"2018-06-26T13:02:12.000Z","path":"2018/06/26/pandas-tricks/","text":"Pandas display setup123456pd.set_option('max_rows', 500)#param choices# display.height# width# max_rows# max_columns","tags":[],"categories":[]},{"title":"build etherminer","date":"2018-06-26T13:02:11.000Z","path":"2018/06/26/build-etherminer/","text":"1234mkdir buildcd buildcmake ..make","tags":[],"categories":[]},{"title":"Linux Mint Cleanup","date":"2018-06-26T13:02:09.000Z","path":"2018/06/26/Linux-Mint-Cleanup/","text":"Clean up old kernel123uname -r #check current using kerneldpkg --get-selections |grep linux # list installed kernelsapt purge xxx # remove","tags":[],"categories":[]},{"title":"Build Tensorflow from source on Linux Mint","date":"2018-06-26T13:02:09.000Z","path":"2018/06/26/Build-Tensorflow-from-source-on-Linux-Mint/","text":"Install Bazel (a ) Install JDK 8 Install JDK 8 by using: 1apt install openjdk-8-jdk Add Bazel distribution URI as a package source (one time setup) 12echo \"deb [arch=amd64] http://storage.googleapis.com/bazel-apt stable jdk1.8\" | tee /etc/apt/sources.list.d/bazel.listcurl https://bazel.build/bazel-release.pub.gpg | sudo apt-key add - If you want to install the testing version of Bazel, replace stable with testing. Install and update Bazel 12apt updateapt install bazel Install CUDA and cuDNN (Details ignored, refer to ) Clone the TensorFlow repository 1git clone --recurse-submodules https://github.com/tensorflow/tensorflow --recurse-submodules is used to clone the dependency library protobuf. Install other dependency 1apt-get install python3-numpy swig python3-dev libgrpc-dev Configuration 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980You have bazel 0.10.1 installed.Please specify the location of python. [Default is /usr/bin/python]: /usr/local/anaconda3/bin/pythonFound possible Python library paths: /usr/local/anaconda3/lib/python3.6/site-packagesPlease input the desired Python library path to use. Default is [/usr/local/anaconda3/lib/python3.6/site-packages]Do you wish to build TensorFlow with jemalloc as malloc support? [Y/n]: yjemalloc as malloc support will be enabled for TensorFlow.Do you wish to build TensorFlow with Google Cloud Platform support? [Y/n]: yGoogle Cloud Platform support will be enabled for TensorFlow.Do you wish to build TensorFlow with Hadoop File System support? [Y/n]: nNo Hadoop File System support will be enabled for TensorFlow.Do you wish to build TensorFlow with Amazon S3 File System support? [Y/n]: nNo Amazon S3 File System support will be enabled for TensorFlow.Do you wish to build TensorFlow with Apache Kafka Platform support? [y/N]: nNo Apache Kafka Platform support will be enabled for TensorFlow.Do you wish to build TensorFlow with XLA JIT support? [y/N]: yXLA JIT support will be enabled for TensorFlow.Do you wish to build TensorFlow with GDR support? [y/N]: nNo GDR support will be enabled for TensorFlow.Do you wish to build TensorFlow with VERBS support? [y/N]: nNo VERBS support will be enabled for TensorFlow.Do you wish to build TensorFlow with OpenCL SYCL support? [y/N]: nNo OpenCL SYCL support will be enabled for TensorFlow.Do you wish to build TensorFlow with CUDA support? [y/N]: yCUDA support will be enabled for TensorFlow.Please specify the CUDA SDK version you want to use, e.g. 7.0. [Leave empty to default to CUDA 9.0]: 9.1Please specify the location where CUDA 9.1 toolkit is installed. Refer to README.md for more details. [Default is /usr/local/cuda]: Please specify the cuDNN version you want to use. [Leave empty to default to cuDNN 7.0]: 7.0.5Please specify the location where cuDNN 7 library is installed. Refer to README.md for more details. [Default is /usr/local/cuda]: /usrDo you wish to build TensorFlow with TensorRT support? [y/N]: nNo TensorRT support will be enabled for TensorFlow.Please specify a list of comma-separated Cuda compute capabilities you want to build with.You can find the compute capability of your device at: https://developer.nvidia.com/cuda-gpus.Please note that each additional compute capability significantly increases your build time and binary size. [Default is: 3.5,5.2]6.1Do you want to use clang as CUDA compiler? [y/N]: nnvcc will be used as CUDA compiler.Please specify which gcc should be used by nvcc as the host compiler. [Default is /usr/bin/gcc]: Do you wish to build TensorFlow with MPI support? [y/N]: yMPI support will be enabled for TensorFlow.Please specify the MPI toolkit folder. [Default is ]: /usrPlease specify optimization flags to use during compilation when bazel option \"--config=opt\" is specified [Default is -march=native]: Would you like to interactively configure ./WORKSPACE for Android builds? [y/N]: nNot configuring the WORKSPACE for Android builds.Preconfigured Bazel build configs. You can use any of the below by adding \"--config=&lt;&gt;\" to your build command. See tools/bazel.rc for more details.true--config=mkl # Build with MKL support.true--config=monolithic # Config for mostly static monolithic build.Configuration finished Build 1bazel build -c opt --config=cuda //tensorflow/cc:tutorials_example_trainer Test run 1bazel-bin/tensorflow/cc/tutorials_example_trainer --use_gpu Build pip package Create an env under Anaconda specified for tensorflow (assuming that Anaconda is installed) 1/usr/local/anaconda3/bin/conda create -n tensorflow pip python=3.6.4 anaconda Activate the env 1source /usr/local/anaconda3/bin/activate tensorflow Build under the env 1234567891011# To resolve the error caused by location of mpi header files in system is not consistent with tensorflowrm -rf third_party/mpi/mpi*.hln -s /usr/include/mpich/mpi.h third_party/mpi/mpi.hln -s /usr/include/mpich/mpicxx.h third_party/mpi/mpicxx.hln -s /usr/include/mpich/mpio.h third_party/mpi/mpio.h# buildbazel build --config=opt --config=cuda //tensorflow/tools/pip_package:build_pip_package# generate wheel in /tmp/tensorflow_pkgbazel-bin/tensorflow/tools/pip_package/build_pip_package /tmp/tensorflow_pkg Install under Anaconda env 1pip install /tmp/tensorflow_pkg/tensorflow-1.6.0rc1-cp36-cp36m-linux_x86_64.whl Test installation 12345# enter tensorflow envsource /usr/local/anaconda3/bin/activate tensorflow# enter pythonpython In python interactive 1234567Python 3.6.4 |Anaconda, Inc.| (default, Jan 16 2018, 18:10:19) [GCC 7.2.0] on linuxType \"help\", \"copyright\", \"credits\" or \"license\" for more information.&gt;&gt;&gt; import tensorflow as tf&gt;&gt;&gt; tf.__version__'1.6.0-rc1'&gt;&gt;&gt; Reference Bazel installation guide: https://docs.bazel.build/versions/master/install-ubuntu.html Tensorflow: https://tensorflow.google.cn/install/install_sources","tags":[],"categories":[]},{"title":"Hello World","date":"2018-06-26T12:52:48.253Z","path":"2018/06/26/hello-world/","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","tags":[],"categories":[]}]}