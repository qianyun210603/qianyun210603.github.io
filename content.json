{"pages":[{"title":"About","date":"2022-09-26T09:30:20.890Z","path":"about/index.html","text":""},{"title":"Categories","date":"2022-09-26T09:30:20.345Z","path":"categories/index.html","text":""},{"title":"Tags","date":"2022-09-26T09:30:18.753Z","path":"tags/index.html","text":""}],"posts":[{"title":"Github：解除Fork关系","date":"2024-09-26T00:27:50.000Z","path":"2024/09/26/github_detach_fork/","text":"开发者在利用GitHub进行项目开发时，常会遇到与Fork操作相关的一系列挑战，尤其是在项目独立发展后，这些挑战尤为突出。以下是几个关键问题及其有条理的重述： ¶1. 项目独立发展后的管理难题 深度定制与分化：最初通过Fork一个仓库开始的项目，随着时间推移，可能经历了从功能扩展到开发语言的变更，导致该仓库与原始父仓库在各个方面都已显著分化，各自独立发展。 ¶2. Pull Request的误操作风险 默认目标分支问题：由于项目是从Fork开始的，每次创建Pull Request（PR）时，GitHub默认将父仓库作为目标分支，这增加了不小心将更改提交到父仓库的风险，可能导致不必要的混乱或冲突。 ¶3. 社区与贡献度显示的局限性 贡献者识别缺失：在Fork的仓库中，即使有人做出了重要贡献，这些贡献在GitHub上可能无法被正确归因，因为系统主要基于原始仓库来追踪贡献者。 项目影响力不明：此外，由于Fork的仓库与父仓库在GitHub上的关联，很难直观地展示该项目被哪些其他项目所依赖或使用，这限制了项目的曝光度和影响力评估。 ¶4. 与父仓库分离的需求 缺乏直接解决方案：鉴于上述问题，开发者可能希望将Fork的仓库与父仓库正式分离，以便更好地管理项目、展示贡献者及影响力。然而，GitHub当前并未提供直接的“Unfork”或“Detach”功能来实现这一需求。 ¶解决方案 ¶删除并重新创建仓库 打开Git Bash。 创建一个 Fork 的裸克隆。 1git clone --bare https://github.com/EXAMPLE-USER/FORK-NAME.git 删除Fork的仓库。 警告：删除 Fork 将永久删除所有相关的拉取请求（Pull Requests）和配置。此操作无法撤销。 在同一位置使用相同的名称创建一个新仓库。 将仓库镜像推送到相同的远程 URL。 12cd FORK-NAME.gitgit push --mirror https://github.com/EXAMPLE-USER/FORK-NAME.git 删除之前创建的临时本地克隆。 12cd ..rm -rf FORK-NAME.git 请注意，上述步骤中的EXAMPLE-USER和FORK-NAME需要替换为您实际的GitHub用户名和Fork仓库的名称。此外，git push --mirror命令会将所有引用（包括分支和标签）以及对象推送到远程仓库，这通常用于镜像或备份目的。在这个场景中，它被用来将本地裸克隆的内容推送到新创建的GitHub仓库中，从而“重建”Fork，但不再与原始仓库有 Fork 关系。 这种方法的缺点是会丢失原有的Issues，Wiki等。 ¶联系Github Support 可以直接点击下面链接： https://support.github.com/contact?tags=rr-forks&amp;subject=Detach Fork&amp;flow=detach_fork 然后根据virtual-assistant的提示一步步进行，之后会自动生成Ticket，等待Github客服处理。一般一个工作日内就能收到解决完毕的邮件了。 ¶参考资料 Detaching a fork Delete fork dependency of a GitHub repository","tags":[],"categories":[{"name":"Programming","slug":"Programming","permalink":"https://booksword.top/categories/Programming/"},{"name":"Git","slug":"Programming/Git","permalink":"https://booksword.top/categories/Programming/Git/"}]},{"title":"properly_terminate_qthread_in_pyqt","date":"2024-09-15T23:42:13.000Z","path":"2024/09/16/properly_terminate_qthread_in_pyqt/","text":"如果程序中使用了QThread，需要正确销毁，否则会在程序退出时崩溃。 定义finished信号在worker类里面； 在finished对应的槽函数里面调用QThread的quit()和wait()函数； QThread自带finished函数，将其链接到QThread对应的deleteLater()函数上。 示例： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657import sysfrom PyQt6.QtCore import QThread, pyqtSignal, QObject, pyqtSlot, QMetaObjectfrom PyQt6.QtWidgets import QApplication, QWidget, QPushButton, QVBoxLayoutfrom pydev_ipython.qt import QtCoreclass Worker(QObject): finished = pyqtSignal() def __init__(self, parent=None): super(Worker, self).__init__(parent) def run(self): import time for i in range(1, 11): time.sleep(1) print(i) self.finished.emit()class MainApp(QWidget): def __init__(self): super(MainApp, self).__init__() self.setWindowTitle(&quot;QThread Example&quot;) layout = QVBoxLayout() self.setLayout(layout) self.setGeometry(100, 100, 400, 200) self.btn = QPushButton(&quot;Start Thread&quot;) layout.addWidget(self.btn) self.btn.clicked.connect(self.start_thread) def start_thread(self): self.worker = Worker(parent=self) self.worker.setObjectName(&quot;worker1&quot;) self.thread = QThread() self.worker.moveToThread(self.thread) self.thread.started.connect(self.worker.run) # self.worker.finished.connect(self.on_worker_finished) self.worker.finished.connect(self.worker.deleteLater) self.thread.finished.connect(self.thread.deleteLater) QMetaObject.connectSlotsByName(self) self.thread.start() @pyqtSlot() def on_worker1_finished(self): print(&quot;Worker finished&quot;) self.thread.quit() self.thread.wait() print(&quot;Thread finished&quot;)if __name__ == &#x27;__main__&#x27;: app = QApplication(sys.argv) window = MainApp() window.show() sys.exit(app.exec()) ¶参考资料","tags":[],"categories":[{"name":"Programming","slug":"Programming","permalink":"https://booksword.top/categories/Programming/"},{"name":"Python","slug":"Programming/Python","permalink":"https://booksword.top/categories/Programming/Python/"}]},{"title":"【C++知识库】定义指向成员函数的函数指针","date":"2024-07-04T01:55:23.000Z","path":"2024/07/04/cpp##function_ptr_to_member_function/","text":"要在 C++ 中定义一个指向类成员函数的原始函数指针，你需要知道成员函数有一个隐式的 this 指针作为它们的第一个参数，这使它们与自由函数或静态成员函数区别开来。因此，声明指向成员函数的指针的语法包括类名和 ::* 操作符。 这是定义指向非静态成员函数的原始函数指针的一般语法： 1ReturnType (ClassName::*pointerName)(ParameterTypes...) = &amp;ClassName::FunctionName; ¶示例： 考虑一个类 MyClass，它有一个成员函数 doSomething： 123456class MyClass &#123;public: void doSomething(int value) &#123; // 实现 &#125;&#125;; 要定义一个指向 doSomething 成员函数的指针，你可以这样写： 1void (MyClass::*funcPtr)(int) = &amp;MyClass::doSomething; ¶使用成员函数指针： 要使用这个指针，你需要一个 MyClass 的实例，并使用 .* 操作符（如果你使用的是指向实例的指针，则使用 -&gt;*）来调用函数： 12345MyClass myObject;(myObject.*funcPtr)(10); // 使用对象实例MyClass* myObjectPtr = new MyClass();(myObjectPtr-&gt;*funcPtr)(10); // 使用指向对象的指针 ¶关于 Const 成员函数的说明： 1void (MyClass::*funcPtrConst)(int) const = &amp;MyClass::FunctionName; ¶静态成员函数： 静态成员函数没有 this 指针，可以被常规函数指针指向，不需要类特定的语法： 1ReturnType (*pointerName)(ParameterTypes...) = &amp;ClassName::StaticFunctionName; ¶参考资料 Github Copilot","tags":[],"categories":[{"name":"Programming","slug":"Programming","permalink":"https://booksword.top/categories/Programming/"},{"name":"C++","slug":"Programming/C","permalink":"https://booksword.top/categories/Programming/C/"}]},{"title":"【C++知识库】关于std::function的开销","date":"2024-07-01T02:26:49.000Z","path":"2024/07/01/cpp##_stdfunction/","text":"在 C++ 中使用 std::function 相比于使用函数指针或直接函数调用会引入一定的运行时成本。这个成本主要是由于 std::function 使用的类型擦除机制，使其能够存储、复制和调用任何与其签名匹配的可调用目标（函数、lambda 表达式、bind 表达式或其他函数对象）。以下是导致其运行时成本的关键因素： 间接性：std::function 涉及一个额外的间接层级。当你调用一个 std::function 时，它内部通过指向虚函数表（vtable）的指针调用存储的可调用对象。这种间接性可以阻止某些编译器优化，如内联，这些优化对于直接函数调用或甚至是函数指针来说更可行。 堆分配：对于超出小对象优化（SOO）阈值（这是实现定义的）的可调用对象，std::function 可能会执行堆分配。这可能引入动态内存分配/释放的开销，并可能导致堆碎片化。然而，对于小对象，std::function 通常使用一种优化来在栈上存储对象，避免了堆分配。 类型擦除开销：使 std::function 能够存储任何匹配签名的可调用类型的类型擦除机制也引入了开销。这是因为它必须维护对各种可调用类型的统一接口，这涉及到存储额外的元数据，并可能执行动态类型检查。 复制/移动操作：复制或移动 std::function 对象可能比简单的函数指针更昂贵，特别是如果存储的可调用对象很大或需要堆分配。成本取决于存储的可调用对象的复制/移动操作的复杂性。 尽管存在这些开销，std::function 在许多场景中都是非常通用且有用的，例如当你需要存储回调、实现信号-槽机制或处理高阶函数时。它提供的灵活性和类型安全性通常可以证明这些运行时成本是合理的。然而，对于性能关键的代码路径，每个周期都很重要，考虑使用直接函数调用、函数指针或模板基础解决方案可能是更高效的选择，编译器可以对其进行更有效的优化。 ¶参考资料 Github Copilot","tags":[],"categories":[{"name":"Programming","slug":"Programming","permalink":"https://booksword.top/categories/Programming/"},{"name":"C++","slug":"Programming/C","permalink":"https://booksword.top/categories/Programming/C/"}]},{"title":"【C++知识库】关于stdafx.h","date":"2024-06-30T23:36:36.000Z","path":"2024/07/01/Cpp1##stdafx/","text":"stdafx.h是Visual Studio项目中用于加速构建过程的预编译头文件。stdafx.h的名称是传统上的，来源于Visual Studio的早期版本，但它本身没有任何内在的含义。使用预编译头文件可以显著减少大型项目的编译时间。 ¶预编译头文件的工作原理 当你编译一个 C++ 程序时，编译器会处理每个编译单元（通常是一个 .cpp 文件）中包含的头文件。这个过程可能非常耗时，特别是对于有许多头文件在多个编译单元中被包含的大型项目。为了优化这一点，引入了预编译头文件的概念。 预编译头文件被编译一次，然后在多个编译单元中重用。这意味着，只要这些头文件没有改变，编译器就可以跳过在每个编译单元中处理预编译头文件中包含的头文件，从而加速编译过程。 ¶stdafx.h和stdafx.cpp stdafx.h：这个文件通常包含 C++ 标准库的头文件、外部库的头文件以及其他项目特定的、不经常改变的头文件。通过在 stdafx.h 中包含这些头文件，你确保它们只被编译一次，然后被重用，从而加速后续的编译。 stdafx.cpp：这个文件用于创建预编译头文件。它通常只包含一行代码：#include “stdafx.h”。当这个文件被编译时，它会生成预编译头文件（.pch）。 ¶为什么 Visual Studio 会自动提供 stdafx.h Visual Studio在启用预编译头文件的项目中自动提供stdafx.h，是为了鼓励使用这个功能来加快构建时间。对于较大的项目或有许多外部库的项目，使用预编译头文件特别有益。 ¶参考资料 Github Copilot","tags":[],"categories":[{"name":"Programming","slug":"Programming","permalink":"https://booksword.top/categories/Programming/"},{"name":"C++","slug":"Programming/C","permalink":"https://booksword.top/categories/Programming/C/"}]},{"title":"acme.sh申请SSL证书的一点经验","date":"2024-06-29T16:12:12.000Z","path":"2024/06/30/sh申请证书的一点经验/","text":"¶acme.sh安装 12curl https://get.acme.sh | sh -s email=business@kailinjt.comalias acme.sh=&#x27;/root/.acme.sh/acme.sh&#x27; ¶CA机构 Let’s Encrypt不晚于2024-06-29强制要求DNSSEC，否则报错DNSSEC: DNSKEY Missing。但鹅厂的DNSPod需要付费才能开启DNSSEC，故放弃。 可以通过VERISIGN™//LABS查看域名的DNSSEC状态。 切换默认CA到ZeroSSL 1acme.sh --set-default-ca --server zerossl ZeroSSL需要登记下邮箱 1acme.sh --register-account -m qianyun6@sina.com --server zerossl ¶通过DNSPod认证获取证书 获取腾讯云SecretId和SecretKey 参考acme.sh 自动解析并申请证书 将获取的SecretId和SecretKey设为环境变量： 12export Tencent_SecretId=&quot;&lt;Your SecretId&gt;&quot;export Tencent_SecretKey=&quot;&lt;Your SecretKey&gt;&quot; 用acem.sh获取证书 1acme.sh --issue --dns dns_tencent -d &lt;your domain&gt;","tags":[],"categories":[{"name":"其他","slug":"其他","permalink":"https://booksword.top/categories/%E5%85%B6%E4%BB%96/"}]},{"title":"KDB+效能玩票测试","date":"2024-04-10T22:12:43.000Z","path":"2024/04/11/KDB+效能玩票测试/","text":"¶动因 之前使用Man-Group的Arctic系统（老Arctic，基于MongoDB的那个）存储各种交易标的的数据，但发现比较慢。测试下传说中的KDB+看能否替换。目前并不期望能使用KDB+强项的内部计算（由于q语言学习成本过高），只是简单作为时序数据库使用，支持读取写入增删改查即可。 ¶架构 使用一台Linux主机作为数据库服务器，与客户机在同一个局域网（千兆以太网）下。具体配置过程略。 ¶简单测试 使用数据是浦发银行（600000.SSE）的1分钟数据，长度大约10年，一共599280行x9列。 写入 KDB+: 1t = con(&#x27;&#123;`:trade/ set x&#125;&#x27;, df1) CPU times: total: 844 ms Wall time: 574 ms Arctic: 1barlib.write(&quot;test_1m&quot;, df1) CPU times: total: 1.48 s Wall time: 1.62 s 整体读取 KDB+: 123%%timea = con(&#x27;get `:trade&#x27;)df_get = a.pd().set_index(&quot;date&quot;) CPU times: total: 297 ms Wall time: 338 ms Arctic: 1barlib.read(&quot;test_1m&quot;) CPU times: total: 2.08 s Wall time: 3.24 s 部分读取 KDB+ 12a_p = con(&quot;select date, open, close from `:trade where date within 2023.01.01T10:00 2024.03.01T14:00&quot;)df_get_p = a_p.pd().set_index(&quot;date&quot;) CPU times: total: 15.6 ms Wall time: 18 ms Arctic 1barlib.read(&quot;test_1m&quot;, chunk_range=DateRange(&quot;2023.01.01 10:00&quot;, &quot;2024.03.01T14:00&quot;), columns=[&quot;open&quot;, &quot;close&quot;]) CPU times: total: 188 ms Wall time: 332 ms","tags":[],"categories":[{"name":"数据库","slug":"数据库","permalink":"https://booksword.top/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"},{"name":"KDB+","slug":"数据库/KDB","permalink":"https://booksword.top/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/KDB/"}]},{"title":"【Python知识库】Python中的PriorityQueue测试","date":"2024-03-16T00:15:40.000Z","path":"2024/03/16/Python中的PriorityQueue测试/","text":"Python官方提供一个PriorityQueue，可以按优先级取出Push入队的对象，但这个Queue不稳定（即相同优先级并不保证先进先出）。 测试代码： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145from collections import defaultdictfrom queue import Empty, Queue, PriorityQueuefrom threading import Thread, get_identfrom time import sleepfrom typing import Any, Callable, Listfrom datetime import datetimeEVENT_SLEEP = &quot;eSleep&quot;class Event: &quot;&quot;&quot; Event object consists of a type string which is used by event engine for distributing event, and a data object which contains the real data. &quot;&quot;&quot; def __init__(self, etype: str, data: Any = None, priority: int = 100) -&gt; None: &quot;&quot;&quot;&quot;&quot;&quot; self.type: str = etype self.priority = priority self.data: Any = data def __lt__(self, other): return self.priority &gt; other.priority def __le__(self, other): return self.priority &gt;= other.priority# Defines handler function to be used in event engine.HandlerType: callable = Callable[[Event], None]class EventEngine: &quot;&quot;&quot; Event engine distributes event object based on its type to those handlers registered. It also generates timer event by every interval seconds, which can be used for timing purpose. &quot;&quot;&quot; def __init__(self, interval: int = 1, using_priority = False) -&gt; None: &quot;&quot;&quot; Timer event is generated every 1 second by default, if interval not specified. &quot;&quot;&quot; self._interval: int = interval self._queue: Queue = PriorityQueue() if using_priority else Queue() self._active: bool = False self._thread: Thread = Thread(target=self._run) self._handlers: defaultdict = defaultdict(list) def _run(self) -&gt; None: &quot;&quot;&quot; Get event from queue and then process it. &quot;&quot;&quot; print(f&quot;Event engine started. Thread ID: &#123;get_ident()&#125;&quot;) while self._active: try: event: Event = self._queue.get(block=True, timeout=1) self._process(event) except Empty: # logger.info(f&quot;Event Queue empty. Thread ID: &#123;get_ident()&#125;&quot;) pass def _process(self, event: Event) -&gt; None: &quot;&quot;&quot; First distribute event to those handlers registered listening to this type. Then distribute event to those general handlers which listens to all types. &quot;&quot;&quot; if event.type in self._handlers: for handler in self._handlers[event.type]: handler(event) def start(self) -&gt; None: &quot;&quot;&quot; Start event engine to process events and generate timer events. &quot;&quot;&quot; self._active = True self._thread.start() def stop(self) -&gt; None: &quot;&quot;&quot; Stop event engine. &quot;&quot;&quot; self._active = False self._thread.join() def put(self, event: Event) -&gt; None: &quot;&quot;&quot; Put an event object into event queue. &quot;&quot;&quot; self._queue.put(event) def register(self, etype: str, handler: HandlerType) -&gt; None: &quot;&quot;&quot; Register a new handler function for a specific event type. Every function can only be registered once for each event type. &quot;&quot;&quot; handler_list: list = self._handlers[etype] if handler not in handler_list: handler_list.append(handler) def unregister(self, etype: str, handler: HandlerType) -&gt; None: &quot;&quot;&quot; Unregister an existing handler function from event engine. &quot;&quot;&quot; handler_list: list = self._handlers[etype] if handler in handler_list: handler_list.remove(handler) if not handler_list: self._handlers.pop(type)def process_sleep_event(event): name, sleepseconds = event.data print(f&quot;In &#123;get_ident()&#125;, Task &#123;name&#125; sleep &#123;sleepseconds&#125; start @ &#123;datetime.now().isoformat()&#125;&quot;) sleep(sleepseconds) print(f&quot;In &#123;get_ident()&#125;, Task &#123;name&#125; sleep &#123;sleepseconds&#125; end @ &#123;datetime.now().isoformat()&#125;&quot;)if __name__ == &quot;__main__&quot;: print(f&quot;main thread: &#123;get_ident()&#125; start @ &#123;datetime.now().isoformat()&#125;&quot;) engine = EventEngine(using_priority=True) print(f&quot;using &#123;type(engine._queue)&#125;&quot;) engine.register(EVENT_SLEEP, process_sleep_event) engine.start() engine.put(Event(EVENT_SLEEP, (&quot;1st_1sec_event&quot;, 1))) engine.put(Event(EVENT_SLEEP, (&quot;2nd_1sec_event&quot;, 1), priority=50)) engine.put(Event(EVENT_SLEEP, (&quot;3rd_5sec_event&quot;, 5))) engine.put(Event(EVENT_SLEEP, (&quot;4th_5sec_event&quot;, 5), priority=200)) sleep(13) engine.put(Event(EVENT_SLEEP, (&quot;5th_5sec_event&quot;, 3), priority=300)) engine.stop() print(f&quot;main thread: &#123;get_ident()&#125;, exit @ &#123;datetime.now().isoformat()&#125;&quot;) 输出： 1234567891011121314main thread: 117652 start @ 2024-03-16T15:58:45.398626using &lt;class &#x27;queue.PriorityQueue&#x27;&gt;Event engine started. Thread ID: 102312In 102312, Task 4th_5sec_event sleep 5 start @ 2024-03-16T15:58:45.399626In 102312, Task 4th_5sec_event sleep 5 end @ 2024-03-16T15:58:50.402557In 102312, Task 3rd_5sec_event sleep 5 start @ 2024-03-16T15:58:50.402557In 102312, Task 3rd_5sec_event sleep 5 end @ 2024-03-16T15:58:55.413506In 102312, Task 1st_1sec_event sleep 1 start @ 2024-03-16T15:58:55.413506In 102312, Task 1st_1sec_event sleep 1 end @ 2024-03-16T15:58:56.418677In 102312, Task 2nd_1sec_event sleep 1 start @ 2024-03-16T15:58:56.418677In 102312, Task 2nd_1sec_event sleep 1 end @ 2024-03-16T15:58:57.424852In 102312, Task 5th_5sec_event sleep 3 start @ 2024-03-16T15:58:58.403006In 102312, Task 5th_5sec_event sleep 3 end @ 2024-03-16T15:59:01.406562main thread: 117652, exit @ 2024-03-16T15:59:01.406562 ¶参考资料 官方文档","tags":[],"categories":[{"name":"Programming","slug":"Programming","permalink":"https://booksword.top/categories/Programming/"},{"name":"Python","slug":"Programming/Python","permalink":"https://booksword.top/categories/Programming/Python/"}]},{"title":"CTP踩坑记","date":"2024-01-21T02:38:25.000Z","path":"2024/01/21/CTP踩坑记/","text":"¶数据篇 郑商所数据垃圾值 部分日夜盘最后一个tick的时间戳会被标到第二日； 夜盘开始时20:5x会有垃圾tick； 没有最后修改毫秒，需要自己插值； K线合成 注意每个交易时间段最后一个tick。比如合成5分钟K线，对9:00-10:15时间段，10:15整可能会有一个tick需要归到10:10开始的K线里。 一般的行情软件和数据商，包括TB、天软、米筐K线按第一个有成交的tick来计算，但CTP推送的时候按500ms切片，即便无成交。 可能有些高/低价包含在500ms内，从而不能从last_price得知。目前能做到的最好是参考CTP推送的日内最高/低价修正部分。 ¶接口篇 似乎有两个乘数【合约数量乘数】和【合约基础商品乘数】，分别定义为1234///合约数量乘数TThostFtdcVolumeMultipleType VolumeMultiple;///合约基础商品乘数TThostFtdcUnderlyingMultipleType UnderlyingMultiple; 按文档，标的期货保证金为 [标的期货合约结算价×期货合约乘数×标的期货合约交易所保证金率（按金额）+ 标的期货合约交易所保证金 率(按手数) ]×基础商品乘数 这个【合约基础商品乘数】到底怎么用的？","tags":[],"categories":[{"name":"Programming","slug":"Programming","permalink":"https://booksword.top/categories/Programming/"},{"name":"CTP","slug":"Programming/CTP","permalink":"https://booksword.top/categories/Programming/CTP/"}]},{"title":"发布Python包到PyPi上","date":"2024-01-20T23:30:21.000Z","path":"2024/01/21/publish_python_package_pypi/","text":"确保Python包至少要有写好的setup.py(或setup.cfg)、README.md和一个协议文件LICENSE。同时包名不得与Pypi上已有的包冲突。 安装必要的工具： 1pip install setuptools wheel twine 如果使用setup.cfg还需要build包： 1pip install build 更新setup.py或setup.cfg里的版本号，PyPi不允许重复版本号。 1version = X.Y.Z 将版本提交到版本控制系统（如Github）,并创建相应的tag 123git commit -am &quot;Release version X.Y.Z&quot;git tag X.Y.Zgit push origin X.Y.Z 创建源代码和wheel文件发布 1python -m build 注册PyPi账号于https://pypi.org/，按提示步骤操作，并开启2FA验证（可以用Google或微软的Authenticator APP）。 PyPi现在强制使用token验证，所以需要在&quot;Account Setting&quot;里面生成一个API token。然后在用户目录里面创建一个.pypirc文件填充如下内容（username就是那个带前后下划线的&quot;token&quot;,password换成系统生成的API token）。 123[pypi]username = __token__password = pypi-********** 使用twine上传 1twine upload dist/*","tags":[],"categories":[{"name":"Programming","slug":"Programming","permalink":"https://booksword.top/categories/Programming/"},{"name":"Python","slug":"Programming/Python","permalink":"https://booksword.top/categories/Programming/Python/"}]},{"title":"数据源问题集锦","date":"2024-01-20T23:30:21.000Z","path":"2024/01/21/数据源问题集锦/","text":"¶米筐【RQData】 ¶天软【Tinysoft】 [ ] K线合成问题: 例如fu2405.SHFE，2024-03-06 13：55（起始时间，天软的实际是标明结束时间）的5分钟K。 ¶上期CTP （见CTP踩坑记）","tags":[],"categories":[{"name":"交易策略开发","slug":"交易策略开发","permalink":"https://booksword.top/categories/%E4%BA%A4%E6%98%93%E7%AD%96%E7%95%A5%E5%BC%80%E5%8F%91/"},{"name":"数据","slug":"交易策略开发/数据","permalink":"https://booksword.top/categories/%E4%BA%A4%E6%98%93%E7%AD%96%E7%95%A5%E5%BC%80%E5%8F%91/%E6%95%B0%E6%8D%AE/"}]},{"title":"Ubuntu安装Postgresql并设置自己的数据文件位置","date":"2023-12-24T09:31:10.000Z","path":"2023/12/24/Ubuntu安装Postgresql并设置自己的数据文件位置/","text":"¶安装 可以直接从官方apt源安装 1234sudo sh -c &#x27;echo &quot;deb https://apt.postgresql.org/pub/repos/apt $(lsb_release -cs)-pgdg main&quot; &gt; /etc/apt/sources.list.d/pgdg.list&#x27;wget --quiet -O - https://www.postgresql.org/media/keys/ACCC4CF8.asc | sudo apt-key add -sudo apt updatesudo apt install postgresql ¶设置数据文件位置 ¶准备工作——创建新位置 创建如下新目录，并且GRANT全部权限，数据文件将保存于此： 1/home/db/postgre/data ¶步骤一：移动数据文件 切换到默认PostgreSQL用户(一般为postgres) 1sudo su postgres 进入交互： 1psql 查看当前默认的数据目录位置： 1postgres=# SHOW data_directory; 输出 12345Output data_directory----------------------------- /var/lib/postgresql/16/main(1 row) 退出交互： 1postgres=# \\q 停止服务： 12sudo systemctl stop postgresqlsudo systemctl status postgresql # 查看状态，确认已停止 123456○ postgresql.service - PostgreSQL RDBMS Loaded: loaded (/lib/systemd/system/postgresql.service; enabled; vendor preset: enabled) Active: inactive (dead) since Sun 2023-12-24 14:41:08 CST; 4s ago Process: 183242 ExecStart=/bin/true (code=exited, status=0/SUCCESS) Main PID: 183242 (code=exited, status=0/SUCCESS) CPU: 1ms 看到inactive (dead)确认已经停止。 拷贝数据库目录到新位置，如果没有rsync，可以使用apt安装下，参数说明： -a 参数保存权限和其他目录属性 -v 会显示详细过程 注意： 如果在目录最后加上／，会把目录下面的内容拷贝过去， 如果最后没有／，会拷贝这个目录及下面的内容。 1sudo rsync -av /var/lib/postgresql/ /home/db/postgre/data/ 上面的拷贝结束后，把当前数据目录改名成备份，等最后确认新位置没有问题后再删除： 1$ sudo mv /var/lib/postgresql/16/main /var/lib/postgresql/16/main.bak ¶步骤二：指向数据文件新位置 编辑配置文件： 1sudo vi /etc/postgresql/16/main/postgresql.conf 找到有data_directory的一行，修改后面的目录路径为新位置： 1data_directory = &#x27;/home/db/postgre/data/16/main&#x27; 保存，退出。 ¶步骤三：重新启动数据库并验证数据文件位置 重新启动服务： 1sudo systemctl start postgresql 查看服务状态： 1sudo systemctl status postgresql 可以看到输出中有active (exited)字样，说明服务启动成功了： 1234567Output● postgresql.service - PostgreSQL RDBMS Loaded: loaded (/lib/systemd/system/postgresql.service; enabled; vendor preset: enabled) Active: active (exited) since Sun 2023-12-24 14:41:18 CST; 44s ago Process: 217149 ExecStart=/bin/true (code=exited, status=0/SUCCESS) Main PID: 217149 (code=exited, status=0/SUCCESS) CPU: 1ms 看到active (exited)确认已经启动。 注：这里说明下(exited)。postgresql.service只是一个启动的wrapper，实际运行的服务是 postgresql@&lt;version&gt;-main.service。 ¶步骤四：清理数据 如果上述验证过程没有问题，可以删除原有的数据目录了： 1sudo rm -rf /var/lib/postgresql/16/main.bak ¶其他常用设置 ¶允许从非本机访问 编辑postgresql.conf，将listen_addresses = 'localhost'改成listen_addresses = '*'以允许所有ip访问，或者填写所需的ip。","tags":[],"categories":[{"name":"数据库","slug":"数据库","permalink":"https://booksword.top/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"},{"name":"Postgresql","slug":"数据库/Postgresql","permalink":"https://booksword.top/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/Postgresql/"}]},{"title":"在Anaconda环境下安装Apache Airflow以进行定时任务管理：设置为系统服务","date":"2023-11-23T00:57:03.000Z","path":"2023/11/23/ApacheAirflow2/","text":"下载系统服务配置模板 123wget https://raw.githubusercontent.com/apache/airflow/master/scripts/systemd/airflowwget https://raw.githubusercontent.com/apache/airflow/master/scripts/systemd/airflow-webserver.servicewget https://raw.githubusercontent.com/apache/airflow/master/scripts/systemd/airflow-scheduler.service 第一个文件配置了在启动系统服务时候需要设置的环境变量，即AIRFLOW_HOME，AIRFLOW_CONFIG，设置成和安装篇里面一样的值即可。而后将其拷贝到适当位置，推荐为/etc/sysconfig/airflow，并将所有权修改到运行Airflow的用户下。 然后配置airflow-scheduler.service如下： airflow-scheduler.service： 12345678910111213141516[Unit]Description=Airflow scheduler daemonAfter=network.target postgresql.service mysql.service redis.service rabbitmq-server.serviceWants=postgresql.service mysql.service redis.service rabbitmq-server.service[Service]EnvironmentFile=&lt;2中的环境变量配置文件&gt;User=&lt;airflow user&gt;Group=&lt;airflow user group&gt;Type=simpleExecStart=&lt;path to airflow&gt;/airflow scheduler&#x27;Restart=alwaysRestartSec=5s[Install]WantedBy=multi-user.target 再配置airflow-webserver.service如下 airflow-webserver.service： 1234567891011121314151617[Unit]Description=Airflow webserver daemonAfter=network.target postgresql.service mysql.service redis.service rabbitmq-server.serviceWants=postgresql.service mysql.service redis.service rabbitmq-server.service[Service]EnvironmentFile=&lt;2中的环境变量配置文件&gt;User=&lt;airflow user&gt;Group=&lt;airflow user group&gt;Type=simpleExecStart=&lt;path to airflow&gt;/airflow webserver --pid /run/airflow/webserver.pidRestart=on-failureRestartSec=5sPrivateTmp=true[Install]WantedBy=multi-user.target 这里我们发现需要一个pid文件 12mkdir /run/airflowchown &lt;airflow user&gt;:&lt;airflow user group&gt; /run/airflow 然后启动服务 123sudo systemctl daemon-reload # 让更改生效sudo systemctl start airflow-scheduler.servicesudo systemctl start airflow-webserver.service 但这个时候发现很奇怪的问题，airflow-scheduler服务总是时断时续，报错“找不到airflow”。 研究后发现，虽然我们通过指定&lt;path to airflow&gt;/airflow保证了webserver和scheduler本身是通过Anaconda环境运行的，但是scheduler在运行任务时候，是运行airflow task run xxx ...，这个时候由于systemctl并不会自动激活conda环境，所以就无法找到airflow这个命令。 所以需要在ExecStart里面加入激活环境的相关命令，airflow-scheduler.service须变更如下： 1ExecStart=/bin/bash -c &#x27;source /home/booksword/anaconda3/etc/profile.d/conda.sh &amp;&amp; conda activate &amp;&amp; airflow scheduler&#x27; airflow-scheduler.service变更如下： 1ExecStart=/bin/bash -c &#x27;source /home/booksword/anaconda3/etc/profile.d/conda.sh &amp;&amp; conda activate &amp;&amp; airflow webserver --pid /run/airflow/webserver.pid&#x27;","tags":[],"categories":[{"name":"应用软件","slug":"应用软件","permalink":"https://booksword.top/categories/%E5%BA%94%E7%94%A8%E8%BD%AF%E4%BB%B6/"},{"name":"Airflow","slug":"应用软件/Airflow","permalink":"https://booksword.top/categories/%E5%BA%94%E7%94%A8%E8%BD%AF%E4%BB%B6/Airflow/"}]},{"title":"jupyterlab升级后的数个插件问题","date":"2023-08-18T23:09:06.000Z","path":"2023/08/19/jupyterlab/","text":"第一，插件@jupyterlab/notebook-extension:tracker报错 12345678910111213141516171819202122232425262728293031323334353637383940414243[W 2023-08-12 15:11:31.242 LabApp] Failed validating settings (@jupyterlab/notebook-extension:tracker): Additional properties are not allowed (&#x27;experimentalDisableDocumentWideUndoRedo&#x27;, &#x27;numberCellsToRenderDirectly&#x27;, &#x27;observedBottomMargin&#x27;, &#x27;observedTopMargin&#x27;, &#x27;remainingTimeBeforeRescheduling&#x27;, &#x27;renderCellOnIdle&#x27; were unexpected) Failed validating &#x27;additionalProperties&#x27; in schema: &#123;&#x27;additionalProperties&#x27;: False, &#x27;definitions&#x27;: &#123;&#x27;kernelStatusConfig&#x27;: &#123;&#x27;additionalProperties&#x27;: False, &#x27;properties&#x27;: &#123;&#x27;showOnStatusBar&#x27;: &#123;&#x27;default&#x27;: False, &#x27;description&#x27;: &#x27;If &#x27; &#x27;`true`, &#x27; &#x27;the &#x27; &#x27;kernel &#x27; &#x27;status &#x27; &#x27;progression &#x27; &#x27;will &#x27; &#x27;be &#x27; &#x27;displayed &#x27; &#x27;in &#x27; &#x27;the &#x27; &#x27;status &#x27; &#x27;bar &#x27; &#x27;otherwise &#x27; &#x27;it &#x27; &#x27;will &#x27; &#x27;be &#x27; &#x27;in &#x27; &#x27;the &#x27; &#x27;toolbar.&#x27;, &#x27;title&#x27;: &#x27;Show &#x27; &#x27;kernel &#x27; &#x27;status &#x27; &#x27;on &#x27; &#x27;toolbar &#x27; &#x27;or &#x27; &#x27;status &#x27; &#x27;bar.&#x27;, &#x27;type&#x27;: &#x27;boolean&#x27;&#125;, &#x27;showProgress&#x27;: &#123;&#x27;default&#x27;: True, &#x27;title&#x27;: &#x27;Show &#x27; &#x27;execution &#x27; &#x27;progress.&#x27;, &#x27;type&#x27;: &#x27;boolean&#x27;&#125;&#125;, &#x27;type&#x27;: &#x27;object&#x27;&#125;&#125;, &#x27;description&#x27;: &#x27;Notebook settings.&#x27;,... 解决：从~\\.jupyter\\lab\\user-settings\\@jupyterlab\\notebook-extension\\tracker.jupyterlab-settings中删除以上选项。 第二，升级后部分Widgets无法正常显示，例如tqdm的进度条。 如果单单显示一个Error display widgets，那么首先要重新build插件。 1jupyter lab build 如果提示node版本太低，就升级nodejs。 插件重新编译好后，应该可以进入js的阶段了。如果还是不能正常显示，显示一个框框让Click to show javascript error，那么可能需要升级ipywidgets的版本。","tags":[],"categories":[{"name":"Programming","slug":"Programming","permalink":"https://booksword.top/categories/Programming/"},{"name":"jupyter","slug":"Programming/jupyter","permalink":"https://booksword.top/categories/Programming/jupyter/"}]},{"title":"在Anaconda环境下安装Apache Airflow以进行定时任务管理：安装篇","date":"2023-07-14T23:30:21.000Z","path":"2023/07/15/ApacheAirflow1/","text":"本文将介绍如何在Anaconda环境下安装和配置Apache Airflow，用于管理和调度定时任务。以下是主要步骤： 在Anaconda的base环境或者自定义的环境下，通过pip安装typing_extensions和apache-airflow包。 12pip install typing_extensionspip install apache-airflow 创建一个目录来存放Airflow的数据，并将这个目录的路径设置为环境变量AIRFLOW_HOME。 12mkdir &lt;where you want to put airflow data in&gt;export AIRFLOW_HOME=&lt;where you want to put airflow data in&gt; 运行airflow scheduler命令，然后退出。这将在$AIRFLOW_HOME目录下创建基础的文件。 1airflow scheduler 运行airflow db migrate命令来初始化数据库，然后创建一个用户。 12airflow db migrateairflow users create --username airflow --role Admin -f xxx -l xxx -e xxx@xxx.com 这会在AIRFLOW_HOME下面创建一个名为airflow.db的sqlite3文件。 运行airflow scheduler和airflow webserver命令来分别启动定时器后台和网页服务。你可以选择使用nohup命令来使这些服务在后台运行。 12nohup airflow scheduler &gt; scheduler.log 2&gt;&amp;1 &amp;nohup airflow webserver &gt; webserver.log 2&gt;&amp;1 &amp; 通过浏览器访问http://localhost:8080来管理定时任务。Airflow已经提供了多个例子，你可以参考这些例子来配置自己的定时任务。 在浏览器的管理页面会看到一个警告，让避免使用SequentialExecutor，这是因为SequentialExecutor会使用airflow的主进程顺序执行所有任务，导致每个任务都会卡住scheduler。虽然不知道为啥官方要默认到SequentialExecutor，不过解决方案很简单，到$AIRFLOW_HOME/airflow.cfg文件中找到 1executor = SequentialExecutor 改成 1executor = LocalExecutor 并重启airflow scheduler服务就可以了。","tags":[],"categories":[{"name":"应用软件","slug":"应用软件","permalink":"https://booksword.top/categories/%E5%BA%94%E7%94%A8%E8%BD%AF%E4%BB%B6/"},{"name":"Airflow","slug":"应用软件/Airflow","permalink":"https://booksword.top/categories/%E5%BA%94%E7%94%A8%E8%BD%AF%E4%BB%B6/Airflow/"}]},{"title":"单个非root用户Anaconda下安装Apache Airflow用于定时任务：使用Postgresql","date":"2023-07-14T23:30:21.000Z","path":"2023/07/15/ApacheAirflow3/","text":"¶准备工作 首先参考： 《在Anaconda环境下安装Apache Airflow以进行定时任务管理：安装篇》安装airflow 《Ubuntu安装Postgresql并设置自己的数据文件位置》配置好数据库 安装SQLAlchemy和psycopg2 12pip install SQLAlchemypip install psycopg2 停止Airflow相关服务 12sudo systemctl stop airflow-scheduler.servicesudo systemctl stop airflow-webserver.service ¶创建Airflow相关的数据库和数据库用户 切换到Postgresql的管理用户，运行psql进入Postgresql的命令行 12sudo su postgrespsql 在Postgresql的命令行运行以下命令（注意最后的分号要带上）创建相应的DB和用户。 123456CREATE DATABASE airflow_db;CREATE USER airflow_user WITH PASSWORD &#x27;airflow_pass&#x27;;GRANT ALL PRIVILEGES ON DATABASE airflow_db TO airflow_user;-- PostgreSQL 15+ requires additional privileges:\\connect airflow_db;GRANT ALL ON SCHEMA public TO airflow_user; 编辑Postgresql的pg_hba.conf文件赋予airflow_user访问权限 默认位于/etc/postgresql/16/main/pg_hba.conf 添加一行1host all all 127.0.0.1/32 password 允许所有本地用户通过localhost访问。这个限制有些宽，可以具体限制到用户访问ip等。 ¶修改Airflow配置并迁移到新数据库 首先配置环境变量： 12export AIRFLOW_HOME=/data/airflowexport AIRFLOW_CONFIG=/data/airflow/airflow.cfg (注意这里一定要手工export，试验过source /etc/sysconfig/airflow，尽管echo $AIRFLOW_HOME输出的是正确的目录，还是不能被airflow识别，不知道是不是因为用的Anaconda环境。) 打开airflow.cfg文件 1sudo vi $AIRFLOW_CONFIG 将sql_alchemy_conn设为Postgresql的链接 1sql_alchemy_conn = postgresql+psycopg2://airflow_user:airflow_pass@localhost/airflow_db 初始化 1airflow db migrate 重新启Airflow的服务 12sudo systemctl start airflow-scheduler.servicesudo systemctl start airflow-webserver.service 检查状态 12sudo systemctl status airflow-scheduler.servicesudo systemctl status airflow-webserver.service","tags":[],"categories":[{"name":"应用软件","slug":"应用软件","permalink":"https://booksword.top/categories/%E5%BA%94%E7%94%A8%E8%BD%AF%E4%BB%B6/"},{"name":"Airflow","slug":"应用软件/Airflow","permalink":"https://booksword.top/categories/%E5%BA%94%E7%94%A8%E8%BD%AF%E4%BB%B6/Airflow/"}]},{"title":"解决报错: qt.qpa.plugin Could not find the Qt platform plugin \"xcb\" in \"\"","date":"2023-04-30T02:41:32.000Z","path":"2023/04/30/error Could not find the Qt platform plugin xcb in/","text":"¶问题 使用plotly绘图生成图片的时候遇到如下报错： 12qt.qpa.plugin: Could not find the Qt platform plugin &quot;xcb&quot; in &quot;&quot;This application failed to start because no Qt platform plugin could be initialized. Reinstalling the application may fix this problem. ¶解决过程 ¶尝试一 参考这篇Askubuntu文章 123指定环境变量`QT_QPA_PLATFORM_PLUGIN_PATH`。```bashexport QT_QPA_PLATFORM_PLUGIN_PATH=/usr/lib/x86_64-linux-gnu/qt5/plugins/platforms 报错变为： 12345678910111213141516qt.core.plugin.loader: In /usr/lib/x86_64-linux-gnu/qt5/plugins/platforms/libqeglfs.so: Plugin uses incompatible Qt library (5.15.0) [release]qt.core.plugin.loader: In /usr/lib/x86_64-linux-gnu/qt5/plugins/platforms/libqlinuxfb.so: Plugin uses incompatible Qt library (5.15.0) [release]qt.core.plugin.loader: In /usr/lib/x86_64-linux-gnu/qt5/plugins/platforms/libqminimal.so: Plugin uses incompatible Qt library (5.15.0) [release]qt.core.plugin.loader: In /usr/lib/x86_64-linux-gnu/qt5/plugins/platforms/libqminimalegl.so: Plugin uses incompatible Qt library (5.15.0) [release]qt.core.plugin.loader: In /usr/lib/x86_64-linux-gnu/qt5/plugins/platforms/libqoffscreen.so: Plugin uses incompatible Qt library (5.15.0) [release]qt.core.plugin.loader: In /usr/lib/x86_64-linux-gnu/qt5/plugins/platforms/libqvnc.so: Plugin uses incompatible Qt library (5.15.0) [release]qt.core.plugin.loader: In /usr/lib/x86_64-linux-gnu/qt5/plugins/platforms/libqxcb.so: Plugin uses incompatible Qt library (5.15.0) [release]qt.qpa.plugin: Could not find the Qt platform plugin &quot;xcb&quot; in &quot;/usr/lib/x86_64-linux-gnu/qt5/plugins/platforms&quot;This application failed to start because no Qt platform plugin could be initialized. Reinstalling the application may fix this problem. ¶尝试二 考虑python程序用了PySide6包和QT6相关，考虑是不是因为这个版本不匹配，于是安装了Qt6并将环境变量指向Qt6的位置： 12sudo apt install qt6-base-dev qt6-base-dev-toolsexport QT_QPA_PLATFORM_PLUGIN_PATH=/usr/lib/x86_64-linux-gnu/qt6/plugins/platforms 报错变为： 1234qt.qpa.plugin: Could not load the Qt platform plugin &quot;xcb&quot; in &quot;/usr/lib/x86_64-linux-gnu/qt6/plugins/platforms&quot; even though it was found.This application failed to start because no Qt platform plugin could be initialized. Reinstalling the application may fix this problem.Available platform plugins are: eglfs, linuxfb, minimal, minimalegl, offscreen, vkkhrdisplay, vnc, xcb. 再考虑是不是python包版本不匹配，于是强制升级了PySide6和PyQt6。 报错变为： 123456789101112131415161718192021222324252627282930 File &quot;/anaconda3/lib/python3.9/site-packages/matplotlib/_api/deprecation.py&quot;, line 454, in wrapper return func(*args, **kwargs) File &quot;/anaconda3/lib/python3.9/site-packages/matplotlib/pyplot.py&quot;, line 771, in figure manager = new_figure_manager( File &quot;/anaconda3/lib/python3.9/site-packages/matplotlib/pyplot.py&quot;, line 346, in new_figure_manager _warn_if_gui_out_of_main_thread() File &quot;/anaconda3/lib/python3.9/site-packages/matplotlib/pyplot.py&quot;, line 336, in _warn_if_gui_out_of_main_thread if (_get_required_interactive_framework(_get_backend_mod()) and File &quot;/anaconda3/lib/python3.9/site-packages/matplotlib/pyplot.py&quot;, line 206, in _get_backend_mod switch_backend(dict.__getitem__(rcParams, &quot;backend&quot;)) File &quot;/anaconda3/lib/python3.9/site-packages/matplotlib/pyplot.py&quot;, line 251, in switch_backend switch_backend(candidate) File &quot;/anaconda3/lib/python3.9/site-packages/matplotlib/pyplot.py&quot;, line 264, in switch_backend backend_mod = importlib.import_module( File &quot;/anaconda3/lib/python3.9/importlib/__init__.py&quot;, line 127, in import_module return _bootstrap._gcd_import(name[level:], package, level) File &quot;&lt;frozen importlib._bootstrap&gt;&quot;, line 1030, in _gcd_import File &quot;&lt;frozen importlib._bootstrap&gt;&quot;, line 1007, in _find_and_load File &quot;&lt;frozen importlib._bootstrap&gt;&quot;, line 986, in _find_and_load_unlocked File &quot;&lt;frozen importlib._bootstrap&gt;&quot;, line 680, in _load_unlocked File &quot;&lt;frozen importlib._bootstrap_external&gt;&quot;, line 850, in exec_module File &quot;&lt;frozen importlib._bootstrap&gt;&quot;, line 228, in _call_with_frames_removed File &quot;/anaconda3/lib/pythoadd n3.9/site-packages/matplotlib/backends/backend_qtagg.py&quot;, line 12, in &lt;module&gt; from .backend_qt import QtCore, QtGui, _BackendQT, FigureCanvasQT File &quot;/anaconda3/lib/python3.9/site-packages/matplotlib/backends/backend_qt.py&quot;, line 72, in &lt;module&gt; _MODIFIER_KEYS = [ File &quot;/anaconda3/lib/python3.9/site-packages/matplotlib/backends/backend_qt.py&quot;, line 73, in &lt;listcomp&gt; (_to_int(getattr(_enum(&quot;QtCore.Qt.KeyboardModifier&quot;), mod)),TypeError: int() argument must be a string, a bytes-like object or a number, not &#x27;KeyboardModifier&#x27; 发现涉及到matplotlib，同样升级之，错误变为： 1234qt.qpa.plugin: Could not load the Qt platform plugin &quot;xcb&quot; in &quot;/usr/lib/x86_64-linux-gnu/qt6/plugins/platforms&quot; even though it was found.This application failed to start because no Qt platform plugin could be initialized. Reinstalling the application may fix this problem.Available platform plugins are: eglfs, offscreen, minimal, xcb, wayland-egl, linuxfb, vkkhrdisplay, wayland, vnc, minimalegl. 百思不得其解。 ¶解决 网上找到设置export QT_DEBUG_PLUGINS=1后可以让Qt输出详细debug信息，设置后运行程序输出： 12345qt.core.plugin.factoryloader: Got keys from plugin meta data QList(&quot;minimalegl&quot;)qt.core.library: &quot;/anaconda3/lib/python3.9/site-packages/PyQt6/Qt6/plugins/platforms/libqxcb.so&quot; cannot load: Cannot load library /anaconda3/lib/python3.9/site-packages/PyQt6/Qt6/plugins/platforms/libqxcb.so: (libxcb-cursor.so.0: cannot open shared object file: No such file or directory)qt.core.plugin.loader: QLibraryPrivate::loadPlugin failed on &quot;/anaconda3/lib/python3.9/site-packages/PyQt6/Qt6/plugins/platforms/libqxcb.so&quot; : &quot;Cannot load library /anaconda3/lib/python3.9/site-packages/PyQt6/Qt6/plugins/platforms/libqxcb.so: (libxcb-cursor.so.0: cannot open shared object file: No such file or directory)&quot;qt.qpa.plugin: Could not load the Qt platform plugin &quot;xcb&quot; in &quot;/usr/lib/x86_64-linux-gnu/qt6/plugins/platforms&quot; even though it was found.This application failed to start because no Qt platform plugin could be initialized. Reinstalling the application may fix this problem. 发现 实际上被使用的是PyQt6自带的插件动态库，并没有用QT_QPA_PLATFORM_PLUGIN_PATH指定的系统库。 错误原因是缺失libxcb-cursor.so.0。 于是安装libxcb-cursor 1sudo apt install libxcb-cursor* 再次运行发现不再报错。问题解决。 删除掉QT_DEBUG_PLUGINS和QT_QPA_PLATFORM_PLUGIN_PATH环境变量（因为实际上并没有用系统的Qt6，所以QT_QPA_PLATFORM_PLUGIN_PATH删掉不影响什么）。","tags":[],"categories":[{"name":"Programming","slug":"Programming","permalink":"https://booksword.top/categories/Programming/"},{"name":"Python","slug":"Programming/Python","permalink":"https://booksword.top/categories/Programming/Python/"}]},{"title":"ffmpeg中的-filter_complex","date":"2023-04-08T05:38:06.000Z","path":"2023/04/08/ffmpeg_filter_complex/","text":"¶合并 需要合并两个分辨率不同的mp4视频，所以稍微研究了下ffmpeg中的complex_filter的合并语法。 如果要是合并相同编码，分辨率，FPS的视频，那很简单，直接用concat文件协议就行： 123# mylist.txtfile &#x27;video1.mp4&#x27;file &#x27;video2.mp4&#x27; （可以直接用for f in *.mp4; do echo &quot;file '$f'&quot; &gt;&gt; mylist.txt; done生成。） 然后 1ffmpeg -f concat -safe 0 -i mylist.txt -c copy video.mp4 即可。 但是如果编码，分辨率，FPS不同，想用一行命令解决问题，就要用到-filter_complex参数，指定将哪个文件的哪个stream做什么样的变换。对于笔者的需求，将video2.mp4的分辨率转成和video1.mp4相同然后合并video1.mp4、video2.mp4，命令如下。 1ffmpeg -i video1.mp4 -i video2.mp4 -filter_complex &quot;[1:v]scale=640:480[v1];[0:v][0:a][v1][1:a]concat=n=2:v=1:a=1[outv][outa]&quot; -map &quot;[outv]&quot; -map &quot;[outa]&quot; -c:v libx264 -crf 21 video.mp4 参数解释： -i video1.mp4 -i video2.mp4：输入视频，可以有多个； -filter_complex：后面跟complex filter表达式字符串（类似一种编程语言） [1:v]scale=640:480[v1]: 将第二个输入文件的视频流分辨率转为640x480并用[v1]作为代号。[1:v]表示第一个输入视频文件的视频流，之所以这里是“1”是计算机界惯例编号从0开始。如果有多个视频流可以用[1:v:0]，[1:v:1]，……表示。 [0:v][0:a][v1][1:a]concat=n=2:v=1:a=1[outv][outa]表示将第一个输入文件的音视频流，转换后的第二个输入文件视频流，第二个输入文件的音频流连接起来并分别赋予代号[outv]和[outa]，n=2表示一共两个文件，v=1表示一共一个视频流，a=1表示一共一个音频流。 -map &quot;[outv]&quot; -map &quot;[outa]&quot;表示将[outv]和[outa]map为一个文件。 -c:v libx264指定视频流编码器，-crf 21是编码器参数 video.mp4指定输出文件名。 根据以上可以举一反三写出更复杂的filter表达式，具体的可用的filter可以参考官方文档中的相关章节。","tags":[],"categories":[{"name":"应用软件","slug":"应用软件","permalink":"https://booksword.top/categories/%E5%BA%94%E7%94%A8%E8%BD%AF%E4%BB%B6/"},{"name":"ffmpeg","slug":"应用软件/ffmpeg","permalink":"https://booksword.top/categories/%E5%BA%94%E7%94%A8%E8%BD%AF%E4%BB%B6/ffmpeg/"}]},{"title":"TigerVNC：使用X.509加密连接","date":"2023-04-06T00:06:00.000Z","path":"2023/04/06/509加密连接/","text":"根据Ubuntu 20.04安装VNC服务（Xfce4）配置好VNC后，连接时会提示数据未加密所以不安全。 查阅文档后得知TigerVNC支持X.509认证的TLS加密。 ¶设置方法 ¶服务端 首先生成认证文件。可以使用商业的认证（如有）。如果没有，则需要使用OpenSSL生成自己的认证。 安装OpenSSL RedHat/CentOS/Fedora：sudo yum install openssl Debian/Ubuntu/Mint: sudo apt-get install openssl 使用OpenSSL生成认证密钥对 1openssl req -x509 -newkey rsa -days 365 -nodes -keyout vnc-server-private.pem -out vnc-server.pem -subj &#x27;/CN=&lt;your server ip&gt;&#x27; -addext &quot;subjectAltName=IP:&lt;your server ip&gt;&quot; （将&lt;your server ip&gt;替换成服务器真实IP） 会在运行命令的文件夹下面生成vnc-server-private.pem和vnc-server.pem两个文件。将vnc-server.pem下载到客户机上备用。 （可选）为了便于管理，将密钥对拷贝到~/.vnc下面。 附带以下参数运行vncserver: 1vncserver -localhost no -SecurityTypes X509Vnc -X509Key vnc-server-private.pem -X509Cert vnc-server.pem ¶客户端（使用TigerVNCviewer） 点击Options...按钮，将Security选项卡下的Path to X509 CA certificate指向从OpenSSL生成的公钥pem文件vnc-server.pem（之前从服务端下载的）。 然后照常连接。可以看到连接已经变成安全的了。 ¶服务端配置文件 如果不想每次都运行服务都需要打那么长一串命令，可以把选项写入服务器上的配置文件，并放在~/.vnc文件夹下： 版本1.10：~/.vnc.conf 版本1.12+: ~/.vnc/tigervnc.conf 配置文件内容如下： 1234$localhost=&quot;no&quot;;$SecurityTypes=&quot;X509Vnc&quot;;$X509Key=&quot;$ENV&#123;HOME&#125;/.vnc/vnc-server-private.pem&quot;;$X509Cert=&quot;$ENV&#123;HOME&#125;/.vnc/vnc-server.pem&quot;; ¶参考资料 Secure your connection","tags":[],"categories":[{"name":"其他","slug":"其他","permalink":"https://booksword.top/categories/%E5%85%B6%E4%BB%96/"}]},{"title":"Hexo部署到GitHub Pages后设置的自定义域名丢失","date":"2023-03-23T13:02:14.000Z","path":"2023/03/23/Hexo_missing_custom_domain/","text":"¶问题 基于Hexo的静态博客托管在GitHub Pages上，并且在Settings-&gt;Pages里面绑定了自定义域名。 但每次部署（运行hexo deploy后设置的自定义域名都会被自动清空。 ¶解决 在source文件夹下建立文本文件CNAME（无后缀名），内容为自定义域名。","tags":[],"categories":[{"name":"Hexo","slug":"Hexo","permalink":"https://booksword.top/categories/Hexo/"}]},{"title":"ffmpeg合并文件报错“Unsafe file name”","date":"2023-02-21T13:37:49.000Z","path":"2023/02/21/ffmpeg_unsafe_file_name/","text":"解决：加上参数-safe 0。","tags":[],"categories":[{"name":"应用软件","slug":"应用软件","permalink":"https://booksword.top/categories/%E5%BA%94%E7%94%A8%E8%BD%AF%E4%BB%B6/"},{"name":"ffmpeg","slug":"应用软件/ffmpeg","permalink":"https://booksword.top/categories/%E5%BA%94%E7%94%A8%E8%BD%AF%E4%BB%B6/ffmpeg/"}]},{"title":"Ubuntu 20.04安装VNC服务（Xfce4）","date":"2023-02-04T09:35:00.000Z","path":"2023/02/04/Ubuntu 20.04安装VNC服务（Xfce4）/","text":"¶目标 给VPS安装VNC服务以能使用图形化界面软件。 ¶步骤 安装Xfce桌面环境 sudo apt install xfce4 a. 中途会让选择是用`gdm3`还是`lightdm`。根据网上描述[^fn1]，`lightdm`占用资源更少，支持的桌面系统更多，同时可定制性更好；而`gdm3`是专门为`GNOME`开发的。所以这里选`lightdm`。 安装VNC Server sudo apt install tigervnc-standalone-server 初始化 运行命令vncserver，会提示输入密码，这个密码是后期连接vnc的密码，一定要记住。 运行vncserver -kill :1杀掉刚刚的服务进程。 vi ~/.vnc/xstartup建立xstartup文件，并将以下内容复制进去： 12345678910111213141516171819#!/bin/sh# Uncomment the following two lines for normal desktop:# unset SESSION_MANAGER# exec /etc/X11/xinit/xinitrc[ -x /etc/vnc/xstartup ] &amp;&amp; exec /etc/vnc/xstartup[ -r $HOME/.Xresources ] &amp;&amp; xrdb $HOME/.Xresourcesxsetroot -solid greyvncconfig -iconic &amp;x-terminal-emulator -geometry 80x24+10+10 -ls -title &quot;$VNCDESKTOP Desktop&quot; &amp;x-window-manager &amp;#gnome-terminal &amp;sesion-manager &amp; xfdesktop &amp; xfce4-panel &amp;xfce4-menu-plugin &amp;xfsettingsd &amp;xfconfd &amp;xfwm4 &amp; 再次开启vncserver: vncserver -localhost no tigervncserver默认只能本机访问，-localhost no参数关闭此限制。 ¶其他 VNC服务默认使用从5901开始的端口，一台VPS上可以开启多个VNC服务，连接时ip:1对应5901端口的服务，连接时ip:2对应5902端口的服务，以此类推。 如VPS有防火墙需要打开对应的端口。 ^fn1: https://www.linuxfordevices.com/tutorials/linux/gdm3-vs-lightdm","tags":[],"categories":[{"name":"Linux","slug":"Linux","permalink":"https://booksword.top/categories/Linux/"}]},{"title":"Linux Swap交换分区","date":"2023-01-11T12:02:00.000Z","path":"2023/01/11/linux-swap交换分区/","text":"在我们自己的购买的服务器环境中，一般是买的1g的内存，但是当服务器里面的东西装的比较多的时候就会导致内存不够用了,这个时候可以通过增加虚拟内存来夸大内存容量。 ¶设置 0、查看内存使用情况 1234$ free -m total used free shared buff/cache availableMem: 3914 161 1110 0 2643 3479Swap: 8703 64 8639 1、检查 Swap 空间，先检查一下系统里有没有既存的 Swap 文件 1$ swapon -s 如果返回的信息概要是空的，则表示 Swap 文件不存在。 2、创建文件并全部写入0. 1$ dd if=/dev/zero of=/swapfile bs=1G count=4 以上命令创建4G的全零文件。 【参数说明】 if=文件名：输入文件名，缺省为标准输入。即指定源文件。&lt; if=input file &gt; of=文件名：输出文件名，缺省为标准输出。即指定目的文件。&lt; of=output file &gt; bs=bytes：同时设置读入/输出的块大小为bytes个字节 count=blocks：仅拷贝blocks个块，块大小等于bs指定的字节数。 3、将创建的文件转为swap 1$ mkswap /swapfile 4、激活 1$ swapon /swapfile 之后可使用0，1步骤中的命令检测是否开启成功。 5、(可选)如果要机器重启的时候自动挂载 Swap ，那么还需要修改/etc/fstab，添加如下行： 1/swapfile swap swap defaults 0 0 6、删除文件Swap 12$ swapoff /swapfile #卸载swap文件$ rm -rf /swapfile #删除文件 如果进行了步骤5，须相应删除该行。 ¶相关知识 交换技术 交换（Swapping）技术它的主要特点是：打破了一个程序一旦进入内存，就一直驻留在内存直到运行结束的限制。 在多道程序环境下，内存中可以同时存在多个进程（程序），其中的一部分进程由于等待某些事件而处于阻塞状态，但这些处于阻塞状态的进程仍然驻留内存，并占据着内存空间；另一方面，外存上可能有许多等待装入内存运行的程序，却因内存不足而未能装入。显然，这是一种严重的系统资源浪费，它会使系统的吞吐量下降。为了解决这个问题，可以在操作系统中增加交换（对换）功能，即由操作系统根据需要，将内存中暂时不具备运行条件的部分程序或数据移到外存（换出），以便腾出足够的内存空间，将外存中需要运行的程序或数据调入内存（换入）投入运行。在操作系统中引入交换（对换）技术，可以显著提高内存资源的利用率并改善系统的性能。 以交换的单位不同来划分，则有以下两种交换方式。 以进程为单位的交换。每次换入/换出的是整个进程，我们称这种交换为进程交换（进程对换）或整体交换（整体对换）。进程交换广泛应用于分时系统，主要解决内存紧张问题。 以页（此处不多做介绍）或段（此处不多做介绍）为单位的交换。这种交换分别称为页置换（页交换或页对换）或段置换（段交换或段对换），页置换和段置换是以进程中的某一部分为交换单位，因此又称为部分交换（部分对换）。部分交换广泛应用于现代操作系统中，是实现虚拟存储器的基础。 我们这里所说的交换是指进程交换，为了实现进程交换，操作系统需要解决以下两个问题。 对换空间的管理。在具有交换功能的操作系统中，一般将外存空间分为文件区和交换区（对换区）。文件区用来存放文件，而交换区则用来存放从内存中换出的进程，或等待换入内存的进程。尽管文件区一般采用离散分配方式来分配外存存储空间，但交换区的存储空间分配则宜采用连续分配方式，这是因为交换区中存放的是换入/换出的进程，为了提高交换速度，有必要采用连续分配方式，并且交换区可以采用与可变分区存储管理类似的方法进行管理。例如，使用空闲分区表或空闲分区链来记录外存交换区的使用情况，利用首次适应算法、最佳适应算法或最差适应算法来进行外存交换区的分配。 交换的时机以及选择哪些进程交换。交换时机一般选择在进程的时间片用完，以及进程等待输入/输出时，或者在进程要求扩充其内存空间而得不到满足时。换出到外存的进程一般选择处于阻塞状态，或优先级低且短时间内不会再次投入运行的进程；换入到内存的进程则应选择换出时间最久且已处于就绪状态的进程。 ¶参考 1、https://cloud.tencent.com/developer/article/1704157","tags":[],"categories":[{"name":"Linux","slug":"Linux","permalink":"https://booksword.top/categories/Linux/"}]},{"title":"Ubuntu系统挂载Windows共享文件夹通过credential文件认证","date":"2022-11-29T07:55:00.000Z","path":"2022/11/29/ubuntu-mount-windows-share-drive-with-credential-file/","text":"¶问题 要把Windows的共享文件夹挂载到Ubuntu系统的电脑里面，使用命令 1sudo mount -t cifs //&lt;ip or host&gt;/&lt;source folder&gt; &lt;destiny folder&gt; -o username=&#x27;xxx&#x27;&#x27;,password=&#x27;xxx&#x27;,vers=2.0 可以，但是使用密码文件 1sudo mount -t cifs //&lt;ip or host&gt;/&lt;source folder&gt; &lt;destiny folder&gt; -o credentials=/xxx/.smbcredentials,vers=2.0 报如下错误 1mount: &lt;destiny folder&gt;: bad option; for several filesystems (e.g. nfs, cifs) you might need a /sbin/mount.&lt;type&gt; helper program. ¶解决 安装cifs-util包。 1sudo apt install cifs-util 安装后重新挂载，成功~","tags":[],"categories":[{"name":"Linux","slug":"Linux","permalink":"https://booksword.top/categories/Linux/"}]},{"title":"gitignore文件的顺序","date":"2022-11-22T09:26:00.000Z","path":"2022/11/22/gitignore文件的顺序/","text":"发现.gitignore里面条目顺序是有意义的。 12345*.c*.cpp!skts.c!np_datetime.c!np_datetime_strings.c 则!的几项生效 12345678910111213141516$ git statusOn branch mainYour branch is up to date with &#x27;origin/main&#x27;.Changes not staged for commit: (use &quot;git add &lt;file&gt;...&quot; to update what will be committed) (use &quot;git restore &lt;file&gt;...&quot; to discard changes in working directory) modified: .gitignoreUntracked files: (use &quot;git add &lt;file&gt;...&quot; to include in what will be committed) __init__.pxd pandas_helper/_libs/tslibs/src/datetime/np_datetime.c pandas_helper/_libs/tslibs/src/datetime/np_datetime_strings.cno changes added to commit (use &quot;git add&quot; and/or &quot;git commit -a&quot;) 如果反过来 12345!skts.c!np_datetime.c!np_datetime_strings.c*.c*.cpp","tags":[],"categories":[{"name":"Programming","slug":"Programming","permalink":"https://booksword.top/categories/Programming/"},{"name":"Git","slug":"Programming/Git","permalink":"https://booksword.top/categories/Programming/Git/"}]},{"title":"设置局域网和广域网远程开机（Wake on Lan）","date":"2022-11-22T09:25:00.000Z","path":"2022/11/22/wakeonlan/","text":"¶需求 因为需要随时远程访问家里计算机，因此希望出远门后即便出现家里停电等情况，家里计算机意外关机，也能够通过远程唤醒。 ¶网上的资料 网上的解决方案： Wake on LAN (WOL)[1]: 本文的方案。通过向目标机发送一个魔幻数据包（Magic Packet）进行远程唤醒，需要主板和网卡支持。本意设计是在局域网内，通过端口映射等方法也可以在广域网生效（需要公网静态IP或者公网动态IP+DDNS）。 各种开机棒等： 同样需要主板和网卡的支持，同时需要购买格外硬件，还要在硬件厂商的网站注册以让硬件厂商能直接访问对应硬件，安全性也是个顾虑。 智能插座，一些DIY的能在线控制的继电器之类的设备。 考虑需要远程的连接的PC都支持WOL，研究采用WOL的方案。 ¶实现 ¶局域网唤醒 ¶主板BIOS设置 开机按Del（根据主板品牌可能是其他功能键，建议查阅主板说明书）进入BIOS设置，打开设备唤醒中的PCIE设备唤醒选项。根据品牌可能被称为 Boot on LAN Wake on LAN PME Event WakeUp, Resume by MAC LAN Wake-Up by PCI card Wake Up On PCI PME Power On by PCI Card WakeUp by PME of PCI Power On By PCI Devices WakeUp by Onborad LAN Resume By PCI or PCI-E Ddevice 等等。 如果有的话，关闭Fast Boot或类似选项。 如果有的话，关闭EMP。 ¶目标机系统设置 ¶Windows 10 首先，更新网卡驱动到最新版本。 建议去主板/网卡的官网下载。Windows集成的更新并不及时。 搜索框搜“设备管理器（Device Manager）”并打开。 在“网络适配器（Network adapters）”下面找到有线网卡，右键菜单“属性（Properties）”。 进入“高级（Advanced）”选项卡，开启“Wait for Link”, “Wake on Link Settings”, “Wake on Magic Packet”, “Wake on Pattern Match”。 进入“电源管理（Power Management）”选项卡，把三个复选框全部选上。 ¶Ubuntu 22.04 首先查看本机的各网卡名称和MAC地址1234567891011121314151617181920212223$ ifconfigenp5s0: flags=4099&lt;UP,BROADCAST,MULTICAST&gt; mtu xxxx ether xx:xx:xx:xx:xx:xx txqueuelen 1000 (Ethernet) RX packets 0 bytes 0 (0.0 B) RX errors 0 dropped 0 overruns 0 frame 0 TX packets 0 bytes 0 (0.0 B) TX errors 0 dropped 0 overruns 0 carrier 0 collisions 0 device memory 0xfc000000-fc01ffffenpxxx: flags=4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt; mtu 1500 inet 192.168.x.xxx netmask 255.255.255.0 broadcast 192.168.x.255 inet6 xxxx:1b43 prefixlen 64 scopeid 0x0&lt;global&gt; inet6 fe80::271e:d40:2e18:9c6 prefixlen 64 scopeid 0x20&lt;link&gt; inet6 xxxx:7bb2 prefixlen 64 scopeid 0x0&lt;global&gt; inet6 xxxx:9b94 prefixlen 64 scopeid 0x0&lt;global&gt; inet6 xxxx:99f1 prefixlen 64 scopeid 0x0&lt;global&gt; ether xx:xx:xx:xx:xx:xx txqueuelen 1000 (Ethernet) RX packets 53552819 bytes 30767884934 (30.7 GB) RX errors 0 dropped 671 overruns 0 frame 0 TX packets 72797481 bytes 71048847776 (71.0 GB) TX errors 0 dropped 0 overruns 0 carrier 0 collisions 0... 从上面信息查出本机有线网网卡名称为enpxxx。 然后使用ethtool查看是否开启了WOL。123 $ sudo ethtool enpxxx | grep WakeSupports Wake-on: pumbgWake-on: g 这样表示支持WOL且已经开启。 如果显示Wake-on: d则表示WOL被禁用，需使用命令sudo ethtool -s enpxxx wol g开启。 如未安装ethtool可以sudo apt install ethtool安装。 ¶控制软件 ¶Android平台 笔者使用的是Wake on LAN v1.35，官网已不可考，吾爱破解有个帖子提供了apk文件的下载。 点&quot;+&quot;按钮新建，选择“ENTER MANUALLY”，起个名字填入MAC地址即可。填写完成后ADD DEVICE，就会显示在列表里。 将手机连接到目标机同一局域网内的WiFi上，点击条目即可唤醒。 ¶广域网唤醒 ¶公网网址 国内运营商对家用网络一般给的都是内网IP，具体可以到运营商给的光猫里查看。如果申请了桥接，那么需要到连接光猫的路由器里查看。 如果网址以10.或者172.开头，则多半是内网IP。 完全确认可以去ip138等网站上查看本机对外的IP，如果和光猫、路由的IP一致则是公网IP，否则是内网IP。 ¶动态域名 获取公网IP之后，需要到路由器所支持的动态域名商那里申请一个动态域名。如对联通的光猫，看他支持ORAY（其实是向日葵、花生壳等几家的合体）就去ORAY注册个账户，然后申请个花生壳的动态域名，申请后在路由里面按要求填写申请到的域名，ORAY的用户名，密码。 ¶路由器设置 设备的MAC地址与路由器分配的IP绑定。 路由器需要设置端口转发，将外部发送过来的Magic Packet转发到目标机的端口9。 wiki.wireshak: WakeOnLAN ↩︎","tags":[],"categories":[{"name":"其他","slug":"其他","permalink":"https://booksword.top/categories/%E5%85%B6%E4%BB%96/"}]},{"title":"Git Forked Repository强制与Fork源同步","date":"2022-11-14T08:04:00.000Z","path":"2022/11/14/git-forked-repository强制与上游同步/","text":"首先将Fork源增加到分支的remote url里面， 1git remote add upstream git@github.com:microsoft/qlib.git 然后pull --rebase 1git pull --rebase upstream main 再reset hard。 1git reset --hard upstream/main 最后force push 1git push --force origin main","tags":[],"categories":[{"name":"Programming","slug":"Programming","permalink":"https://booksword.top/categories/Programming/"},{"name":"Git","slug":"Programming/Git","permalink":"https://booksword.top/categories/Programming/Git/"}]},{"title":"Ubuntu 22.04安装Cuda Toolkit","date":"2022-11-03T03:54:00.000Z","path":"2022/11/03/ubuntucuda/","text":"Nvidia现在要求安装CuDNN和NICC都得登录Nvidia Developer网站，国内巨慢。药丸。 ¶CUDA 1234sudo -i # 切换root权限wget https://developer.download.nvidia.com/compute/cuda/repos/ubuntu2204/x86_64/cuda-keyring_1.0-1_all.debdpkg -i cuda-keyring_1.0-1_all.debapt update &amp;&amp; apt install cuda -y ¶NICC 1apt install libnccl2=2.15.5-1+cuda11.8 libnccl-dev=2.15.5-1+cuda11.8 ¶cuDNN 123dpkg -i cudnn-local-repo-ubuntu2204-8.6.0.163_1.0-1_amd64.debcp /var/cudnn-local-repo-ubuntu2204-8.6.0.163/cudnn-local-FAED14DD-keyring.gpg /usr/share/keyrings/apt install libcudnn8 libcudnn8-dev libcudnn8-samples ¶测试cuDNN mnistCUDNN测试需要FreeImage。 1apt install libfreeimage3 libfreeimage-dev 将sample拷贝到有写权限的目录，并正确设置权限。 1cp /usr/src/cudnn_samples_v8/ . -R 进入每个目录make生成可执行文件，运行。如都可以运行，显示Test passed!，则安装成功。","tags":[],"categories":[{"name":"Linux","slug":"Linux","permalink":"https://booksword.top/categories/Linux/"},{"name":"Cuda","slug":"Linux/Cuda","permalink":"https://booksword.top/categories/Linux/Cuda/"}]},{"title":"修复MongoDB设置导致mongod无法启动","date":"2022-10-15T08:04:00.000Z","path":"2022/10/15/修复mongodb设置导致mongod无法启动/","text":"¶缘起 为了解决使用Arctic[1] MongoDB的日志里出现 1SASL SCRAM-SHA-1 authentication failed for myAdminUser on admin from client 192.168.3.100:9560 ; UserNotFound: Could not find user &quot;myAdminUser&quot; for db &quot;admin&quot; 错误的问题，参考了数个连接（包括StackOverflow[2]），都提示要将authSchema.currentVersion从5改成3。照做以后就杯具了，mongod服务完全打不开了，提示错误 1This server is using MONGODB-CR, an authentication mechanism which has been removed from MongoDB 4.0. In order to upgrade the auth schema, first downgrade MongoDB binaries to version 3.6 and then run the authSchemaUpgrade command. See http://dochub.mongodb.org/core/3.0-upgrade-to-scram-sha-1 原因是我的MongoDB server是4.2版本，authSchema.currentVersion=3代表MONGODB-CR的认证方式，4.0以上的Mongo Server已经不再支持了。 *感觉MongoDB这种设计简直愚蠢反人类到家了，这种能导致启动崩溃的设置居然是写在数据库里而不是独立的配置文件里，直接导致万一设错了服务就完全起不来，服务器起不来又无法更正配置，直接死循环了。* 所以，尽量不要更改数据库里的配置，一定需要改的话，改之前一定要备份。 ¶解决 ¶失败尝试一 按照日志里的提示，将MongoDB服务的版本降低到3.6，同样无法启动，提示WeirdTiger格式不兼容。顿时感觉天昏地暗，前一个备份已经两周多了，完全不想重新恢复这两周的所有数据。 ¶灵机一动的尝试二 想到我按照的修改既然是存在数据库里的，那么必然改了某个数据库的磁盘文件。那么这个文件的修改日期一定是所有数据库数据文件中最新的。于是赶紧cd去数据库文件在磁盘里的目录，ls -lnt找到最后修改的文件是这个collection-0-5610079802494816593.wt。 用vim打卡，:%!xxd切换到二进制模式，搜索authSchema，果然找到了 12300005070: 6400 0b00 0000 6175 7468 5363 6865 6d61 d.....authSchema00005080: 0010 6375 7272 656e 7456 6572 7369 6f6e ..currentVersion00005090: 0003 0000 0000 0000 0000 0000 0000 0000 ................ 赶紧把currentVersion后边的0003改成0005。再次重启mongod。发现日志还是报错 1wiredTiger Error: collection-*.wt does not appear to be a WiredTiger file 并提示可以加--repair参数尝试修复，于是执行 1mongod --noauth --dbpath /mongodb/data/ --repair 成功结束后再次启动mongod服务 1systemctl start mongod 成功~~ https://github.com/man-group/arctic ↩︎ https://stackoverflow.com/questions/29006887/mongodb-cr-authentication-failed ↩︎","tags":[],"categories":[{"name":"Programming","slug":"Programming","permalink":"https://booksword.top/categories/Programming/"},{"name":"MongoDB","slug":"Programming/MongoDB","permalink":"https://booksword.top/categories/Programming/MongoDB/"}]},{"title":"Windows下编译Google protobuf","date":"2022-10-15T08:04:00.000Z","path":"2022/10/15/编译Google protobuf/","text":"¶准备工作 Protobuf依赖CMake、Git、Abseil和zlib(可选)。前两者都是常用的工具，略过，这里详述后两者。 ¶Abseil 在官方Github的Release页面下载最新版源码包。 解压到适当位置，比如E:\\protobuf\\abseil。 打开CMD并进入该目录1&gt; cd E:\\protobuf\\abseil 创建编译工作目录并进入1&gt; mkdir build &amp;&amp; cd build 创建CMake配置1&gt; cmake -G &quot;Visual Studio 17 2022&quot; -A x64 -DCMAKE_BUILD_TYPE=Release -B . -DCMAKE_INSTALL_PREFIX=./output_release -DCMAKE_CXX_STANDARD=17 .. 其中 -G &quot;Visual Studio 17 2022&quot;用于指定项目文件的生成器。生成器负责为您选择的构建系统生成构建配置文件。可选有（但不限于）Unix Makefiles、 NMake Makefiles、 Visual Studio x yyyy、Xcode等。 -A x64表示编译64位，32位设为Win32 -DCMAKE_BUILD_TYPE=Release表示编译Release版本，Debug版本就改为Debug（这个似乎要放到靠前位置，否则会有警告表示并没有被用到） -B .设置工作目录 -DCMAKE_INSTALL_PREFIX=./output_release是最终安装的位置 -DCMAKE_CXX_STANDARD=17表面使用C++17标准 ..为源代码根目录（根CMakeList.txt所在目录） 编译安装1&gt; cmake --build . --target install --config release -j 12 其中 --build .即为前一步的工作目录 --target install指示CMake将项目的工件（例如，可执行文件、库、头文件）安装到配置项目时指定的安装前缀目录（-DCMAKE_INSTALL_PREFIX指定的目录） --config release表面编译Release版本 -j 12表示用12线程并行编译 完成后可以在配置时候指定的./output_release找到头文件和编译的库文件。 ¶zlib 在官网下载最新版源码包。 解压到适当位置，并进入该目录 创建CMake配置1&gt; cmake -G &quot;Visual Studio 17 2022&quot; -A x64 -B . -DCMAKE_INSTALL_PREFIX=./output_release -DCMAKE_CXX_STANDARD=17 .. 其中 -G &quot;Visual Studio 17 2022&quot;用于指定项目文件的生成器。生成器负责为您选择的构建系统生成构建配置文件。可选有（但不限于）Unix Makefiles、 NMake Makefiles、 Visual Studio x yyyy、Xcode等。 -A x64表示编译64位，32位设为Win32 -B .设置工作目录 -DCMAKE_INSTALL_PREFIX=./output_release是最终安装的位置 -DCMAKE_CXX_STANDARD=17表面使用C++17标准 ..为源代码根目录（根CMakeList.txt所在目录） 编译安装1&gt; cmake --build . --target install --config release -j 12 其中 --build .即为前一步的工作目录 --target install指示CMake将项目的工件（例如，可执行文件、库、头文件）安装到配置项目时指定的安装前缀目录（-DCMAKE_INSTALL_PREFIX指定的目录） --config release表面编译Release版本 -j 12表示用12线程并行编译 ¶编译安装 在官方Github的Release页面下载最新版源码包。 解压到适当位置，比如E:\\protobuf\\protobuf。 切换到该目录 创建CMake配置 1&gt; cmake -S . -B cmake-out -DCMAKE_INSTALL_PREFIX=./output -DCMAKE_CXX_STANDARD=17 -Dprotobuf_BUILD_TESTS=OFF -DCMAKE_BUILD_TYPE=Release -Dprotobuf_ABSL_PROVIDER=package -Dprotobuf_MSVC_STATIC_RUNTIME=OFF -DCMAKE_PREFIX_PATH=E:\\protobuf\\abseil\\build\\output_release -DZLIB_ROOT=E:\\protobuf\\zlib\\build\\output_release 其中： -S .&quot;指定源码解压的位置（根CMakeList.txt所在目录），这里是当前文件夹 -B cmake-out设置工作目录 -DCMAKE_INSTALL_PREFIX=./output是最终安装的位置 -DCMAKE_CXX_STANDARD=17表面使用C++17标准 -Dprotobuf_BUILD_TESTS=OFF关掉GTest -Dprotobuf_ABSL_PROVIDER=package指定protobuf如何链接Abseil，module是Abseil已经包含了Abseil，不需要格外提供Abseil在库目录里面；package表示需要提供Abseil在库目录里面 -Dprotobuf_MSVC_STATIC_RUNTIME=OFF表示动态链接C++ runtime library (CRT)，设为ON则是静态链接。因为Abseil官方只提供了动态链接方式（不改CMakeList.txt的情况下），所以这里也只能用OFF，否则报链接错误 -DCMAKE_PREFIX_PATH=..\\abseil\\build\\output_release准备工作中Abseil的安装目录 -DZLIB_ROOT=E:\\protobuf\\zlib\\build\\output_release准备工作中zlib的安装目录 编译安装 1cmake --build cmake-out --config Release --target install 这个选项含义同上面Abseil","tags":[],"categories":[{"name":"Programming","slug":"Programming","permalink":"https://booksword.top/categories/Programming/"}]},{"title":"消除&lt;frozen importlib._bootstrap&gt;:228: RuntimeWarning: scipy._lib.messagestream.MessageStream size changed, may indicate binary incompatibility.","date":"2022-10-01T06:08:00.000Z","path":"2022/10/01/2022-10-01-消除-frozen-importlib-bootstrap-228-runtimewarning-scipy-lib-messagestream-messagestream-size-changed-may-indicate-binary-incompatibility/","text":"¶问题 在import scipy.stats的时候报警告： 123456Python 3.9.12 (main, Apr 5 2022, 06:56:58)[GCC 7.5.0] :: Anaconda, Inc. on linuxType &quot;help&quot;, &quot;copyright&quot;, &quot;credits&quot; or &quot;license&quot; for more information.&gt;&gt;&gt; from scipy.stats import percentileofscore&lt;frozen importlib._bootstrap&gt;:228: RuntimeWarning: scipy._lib.messagestream.MessageStream size changed, may indicate binary incompatibility. Expected 56 from C header, got 64 from PyObject&gt;&gt;&gt; exit() ¶解决 这个的原因之一是pip在升级numpy，scipy的时候(pip install -U numpy scipy)，对旧的package的删除可能不干净的问题。需要多次用uninstall直至无残留： 以numpy为例 1234567891011121314151617181920212223242526(base) $ pip uninstall numpyFound existing installation: numpy 1.23.3Uninstalling numpy-1.23.3: Would remove: /anaconda3/bin/f2py /anaconda3/bin/f2py3 /anaconda3/bin/f2py3.9 /anaconda3/lib/python3.9/site-packages/numpy-1.23.3.dist-info/* /anaconda3/lib/python3.9/site-packages/numpy.libs/libgfortran-040039e1.so.5.0.0 /anaconda3/lib/python3.9/site-packages/numpy.libs/libopenblas64_p-r0-742d56dc.3.20.so /anaconda3/lib/python3.9/site-packages/numpy.libs/libquadmath-96973f99.so.0.0.0 /anaconda3/lib/python3.9/site-packages/numpy/* Would not remove (might be manually added): /anaconda3/lib/python3.9/site-packages/numpy/distutils/site.cfgProceed (Y/n)? y Successfully uninstalled numpy-1.23.3(base) $ pip install numpyRequirement already satisfied: numpy in /anaconda3/lib/python3.9/site-packages (1.21.5)(base) $ pip uninstall numpyFound existing installation: numpy 1.21.5Uninstalling numpy-1.21.5: Would remove: /anaconda3/lib/python3.9/site-packages/numpy-1.21.5.dist-info/* /anaconda3/lib/python3.9/site-packages/numpy/distutils/site.cfgProceed (Y/n)? y Successfully uninstalled numpy-1.21.5 可见在重新安装的时候，发现卸载掉1.23.3后，残余的1.21.5暴露出来了。所以需要再次卸载，直至完全卸载干净。 对scipy也是同样操作。","tags":[],"categories":[{"name":"Programming","slug":"Programming","permalink":"https://booksword.top/categories/Programming/"},{"name":"Python","slug":"Programming/Python","permalink":"https://booksword.top/categories/Programming/Python/"}]},{"title":"Ubuntu 22.04安装MongoDB 4.2","date":"2022-09-26T01:52:00.000Z","path":"2022/09/26/2022-09-26-ubuntu-22-04_install_mongodb-4-2/","text":"问题在于Ubuntu 22.04开始移除了libssl1.1的支持。所以需要先安装libssl1.1 12wget http://archive.ubuntu.com/ubuntu/pool/main/o/openssl/libssl1.1_1.1.0g-2ubuntu4_amd64.debsudo dpkg -i libssl1.1_1.1. 然后将18.04 boinic的source加入source list 12wget -qO - https://www.mongodb.org/static/pgp/server-4.2.asc | sudo apt-key add -echo &quot;deb [ arch=amd64,arm64 ] https://repo.mongodb.org/apt/ubuntu bionic/mongodb-org/4.2 multiverse&quot; | sudo tee /etc/apt/sources.list.d/mongodb-org-4.2.list 更新apt并安装 12apt updateapt install -y mongodb-org ¶参考 https://askubuntu.com/questions/1403619/mongodb-install-fails-on-ubuntu-22-04-depends-on-libssl1-1-but-it-is-not-insta https://www.mongodb.com/community/forums/t/installing-mongodb-over-ubuntu-22-04/159931/39","tags":[{"name":"Linux","slug":"Linux","permalink":"https://booksword.top/tags/Linux/"}],"categories":[{"name":"Programming","slug":"Programming","permalink":"https://booksword.top/categories/Programming/"},{"name":"MongoDB","slug":"Programming/MongoDB","permalink":"https://booksword.top/categories/Programming/MongoDB/"}]},{"title":"AVS合并视频文件","date":"2018-10-02T06:55:46.000Z","path":"2018/10/02/avs-merge-wmv/","text":"常用的视频压制软件，如MeGUI、小丸工具箱等都不支持直接合并视频。所以只能通过AVS脚本实现。但直接用工具生成的脚本压制后会有音画不同步问题。这里分享一种网上找到的办法，可以基本保证合并并压制出没有明显瑕疵的视频。 基本思路就是音画分别压制，视频部分用MeGUI自带的Avs Script Creator，生成后合并到一个文件里： 123456789101112LoadPlugin(&quot;E:\\MediaTools\\MeGUI-2715-32\\tools\\lsmash\\LSMASHSource.dll&quot;)LoadPlugin(&quot;E:\\MediaTools\\MeGUI-2715-32\\tools\\ffms\\ffms2.dll&quot;)A=FFVideoSource(&quot;F:\\JDownloader\\Downloads\\A.wmv&quot;, fpsnum=30, fpsden=1, threads=1)B=FFVideoSource(&quot;F:\\JDownloader\\Downloads\\B.wmv&quot;, fpsnum=30, fpsden=1, threads=1)C=FFVideoSource(&quot;F:\\JDownloader\\Downloads\\C.wmv&quot;, fpsnum=30, fpsden=1, threads=1)D=FFVideoSource(&quot;F:\\JDownloader\\Downloads\\D.wmv&quot;, fpsnum=30, fpsden=1, threads=1)A+B+C+D#deinterlace#cropLanczosResize(848,480) # Lanczos (Sharp)#denoise 音频部分直接用DirectShowSource，并强制帧率， 12345A = DirectShowSource(&quot;F:\\JDownloader\\Downloads\\A.wmv&quot;, fps=30.000, audio=true, convertfps=true)B = DirectShowSource(&quot;F:\\JDownloader\\Downloads\\B.wmv&quot;, fps=30.000, audio=true, convertfps=true)C = DirectShowSource(&quot;F:\\JDownloader\\Downloads\\C.wmv&quot;, fps=30.000, audio=true, convertfps=true)D = DirectShowSource(&quot;F:\\JDownloader\\Downloads\\D.wmv&quot;, fps=30.000, audio=true, convertfps=true)A+B+C+D 有个问题是MeGUI的x264似乎有些问题，所以这里视频要用小丸压，音频用MeGUI。最后用MeGUI的MP4Box做混流。 不是很完美的解决方案，有些麻烦，不过可以达到目的。","tags":[],"categories":[{"name":"视频压制","slug":"视频压制","permalink":"https://booksword.top/categories/%E8%A7%86%E9%A2%91%E5%8E%8B%E5%88%B6/"}]},{"title":"Linux Mint某些程序无法使用fcitx的输入法","date":"2018-07-29T04:59:32.000Z","path":"2018/07/29/Linux-fcitx-input-method-cannot-use/","text":"¶问题 安装了GoldenDict结果发现无法在搜索框里输入中文和日文。 ¶解决 安装Qt5版本的fcitx前端： 1sudo apt install fcitx-frontend-qt5 ¶原因 Linux下这点比较麻烦，输入法的UI框架有时需要和应用程序的UI框架一致才能启动。一般输入法都会有gtk+ 2/3，Qt 4/5等不同的前端。如果对于某个桌面应用输入法无法使用，需要先确定该应用是基于哪个UI框架的，再检查输入法该UI框架的前端有没有安装。如果没有安装，一般安装后即可解决问题。","tags":[],"categories":[{"name":"Linux","slug":"Linux","permalink":"https://booksword.top/categories/Linux/"}]},{"title":"Linux Mint 19安装Cuda 9.2以及cuDNN、NCCL","date":"2018-07-14T09:49:25.000Z","path":"2018/07/14/cuda-9-2-installation-on-Linux-mint-19/","text":"¶CUDA 系统升级到了Mint 19需要重新安装配置Cuda，同时升级到Cuda 9.2。Cuda 9.2需要Nvidia的驱动版本至少是396.37，但不幸的是apt仓库里的396版本驱动有问题，安装后无法被内核加载从而导致系统运行在软解状态。因此只好用bin文件安装。步骤如下： 去官网下载Cuda 9.2的bin安装文件，注意里面自带驱动所以不需要单独安装驱动。 按Ctrl+Alt+F2进入命令行模式，登录并sudo -i切换到root用户。 将之前安装的Nvidia驱动卸载掉以避免冲突。 12apt purge nvidia-396 nvidia-modprobe nvidia-settingsapt autoremove 停止X桌面服务。 1/etc/init.d/lightdm stop 给下载的run文件加执行权限，并运行 12chmod a+x cuda_9.2.148_396.37_linux.run./cuda_9.2.148_396.37_linux.run 按提示操作。问yes/no的问题都选yes。 安装完成后重启。 将cuda加入系统路径中： 在/etc/profile文件中加入如下内容 1export PATH=/usr/local/cuda/bin:$PAT 安装cuda示例所需依赖。 1sudo apt install libgl-dev libglu-dev libx11-dev libegl1-mesa-dev libgles2-mesa-dev libmpich-dev 将cuda示例的所有者从root改为当前用户(默认情况示例会被自动安装在sudo用户的$HOME下)。 1chown -R booksword:booksword NVIDIA_CUDA-9.2_Samples/ 编译示例。 12# force input macro value as linux mint is not officially supportedGLPATH=&quot;/usr/lib/x86_64-linux-gnu&quot; GLLINK=&quot;-L/usr/lib/x86_64-linux-gnu&quot; DFLT_PATH=&quot;/usr/lib&quot; EGLLIB=&quot;/usr/lib/x86_64-linux-gnu&quot; GLESLIB=&quot;/usr/lib/x86_64-linux-gnu&quot; make -j6 ¶cuDNN 首先从官网下载cudnn的deb文件: cuDNN v7.1.4 Runtime Library for Ubuntu16.04 (Deb) cuDNN v7.1.4 Developer Library for Ubuntu16.04 (Deb) cuDNN v7.1.4 Code Samples and User Guide for Ubuntu16.04 (Deb) 然后安装 123dpkg -i libcudnn7_7.1.4.18-1+cuda9.2_amd64.debdpkg -i libcudnn7-dev_7.1.4.18-1+cuda9.2_amd64.debdpkg -i libcudnn7-doc_7.1.4.18-1+cuda9.2_amd64.deb 安装完成后编译运行官方测试用例以验证安装： 将/usr/src/cudnn_samples_v7/复制到有写权限的目录下，并编译 12cd cudnn_samples_v7/mnistCUDNN/make ¶NCCL 1dpkg -i nccl-repo-ubuntu1604-2.2.13-ga-cuda9.2_1-1_amd64.deb ¶参考资料 官网文档","tags":[{"name":"Linux","slug":"Linux","permalink":"https://booksword.top/tags/Linux/"}],"categories":[{"name":"Programming","slug":"Programming","permalink":"https://booksword.top/categories/Programming/"},{"name":"Cuda","slug":"Programming/Cuda","permalink":"https://booksword.top/categories/Programming/Cuda/"}]},{"title":"Linux Mint从18.3升级到19","date":"2018-07-12T10:54:37.000Z","path":"2018/07/12/Upgrade-to-linux-mint-19-from-18-3/","text":"#####一、检查升级需求是否满足 只有Linux Mint 18.3 Cinnamon，MATE和Xfce版本可以用升级包升级。 使用18、18.1、18.2的需要先用Update Manager升级到18.3。 使用Timeshift保存一个系统镜像。 使用apt install timeshift安装Timeshift。 进入&quot;Menu -&gt; Administration -&gt; Timeshift&quot;打开Timeshift。 按提示创建镜像并设置自动创建频率，一切按默认选项即可。 确定当前X Display Manager是LightDM。 1cat /etc/X11/default-display-manager 如果得到/usr/sbin/lightdm，满足条件。 如果是/usr/sbin/mdm，则需要切换到LightDM。 1234sudo apt install lightdm lightdm-settings slick-greeter # 要求选择LDM或MDM时选择LDMsudo apt remove --purge mdm mint-mdm-themes*sudo dpkg-reconfigure lightdmsudo reboot ¶升级步骤 更新现有Linux Mint 18.3系统。 12sudo apt updatesudo apt upgrade 设置终端可以滚动无限多行以方便在失败后通过输出查找原因。 打开终端，在&quot;Edit&quot;菜单中&quot;Profile Preferences&quot;中&quot;Scrolling&quot;选项卡，把“Limit scrollback to XX lines”前面的复选框去掉。 安装升级工具。 1apt install mintupgrade 检查安装 使用mintupgrade check命令模拟升级，遵照显示的说明。此命令临时将系统指向Linux Mint 19并估计升级会带来的影响，但不会真执行升级操作所以不会对现有系统造成任何影响。如果检查过程中显示有软件包有冲突，用apt purge命令删除掉该软件包并记下包名，此外也要注意记录重要但会在升级时被自动删除掉的包，以备升级成功后重新安装。 重复执行本步骤直至输出符合预期（意味着没有冲突和重要的包会受到升级影响）。 下载更新并按装 12mintupgrade downloadmintupgrade upgrade ¶参考资料 How to upgrade to Linux Mint 19","tags":[],"categories":[{"name":"Linux","slug":"Linux","permalink":"https://booksword.top/categories/Linux/"}]},{"title":"Linux系统下多Nvidia显卡超频","date":"2018-07-10T11:56:58.000Z","path":"2018/07/10/Linux-multi-graphic-card-overclock/","text":"安装驱动 1apt install nvidia-384 nvidia-384-dev 下载一个edid文件用来模拟显示器以使得没有连接显示器的显卡可以被设置。 用xconfig生成xorg.conf文件(生成后位于/etc/X11/) 1nvidia-xconfig -a --cool-bits=28 --custom-edid=&quot;DFP-0:&lt;path to edid file&gt;&quot; --connected-monitor=&quot;DFP-0&quot; --no-use-display-device 打开/etc/X11/xorg.conf文件，可以看到对应每块显卡，均生成了Monitor，Device，Screen三个Section，其中Screen Section如下 12345678910111213Section &quot;Screen&quot; Identifier &quot;Screen1&quot; Device &quot;Device1&quot; Monitor &quot;Monitor1&quot; DefaultDepth 24 Option &quot;CustomEDID&quot; &quot;DFP-0:/etc/X11/delledid.bin&quot; Option &quot;ConnectedMonitor&quot; &quot;DFP-0&quot; Option &quot;UseDisplayDevice&quot; &quot;none&quot; Option &quot;Coolbits&quot; &quot;28&quot; SubSection &quot;Display&quot; Depth 24 EndSubSectionEndSection 可以看到刚才设置的各个条目都在Option里面。找到并删除掉实际连接显示器的Section中除了Coolbits之外的其他Option。 重启电脑。","tags":[],"categories":[{"name":"Linux","slug":"Linux","permalink":"https://booksword.top/categories/Linux/"},{"name":"Cuda","slug":"Linux/Cuda","permalink":"https://booksword.top/categories/Linux/Cuda/"}]},{"title":"Linux下Transmission的“UDP Failed to set receive buffer”错误","date":"2018-07-09T13:09:06.000Z","path":"2018/07/09/Transmission-UDP-Failed-to-set-receive-buffer/","text":"在Ubuntu 18.04的VPS上运行transmission-daemon报如下错误： 12345Jul 06 13:50:43 ubuntu-s-1vcpu-2gb-tor1-01 systemd[1]: Started Transmission BitTorrent Daemon.Jul 06 13:50:44 ubuntu-s-1vcpu-2gb-tor1-01 transmission-daemon[29663]: [2018-07-06 13:50:44.429] UDP Failed to set receive buffer: requested 4194304, got 425984 (tr-udp.c:84)Jul 06 13:50:44 ubuntu-s-1vcpu-2gb-tor1-01 transmission-daemon[29663]: [2018-07-06 13:50:44.430] UDP Failed to set send buffer: requested 1048576, got 425984 (tr-udp.c:95)Jul 06 13:50:44 ubuntu-s-1vcpu-2gb-tor1-01 transmission-daemon[29663]: [2018-07-06 13:50:44.430] UDP Failed to set receive buffer: requested 4194304, got 425984 (tr-udp.c:84)Jul 06 13:50:44 ubuntu-s-1vcpu-2gb-tor1-01 transmission-daemon[29663]: [2018-07-06 13:50:44.430] UDP Failed to set send buffer: requested 1048576, got 425984 (tr-udp.c:95) 解决方案如下： 12sysctl -w net.core.rmem_max=8388608sysctl -w net.core.wmem_max=8388608","tags":[],"categories":[{"name":"Linux","slug":"Linux","permalink":"https://booksword.top/categories/Linux/"},{"name":"应用软件","slug":"Linux/应用软件","permalink":"https://booksword.top/categories/Linux/%E5%BA%94%E7%94%A8%E8%BD%AF%E4%BB%B6/"}]},{"title":"Nginx建立多个server","date":"2018-07-08T08:53:39.000Z","path":"2018/07/08/Nginx-setup-second-server/","text":"在/etc/nginx/conf.d/中添加conf文件，如myblog.conf，最简内容如下： 12345server &#123; listen &lt;port&gt;; root /var/www/myblog/; # root path index index.html index.htm index.php; # default page&#125; 检查/etc/nginx/conf.d/download.conf是否有include /etc/nginx/conf.d/*.conf;， 如果没有则添加。 运行nginx -t检查配置文件是否正确。 检查权限： 查看运行nginx的用户: 1ps aux | grep &quot;nginx: worker process&quot; | awk &#x27;&#123;print $1&#125;&#x27; 对配置中的root目录，如上例中的/var/www/myblog/及其所有父目录和需要http访问的子目录，设置权限为755，对所有文件设为644。（注意这里很多网上资料的解决方案是将nginx运行用户改为root用户，这样也能解决权限导致的403问题，但出于安全考虑不建议这样做。） 访问http://&lt;ip address&gt;:&lt;port&gt; 检查配置的正确性。","tags":[],"categories":[{"name":"nginx","slug":"nginx","permalink":"https://booksword.top/categories/nginx/"}]},{"title":"Hexo静态博客系列之一——在VPS上搭建","date":"2018-07-03T13:02:14.000Z","path":"2018/07/03/Build-Hexo-blog/","text":"¶本地部分 安装node.js 12curl -sL https://deb.nodesource.com/setup_8.x | sudo -E bash -apt install nodejs -y 安装Hexo 1npm install -g hexo-cli 初始化博客： 使用 1hexo init myblog 创建myblog目录并在其中生成博客需要的基本文件。 初始化结束后，安装用于git部署的插件hexo-deployer-git和用于预览的本地serverhexo-serverfor。 123cd myblognpm install hexo-deployer-git --savenpm install hexo-server 生成RSA密钥对用于与VPS之间的git验证 1ssh-keygen -b 2048 -t rsa ¶服务器部分 安装Web Server服务，这里用nginx。参照官网上的说明。 安装git：apt install git 为git单独建立一个账户，在$HOME下建立.ssh目录并在其中建立authorized_keys文件，将之前生成的密钥对中的公钥粘贴到其中： 12345adduser gitsu gitcd ~mkdir .sshvim .ssh/authorized_keys # paste public key 建立git裸仓库（bare repository）并设置一个钩子使得push进入裸仓库的文件自动复制到网站根目录下： 123git init --bare blog.gitvi blog.git/hooks/post-receivechmod +x blog.git/hooks/post-receive post-receive文件的内容为： 12#!/bin/shgit --work-tree=/var/www/html --git-dir=$HOME/blog.git checkout -f ¶返回本地部分 撰写第一篇博客 在之前生成的myblog目录下运行 1hexo new “helloworld” 生成新文章模板，位于/myblog/source/_posts/helloworld.md。 2. 在模板中填入内容 3. 生成HTML 1hexo generate 预览：hexo server 部署： 在_config.xml文件中配置部署信息： 1234deploy: type: git repo: git@&lt;server&gt;:&lt;path to bare repository&gt; branch: master 之后 1hexo deploy 即可。","tags":[],"categories":[{"name":"Hexo","slug":"Hexo","permalink":"https://booksword.top/categories/Hexo/"}]},{"title":"Linux Mint安装Cuda 9.1以及cuDNN、NICC","date":"2018-07-02T13:02:10.000Z","path":"2018/07/02/cuda-9-1-installation-on-linux-mint-with-cuDNN-and-NICC/","text":"¶CUDA 123456789101112131415# execute following command as root usersudo -idpkg -i cuda-repo-ubuntu1604_9.1.85-1_amd64.debapt-key adv --fetch-keys http://developer.download.nvidia.com/compute/cuda/repos/ubuntu1604/x86_64/7fa2af80.pubapt updateapt install cudachmod a+x /usr/local/cuda-9.1/bin/cuda-install-samples-9.1.sh# install cuda sample dependenciesapt install libgl-dev libglu-dev libx11-dev libegl1-mesa-dev libgles2-mesa-dev libmpich-dev# back to normal userexit# install cuda examplescuda-install-samples-9.1.sh ./# force input macro value as linux mint is not officially supportedGLPATH=&quot;/usr/lib/x86_64-linux-gnu&quot; GLLINK=&quot;-L/usr/lib/x86_64-linux-gnu&quot; DFLT_PATH=&quot;/usr/lib&quot; EGLLIB=&quot;/usr/lib/x86_64-linux-gnu&quot; GLESLIB=&quot;/usr/lib/x86_64-linux-gnu&quot; make -j6 ¶cuDNN 首先从https://developer.nvidia.com/rdp/cudnn-download cuDNN v7.0.5 Runtime Library for Ubuntu16.04 (Deb) cuDNN v7.0.5 Developer Library for Ubuntu16.04 (Deb) cuDNN v7.0.5 Code Samples and User Guide for Ubuntu16.04 (Deb) 接下来，安装 123dpkg -i libcudnn7_7.0.5.15-1+cuda9.1_amd64.debdpkg -i libcudnn7-dev_7.0.5.15-1+cuda9.1_amd64.debdpkg -i libcudnn7-doc_7.0.5.15-1+cuda9.1_amd64.deb 最后，运行官方测试用例以验证安装： 复制/usr/src/cudnn_samples_v7/到有写权限的目录下 12cd cudnn_samples_v7/mnistCUDNN/make ¶NICC 从https://developer.nvidia.com/nccl/nccl-download下载并 dpkg 安装。 1dpkg -i nccl-repo-ubuntu1604-2.1.15-ga-cuda9.1_1-1_amd64.deb","tags":[{"name":"Linux","slug":"Linux","permalink":"https://booksword.top/tags/Linux/"}],"categories":[{"name":"Programming","slug":"Programming","permalink":"https://booksword.top/categories/Programming/"},{"name":"Cuda","slug":"Programming/Cuda","permalink":"https://booksword.top/categories/Programming/Cuda/"}]},{"title":"重命名Visual Studio项目","date":"2018-07-02T13:02:08.000Z","path":"2018/07/02/Rename-Visual-Studio-Project-name-checklist/","text":"因为Visual Stuido的主文件名和项目名以及一些依赖文件都是相互关联的，因此单单简单粗暴地重命名项目和源代码会导致编译错误。以下给出一个完美重命名VS项目的步骤检查表： 在Visual Studio重命名项目； 重命名相关的源文件和头文件，并更正#include； 重命名.sln, .vcpoj和.vcxpoj文件； 将3中提到的三个文件（均为文本文件，可以用文本编辑器打开）中的旧名称替换为新名称。","tags":[],"categories":[{"name":"Programming","slug":"Programming","permalink":"https://booksword.top/categories/Programming/"},{"name":"Visual Studio","slug":"Programming/Visual-Studio","permalink":"https://booksword.top/categories/Programming/Visual-Studio/"}]},{"title":"apt提示key expired问题","date":"2018-07-02T04:02:12.000Z","path":"2018/07/02/apt-key-expired/","text":"首先找出过期的key: 1$ apt-key list | grep expired 其中BE1DB1F1就是key ID。 找到ID后即可用 1sudo apt-key adv --recv-keys --keyserver keys.gnupg.net BE1DB1F1 更新key。 ¶Reference https://serverfault.com/questions/7145/what-should-i-do-when-i-got-the-keyexpired-error-message-after-an-apt-get-update/718435#718435","tags":[],"categories":[{"name":"Linux","slug":"Linux","permalink":"https://booksword.top/categories/Linux/"}]},{"title":"无损迁移Linux系统到新磁盘","date":"2018-07-01T13:02:10.000Z","path":"2018/07/01/Move-linux-to-new-disk/","text":"笔者的电脑原有一块SSD上装了Windows 10和Linux的双系统，其中Linux分配了大约300GB空间，但随着系统膨胀，发现空间逐步不够使用了，因此又买了一块1TB的SSD，打算将Linux整体迁移到1TB盘上，将原SSD上Linux部分都划给Windows 10。在此记录下迁移步骤，以供参考。 （此步骤基于Linux Mint，其他发行版应该大同小异。） ¶迁移步骤 硬件安装； 刻录Linux安装U盘并以之启动电脑； 用fdisk命令分区，首先分2GBswap分区，其他作为迁移后的文件系统分区： 用fdisk -l命令检查当前磁盘挂载和分区情况，找出并记录下原SSD上Linux的swap分区和文件系统分区，以及新SSD的挂载点，假设分别是/dev/sda2, /dev/sda3,和/dev/sdd； 用fdisk /dev/sdd给新磁盘分为swap分区和文件系统分区： 12345678910111213Command (m for help): n # create partition of 2GB for swap areaPartition number (1-128, default 1): First sector (1-10000000, default 2048): Last sector, +sectors or +size&#123;K,M,G,T,P&#125; (34-2047, default 10000000): +2GCreated a new partition 1 of type &#x27;Linux filesystem&#x27; and of size 2 GiB.Command (m for help): n # create partition with remaining space for main filesystemPartition number (2-128, default 2): First sector (600001-10000000): Last sector, +sectors or +size&#123;K,M,G,T,P&#125; (600002-10000000, default 10000000): Created a new partition 3 of type &#x27;Linux filesystem&#x27; and of size 600 GiB. 再次fdisk -l查看新磁盘的分区，假设分别是/dev/sdd1和/dev/sdd2； 格式化新分区： 12mkfs.ext4 /dev/sdd1mkfs.ext4 /dev/sdd2 用dd命令复制旧SSD上Linux各分区到对应的新SSD分区上： 12dd if=/dev/sda2 of=/dev/sdd1dd if=/dev/sda3 of=/dev/sdd2 取决于文件分区大小，复制可能需要数个小时。此外，如果之前/boot是单独挂载的，在步骤3也需要创建对应的分区并拷贝内容。 更新磁盘信息： 12e2fsck -f /dev/sdd1resize2fs /dev/sdd1 使用gparted更新磁盘的UUID。完成后对应更新/etc/fstab中关于Linux系统的分区UUID： 使用blkid /dev/sdd1获得新磁盘上分区的UUID； 挂载新磁盘上的分区并更新位于/&lt;mount dir&gt;/etc/fstab为新UUID； 重启进入Windows 10，进入管理工具-&gt;磁盘管理，删除原SSD上的Linux分区； 用Linux安装盘再次启动系统，用boot-repair修复grub； 安装并打开boot-repair 1234sudo add-apt-repository ppa:yannubuntu/boot-repairsudo apt-get updatesudo apt-get install -y boot-repairboot-repair advanced mode选项卡中： “GRUB location&quot;选项卡, 选中&quot;Separate /boot/efi partition”，并选择Linux所在的分区。 “GRUB options&quot;选项卡，选中&quot;Purge GRUB before reinstalling it”。 重启，此时应该可以进入迁移后的Linux了。","tags":[],"categories":[{"name":"Linux","slug":"Linux","permalink":"https://booksword.top/categories/Linux/"}]},{"title":"个税改革分析，减税还是加税？","date":"2018-06-30T02:32:49.000Z","path":"2018/06/30/New-personal-tax/","text":"万众期待的个税改革草案昨天被发布出来征求公众意见，目前似乎讨论都只集中在起征点和级距上。然而，相比于另一个重大变化，也许起征点提高那么一点点的利得对于相当一部分人来说会被完全抵消。这个重大变化就是——年终奖要和工资合并计税了，从此以后年终奖的税是大大提高了的。。 为了仔细分析这一点的影响，先来看下目前的年终奖扣税规定： 以下内容引用自《国家税务总局关于调整个人取得全年一次性奖金等计算征收个人所得税方法问题的通知》（国税发〔2005〕9号）： 二、纳税人取得全年一次性奖金，单独作为一个月工资、薪金所得计算纳税，并按以下计税办法，由扣缴义务人发放时代扣代缴：(一) 先将雇员当月内取得的全年一次性奖金，除以12个月，按其商数确定适用税率和速算扣除数。如果在发放年终一次性奖金的当月，雇员当月工资薪金所得低于税法规定的费用扣除额，应将全年一次性奖金减除“雇员当月工资薪金所得与费用扣除额的差额”后的余额，按上述办法确定全年一次性奖金的适用税率和速算扣除数。 (二) 将雇员个人当月内取得的全年一次性奖金，按本条第(一)项确定的适用税率和速算扣除数计算征税，计算公式如下：如果雇员当月工资薪金所得高于(或等于)税法规定的费用扣除额的，适用公式为： 应纳税额＝雇员当月取得全年一次性奖金×适用税率一速算扣除数如果雇员当月工资薪金所得低于税法规定的费用扣除额的，适用公式为： 应纳税额＝(雇员当月取得全年一次性奖金一雇员当月工资薪金所得与费用扣除额的差额)×适用税率一速算扣除数 因此目前年终奖税率和基本工资是基本没有关系的。而草案税制实施后，由于所有收入要“综合计税”并按年扣缴，所以年终奖的最低税率将变成基本工资的边际税率。 “（一）居民个人的综合所得，以每一纳税年度的收入额减除费用六万元以及专项扣除、专项附加扣除和依法确定的其他扣除后的余额，为应纳税所得额。专项扣除包括居民个人按照国家规定的范围和标准缴纳的基本养老保险、基本医疗保险、失业保险等社会保险费和住房公积金等；专项附加扣除包括子女教育、继续教育、大病医疗、住房贷款利息和住房租金等支出。 因此，尽管草案税制起征点略有提高，并且级距稍有扩大，但其实对大多数中产的减税作用并没有想象得那么大，部分人甚至会被加税。 笔者试算了从年总收入1万到300万区间内草案税制的影响，结果如下图所示： 图中左上为草案税制与现行税制需缴纳税款的差额；右上和左下分别为现行税制和草案税制下平均税负，即个税/总收入；右下为平均税负的变化。 试算基于如下假设： 按帝都规定正常缴纳五险一金，帝都平均工资取最新公布8467元/月。正常情况下这个数字即将用于2018年7月到2019年6月社保基数计算。 只在一个单位取得工资奖金收入，没有其他需要“综合计税”的收入。 旧税率： 月标准扣除额3500元 全月应纳税所得额（含税级距） 税率 速算扣除数 不超过1,500元 3% 0 超过1,500元至4,500元的部分 10% 105 超过4,500元至9,000元的部分 20% 555 超过9,000元至35,000元的部分 25% 1,005 超过35,000元至55,000元的部分 30% 2,755 超过55,000元至80,000元的部分 35% 5,505 超过80,000元的部分 45% 13,505 草案税率： 年标准扣除额60000元 全年应纳税所得额（含税级距） 税率 速算扣除数 不超过36,000元 3% 0 超过36,000元至144,000元的部分 10% 2,520 超过144,000元至300,000元的部分 20% 16,920 超过300,000元至420,000元的部分 25% 31,920 超过420,000元至660,000元的部分 30% 52,920 超过660,000元至960,000元的部分 35% 85,920 超过960,000元的部分 45% 181,920 可以看出，如果按照草案执行，收入在90-200万元，奖金占总收入比例在20%-60%（也就是年终奖为3-18个月月薪）的相对高收入中产是最不幸的，不但没有获得减税，反而被加了税，最高可能要多缴纳总收入4-5%的税。考虑到收入在250万以上的人群年终奖占比都会比较高，所以大部分真正高收入的人群，比如年薪几千万的某保险公司老总这种反而能获得一小点减税（至少不会被加税，虽然他们也不会在意这么几万元钱）。当然，一直宣传的给低收入群体减税也算是实现了吧。","tags":[],"categories":[{"name":"其他","slug":"其他","permalink":"https://booksword.top/categories/%E5%85%B6%E4%BB%96/"}]},{"title":"MFC","date":"2018-06-26T13:02:16.000Z","path":"2018/06/26/MFC/","text":"¶Function call flow 123456CDialog::PreInitDialog()CDialog::HandleInitDialog(WPARAM, LPARAM)CDemoDlg::OnInitDialog()CDialog::CheckAutoCenter()CDialog::OnCmdMsg(nID, nCode, pExtra, pHandlerInfo);CDialog::PreTranslateMessage(pMsg) ¶Solve “Opened in another editor” in Resource View Close “Resource.h” and all “.rc” file. Then shrink and re-expand the “rc” folder in Resource View.","tags":[],"categories":[]},{"title":"关于减轻功夫墙（GFW）造成的不便的一些探讨","date":"2018-06-26T13:02:15.000Z","path":"2018/06/26/About-GongFu-Wall/","text":"¶使用gooreplacer重定向对Google的访问 众所周知，天朝无法访问任何Google的服务。但不幸很多外国网站，如码农必备的Stackoverflow等都会调用Google的API，这就导致了这些网站访问速度巨慢，功能不全等问题。在网上发现了有人开发的关于可以重定向Google API到国内镜像的插件，可以用于Firefox和Google Chrome上。特记录于此： 插件地址：https://github.com/jiacai2050/gooreplacer 如果只需要重定向Google的访问，可以复制如下Rules，保存为.gson格式后导入。 1234567891011121314151617181920212223242526272829303132333435363738394041&#123; &quot;createBy&quot;: &quot;http://liujiacai.net/gooreplacer/&quot;, &quot;createAt&quot;: &quot;Tue Jan 10 2017 17:45:39 GMT+0000&quot;, &quot;rules&quot;: &#123; &quot;ajax.googleapis.com&quot;: &#123; &quot;dstURL&quot;: &quot;ajax.proxy.ustclug.org&quot;, &quot;kind&quot;: &quot;wildcard&quot;, &quot;enable&quot;: true &#125;, &quot;storage.googleapis.com&quot;: &#123; &quot;dstURL&quot;: &quot;storage-googleapis.proxy.ustclug.org&quot;, &quot;kind&quot;: &quot;wildcard&quot;, &quot;enable&quot;: true &#125;, &quot;gerrit.googlesource.com&quot;: &#123; &quot;dstURL&quot;: &quot;gerrit-googlesource.proxy.ustclug.org&quot;, &quot;kind&quot;: &quot;wildcard&quot;, &quot;enable&quot;: true &#125;, &quot;themes.googleusercontent.com&quot;: &#123; &quot;dstURL&quot;: &quot;google-themes.proxy.ustclug.org&quot;, &quot;kind&quot;: &quot;wildcard&quot;, &quot;enable&quot;: true &#125;, &quot;platform.twitter.com/widgets.js&quot;: &#123; &quot;dstURL&quot;: &quot;cdn.rawgit.com/jiacai2050/gooreplacer/gh-pages/proxy/widgets.js&quot;, &quot;kind&quot;: &quot;wildcard&quot;, &quot;enable&quot;: true &#125;, &quot;apis.google.com/js/api.js&quot;: &#123; &quot;dstURL&quot;: &quot;cdn.rawgit.com/jiacai2050/gooreplacer/gh-pages/proxy/api.js&quot;, &quot;kind&quot;: &quot;wildcard&quot;, &quot;enable&quot;: true &#125;, &quot;apis.google.com/js/plusone.js&quot;: &#123; &quot;dstURL&quot;: &quot;cdn.rawgit.com/jiacai2050/gooreplacer/gh-pages/proxy/plusone.js&quot;, &quot;kind&quot;: &quot;wildcard&quot;, &quot;enable&quot;: true &#125; &#125;&#125; 目前该插件存在一点问题，就是配置是基于Cookies保存的，如果浏览器设置了隐私模式或清除了Cookies，配置会丢失。 ¶Use PAC list for ss Install GenPAC (reference https://github.com/JinnLynn/GenPAC) 1pip install genpac Download url list 1genpac --pac-proxy &quot;SOCKS5 127.0.0.1:1080&quot; --gfwlist-proxy=&quot;SOCKS5 127.0.0.1:1080&quot; --output=&quot;mypac.pac&quot; Setup global proxy in system","tags":[{"name":"GFW, gooreplacer, ss","slug":"GFW-gooreplacer-ss","permalink":"https://booksword.top/tags/GFW-gooreplacer-ss/"}],"categories":[{"name":"其他","slug":"其他","permalink":"https://booksword.top/categories/%E5%85%B6%E4%BB%96/"}]},{"title":"Tesseract","date":"2018-06-26T13:02:15.000Z","path":"2018/06/26/Tesseract/","text":"¶Install ¶1. Required package 123apt install autoconf-archive automake g++ libtool make pkg-config # for main recognizationapt install asciidoc # for documentapt-get install libicu-dev libpango1.0-dev libcairo2-dev # for training tool ¶1.1 Build libleptonica-dev from source 1234567sudo -i # build as rootwget http://www.leptonica.org/source/leptonica-1.76.0.tar.gz # check http://www.leptonica.org/download.html for latest versiontar -xzf leptonica-1.76.0.tar.gzcd leptonica-1.76.0/./configuremakemake install ¶2. Clone tesseract from github 1git clone https://github.com/tesseract-ocr/tesseract.git tesseract ¶3. Build as non-root user 1234./autogen.sh./configure --prefix=$HOME/tesseract/bin/makemake install ¶4. Build training tool 12make trainingmake training-install ¶5. Get trained data Download required language from https://github.com/tesseract-ocr/tesseract/wiki/Data-Files","tags":[],"categories":[{"name":"AI","slug":"AI","permalink":"https://booksword.top/categories/AI/"},{"name":"OCR","slug":"AI/OCR","permalink":"https://booksword.top/categories/AI/OCR/"}]},{"title":"Git tricks","date":"2018-06-26T13:02:14.000Z","path":"2018/06/26/Git-ticks/","text":"¶Caching GitHub password in Git In Terminal, enter the following: 12git config --global credential.helper cache# Set git to use the credential memory cache To change the default password cache timeout, enter the following: 12git config --global credential.helper &#x27;cache --timeout=3600&#x27;# Set the cache to timeout after 1 hour (setting is in seconds) Or alternatively, store forever: 1git config --global credential.helper store ¶Revert local change to previous commit 1git checkout -- readme.txt # revert readme.txt to previous commit or 123git fetch --allgit reset --hard origin/mastergit pull // can be ignored ¶Revert to status in another branch 1git checkout &lt;other-branch-name&gt; -- &lt;path to your file_or_folder&gt;","tags":[],"categories":[{"name":"Programming","slug":"Programming","permalink":"https://booksword.top/categories/Programming/"},{"name":"Git","slug":"Programming/Git","permalink":"https://booksword.top/categories/Programming/Git/"}]},{"title":"Install HP print driver on Linux mint","date":"2018-06-26T13:02:13.000Z","path":"2018/06/26/Install-HP-print-driver-on-Linux-mint/","text":"HPIP download address: https://developers.hp.com/hp-linux-imaging-and-printing/gethplip","tags":[],"categories":[{"name":"Linux","slug":"Linux","permalink":"https://booksword.top/categories/Linux/"}]},{"title":"【Python知识库】pandas tricks","date":"2018-06-26T13:02:12.000Z","path":"2018/06/26/pandas-tricks/","text":"Pandas显示设置（最大行数等） 123456pd.set_option(&#x27;max_rows&#x27;, 500)#param choices# display.height# width# max_rows# max_columns 将Timestamp和Timedelta相加时报AttributeError: ‘NoneType’ object has no attribute ‘total_seconds’ 解决：重新安装pandas 1pip install --force-reinstall pandas","tags":[{"name":"python, pandas","slug":"python-pandas","permalink":"https://booksword.top/tags/python-pandas/"}],"categories":[{"name":"Programming","slug":"Programming","permalink":"https://booksword.top/categories/Programming/"},{"name":"Python","slug":"Programming/Python","permalink":"https://booksword.top/categories/Programming/Python/"}]},{"title":"build etherminer","date":"2018-06-26T13:02:11.000Z","path":"2018/06/26/build-etherminer/","text":"1234mkdir buildcd buildcmake ..make","tags":[],"categories":[{"name":"其他","slug":"其他","permalink":"https://booksword.top/categories/%E5%85%B6%E4%BB%96/"}]},{"title":"Build Tensorflow from source on Linux Mint","date":"2018-06-26T13:02:09.000Z","path":"2018/06/26/Build-Tensorflow-from-source-on-Linux-Mint/","text":"Install Bazel (a ) Install JDK 8 Install JDK 8 by using: 1apt install openjdk-8-jdk Add Bazel distribution URI as a package source (one time setup) 12echo &quot;deb [arch=amd64] http://storage.googleapis.com/bazel-apt stable jdk1.8&quot; | tee /etc/apt/sources.list.d/bazel.listcurl https://bazel.build/bazel-release.pub.gpg | sudo apt-key add - If you want to install the testing version of Bazel, replace stable with testing. Install and update Bazel 12apt updateapt install bazel Install CUDA and cuDNN (Details ignored, refer to ) Clone the TensorFlow repository 1git clone --recurse-submodules https://github.com/tensorflow/tensorflow --recurse-submodules is used to clone the dependency library protobuf. Install other dependency 1apt-get install python3-numpy swig python3-dev libgrpc-dev Configuration 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081You have bazel 0.10.1 installed.Please specify the location of python. [Default is /usr/bin/python]: /usr/local/anaconda3/bin/pythonFound possible Python library paths: /usr/local/anaconda3/lib/python3.6/site-packagesPlease input the desired Python library path to use. Default is [/usr/local/anaconda3/lib/python3.6/site-packages]Do you wish to build TensorFlow with jemalloc as malloc support? [Y/n]: yjemalloc as malloc support will be enabled for TensorFlow.Do you wish to build TensorFlow with Google Cloud Platform support? [Y/n]: yGoogle Cloud Platform support will be enabled for TensorFlow.Do you wish to build TensorFlow with Hadoop File System support? [Y/n]: nNo Hadoop File System support will be enabled for TensorFlow.Do you wish to build TensorFlow with Amazon S3 File System support? [Y/n]: nNo Amazon S3 File System support will be enabled for TensorFlow.Do you wish to build TensorFlow with Apache Kafka Platform support? [y/N]: nNo Apache Kafka Platform support will be enabled for TensorFlow.Do you wish to build TensorFlow with XLA JIT support? [y/N]: yXLA JIT support will be enabled for TensorFlow.Do you wish to build TensorFlow with GDR support? [y/N]: nNo GDR support will be enabled for TensorFlow.Do you wish to build TensorFlow with VERBS support? [y/N]: nNo VERBS support will be enabled for TensorFlow.Do you wish to build TensorFlow with OpenCL SYCL support? [y/N]: nNo OpenCL SYCL support will be enabled for TensorFlow.Do you wish to build TensorFlow with CUDA support? [y/N]: yCUDA support will be enabled for TensorFlow.Please specify the CUDA SDK version you want to use, e.g. 7.0. [Leave empty to default to CUDA 9.0]: 9.1Please specify the location where CUDA 9.1 toolkit is installed. Refer to README.md for more details. [Default is /usr/local/cuda]:Please specify the cuDNN version you want to use. [Leave empty to default to cuDNN 7.0]: 7.0.5Please specify the location where cuDNN 7 library is installed. Refer to README.md for more details. [Default is /usr/local/cuda]: /usrDo you wish to build TensorFlow with TensorRT support? [y/N]: nNo TensorRT support will be enabled for TensorFlow.Please specify a list of comma-separated Cuda compute capabilities you want to build with.You can find the compute capability of your device at: https://developer.nvidia.com/cuda-gpus.Please note that each additional compute capability significantly increases your build time and binary size. [Default is: 3.5,5.2]6.1Do you want to use clang as CUDA compiler? [y/N]: nnvcc will be used as CUDA compiler.Please specify which gcc should be used by nvcc as the host compiler. [Default is /usr/bin/gcc]:Do you wish to build TensorFlow with MPI support? [y/N]: yMPI support will be enabled for TensorFlow.Please specify the MPI toolkit folder. [Default is ]: /usrPlease specify optimization flags to use during compilation when bazel option &quot;--config=opt&quot; is specified [Default is -march=native]:Would you like to interactively configure ./WORKSPACE for Android builds? [y/N]: nNot configuring the WORKSPACE for Android builds.Preconfigured Bazel build configs. You can use any of the below by adding &quot;--config=&lt;&gt;&quot; to your build command. See tools/bazel.rc for more details. --config=mkl # Build with MKL support. --config=monolithic # Config for mostly static monolithic build.Configuration finished Build 1bazel build -c opt --config=cuda //tensorflow/cc:tutorials_example_trainer Test run 1bazel-bin/tensorflow/cc/tutorials_example_trainer --use_gpu Build pip package Create an env under Anaconda specified for tensorflow (assuming that Anaconda is installed) 1/usr/local/anaconda3/bin/conda create -n tensorflow pip python=3.6.4 anaconda Activate the env 1source /usr/local/anaconda3/bin/activate tensorflow Build under the env 1234567891011# To resolve the error caused by location of mpi header files in system is not consistent with tensorflowrm -rf third_party/mpi/mpi*.hln -s /usr/include/mpich/mpi.h third_party/mpi/mpi.hln -s /usr/include/mpich/mpicxx.h third_party/mpi/mpicxx.hln -s /usr/include/mpich/mpio.h third_party/mpi/mpio.h# buildbazel build --config=opt --config=cuda //tensorflow/tools/pip_package:build_pip_package# generate wheel in /tmp/tensorflow_pkgbazel-bin/tensorflow/tools/pip_package/build_pip_package /tmp/tensorflow_pkg Install under Anaconda env 1pip install /tmp/tensorflow_pkg/tensorflow-1.6.0rc1-cp36-cp36m-linux_x86_64.whl Test installation 12345# enter tensorflow envsource /usr/local/anaconda3/bin/activate tensorflow# enter pythonpython In python interactive 1234567Python 3.6.4 |Anaconda, Inc.| (default, Jan 16 2018, 18:10:19)[GCC 7.2.0] on linuxType &quot;help&quot;, &quot;copyright&quot;, &quot;credits&quot; or &quot;license&quot; for more information.&gt;&gt;&gt; import tensorflow as tf&gt;&gt;&gt; tf.__version__&#x27;1.6.0-rc1&#x27;&gt;&gt;&gt; ¶Reference Bazel installation guide: https://docs.bazel.build/versions/master/install-ubuntu.html Tensorflow: https://tensorflow.google.cn/install/install_sources","tags":[{"name":"Linux","slug":"Linux","permalink":"https://booksword.top/tags/Linux/"}],"categories":[{"name":"AI","slug":"AI","permalink":"https://booksword.top/categories/AI/"},{"name":"框架","slug":"AI/框架","permalink":"https://booksword.top/categories/AI/%E6%A1%86%E6%9E%B6/"}]},{"title":"Linux Mint Cleanup","date":"2018-06-26T13:02:09.000Z","path":"2018/06/26/Linux-Mint-Cleanup/","text":"Clean up old kernel 123uname -r #check current using kerneldpkg --get-selections |grep linux # list installed kernelsapt purge xxx # remove","tags":[],"categories":[{"name":"Linux","slug":"Linux","permalink":"https://booksword.top/categories/Linux/"}]}],"categories":[{"name":"Programming","slug":"Programming","permalink":"https://booksword.top/categories/Programming/"},{"name":"Git","slug":"Programming/Git","permalink":"https://booksword.top/categories/Programming/Git/"},{"name":"Python","slug":"Programming/Python","permalink":"https://booksword.top/categories/Programming/Python/"},{"name":"C++","slug":"Programming/C","permalink":"https://booksword.top/categories/Programming/C/"},{"name":"其他","slug":"其他","permalink":"https://booksword.top/categories/%E5%85%B6%E4%BB%96/"},{"name":"数据库","slug":"数据库","permalink":"https://booksword.top/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"},{"name":"KDB+","slug":"数据库/KDB","permalink":"https://booksword.top/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/KDB/"},{"name":"CTP","slug":"Programming/CTP","permalink":"https://booksword.top/categories/Programming/CTP/"},{"name":"交易策略开发","slug":"交易策略开发","permalink":"https://booksword.top/categories/%E4%BA%A4%E6%98%93%E7%AD%96%E7%95%A5%E5%BC%80%E5%8F%91/"},{"name":"数据","slug":"交易策略开发/数据","permalink":"https://booksword.top/categories/%E4%BA%A4%E6%98%93%E7%AD%96%E7%95%A5%E5%BC%80%E5%8F%91/%E6%95%B0%E6%8D%AE/"},{"name":"Postgresql","slug":"数据库/Postgresql","permalink":"https://booksword.top/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/Postgresql/"},{"name":"应用软件","slug":"应用软件","permalink":"https://booksword.top/categories/%E5%BA%94%E7%94%A8%E8%BD%AF%E4%BB%B6/"},{"name":"Airflow","slug":"应用软件/Airflow","permalink":"https://booksword.top/categories/%E5%BA%94%E7%94%A8%E8%BD%AF%E4%BB%B6/Airflow/"},{"name":"jupyter","slug":"Programming/jupyter","permalink":"https://booksword.top/categories/Programming/jupyter/"},{"name":"ffmpeg","slug":"应用软件/ffmpeg","permalink":"https://booksword.top/categories/%E5%BA%94%E7%94%A8%E8%BD%AF%E4%BB%B6/ffmpeg/"},{"name":"Hexo","slug":"Hexo","permalink":"https://booksword.top/categories/Hexo/"},{"name":"Linux","slug":"Linux","permalink":"https://booksword.top/categories/Linux/"},{"name":"Cuda","slug":"Linux/Cuda","permalink":"https://booksword.top/categories/Linux/Cuda/"},{"name":"MongoDB","slug":"Programming/MongoDB","permalink":"https://booksword.top/categories/Programming/MongoDB/"},{"name":"视频压制","slug":"视频压制","permalink":"https://booksword.top/categories/%E8%A7%86%E9%A2%91%E5%8E%8B%E5%88%B6/"},{"name":"Cuda","slug":"Programming/Cuda","permalink":"https://booksword.top/categories/Programming/Cuda/"},{"name":"应用软件","slug":"Linux/应用软件","permalink":"https://booksword.top/categories/Linux/%E5%BA%94%E7%94%A8%E8%BD%AF%E4%BB%B6/"},{"name":"nginx","slug":"nginx","permalink":"https://booksword.top/categories/nginx/"},{"name":"Visual Studio","slug":"Programming/Visual-Studio","permalink":"https://booksword.top/categories/Programming/Visual-Studio/"},{"name":"AI","slug":"AI","permalink":"https://booksword.top/categories/AI/"},{"name":"OCR","slug":"AI/OCR","permalink":"https://booksword.top/categories/AI/OCR/"},{"name":"框架","slug":"AI/框架","permalink":"https://booksword.top/categories/AI/%E6%A1%86%E6%9E%B6/"}],"tags":[{"name":"Linux","slug":"Linux","permalink":"https://booksword.top/tags/Linux/"},{"name":"GFW, gooreplacer, ss","slug":"GFW-gooreplacer-ss","permalink":"https://booksword.top/tags/GFW-gooreplacer-ss/"},{"name":"python, pandas","slug":"python-pandas","permalink":"https://booksword.top/tags/python-pandas/"}]}